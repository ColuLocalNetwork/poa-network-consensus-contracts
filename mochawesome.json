{
  "stats": {
    "suites": 158,
    "tests": 602,
    "passes": 602,
    "pending": 0,
    "failures": 0,
    "start": "2018-12-29T13:38:07.241Z",
    "end": "2018-12-29T13:56:59.341Z",
    "duration": 1132100,
    "testsRegistered": 602,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "8113cf69-c40e-4150-af85-4ed801ccf595",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "b764b4e4-e7c8-4673-95d9-6b1bd934767a",
        "title": "BallotsStorageNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "BallotsStorageNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "5f43067b-c622-430c-9bb2-5372a8b17d3b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "BallotsStorageNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "63a0f39e-a8ff-4f4a-8124-555932650698",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "BallotsStorageNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "44a3b899-74b3-4412-97ec-23b822c3ac0c",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ed2d931d-9c5f-4df6-af78-99f53ec7970f",
        "title": "KeysManagerNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "KeysManagerNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "cae37721-c2da-4491-b0c3-87e2eb3fee19",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "KeysManagerNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0d4006c6-ce4c-4c7a-b097-889b0693b845",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "KeysManagerNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "dde693b6-113a-4c7b-a643-704a4992debb",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "907d98a6-d936-4b61-9291-fb2e480d6f48",
        "title": "ProxyStorageNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ProxyStorageNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "290faf72-9907-4686-ae6f-e3b975b52e8e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ProxyStorageNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "18f1692e-9053-4015-989e-5ba08153d732",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ProxyStorageNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9782d0bc-5f82-4070-b52e-5ef2d9a48467",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7bc24db2-579e-4832-abdc-4dfc705ae602",
        "title": "RewardByBlockNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByBlockNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "2166d4a1-962b-4332-a830-761df53d2350",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByBlockNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "643d5518-ae1b-4b16-a9a0-532f8f5bbde6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByBlockNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a08ea233-5be9-4aa9-a209-3ad3a222c630",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "162fb9e6-e1f9-4c92-ab8e-48264106e48f",
        "title": "RewardByTimeNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByTimeNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "156901da-7a18-4914-b691-775e7aa139db",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByTimeNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "14983ccb-91be-434d-b0de-57062b515663",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByTimeNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "78432220-14e7-4785-b58c-02d13567e191",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ae9fd741-7ee9-4a53-b2bb-8b26ecdc2116",
        "title": "ValidatorMetadataNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "57577533-3eb2-4685-ac62-f1f2a4f9db84",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8b39eb00-b85c-4b56-8682-49ab109809c3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3de0e4a3-6adb-4dd8-8e6b-3e6cc7f70db0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "410483b5-a95a-4e5d-a4d8-c7cc7210ef5e",
        "title": "VotingToChangeKeysNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeKeysNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "02d11879-9f0a-4379-94ce-217056eb2464",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeKeysNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "76d4fcd7-ce11-4517-8a16-4ab6b0146402",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeKeysNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "25968205-2f4a-4ee7-845e-d6965e68d883",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9d4f1602-dac7-436d-9c84-f8a9ab9249db",
        "title": "VotingToChangeMinThresholdNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMinThresholdNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "a3879d32-8f7c-4ad4-8b90-832235d2799c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMinThresholdNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "fdc9bfb8-b2c6-4a64-86b4-fff143315472",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMinThresholdNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ab772971-26f6-4b2a-aac1-70c6b0225045",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "400b8d65-af8c-4a6d-bb02-d2464a8e611e",
        "title": "VotingToChangeProxyAddressNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeProxyAddressNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "415632e1-a974-47b5-bd9a-a7e8d05f86af",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeProxyAddressNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d9a92611-5b40-4e76-bea1-9a55309e3284",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeProxyAddressNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "dfc29369-ed9a-4213-9bcd-71ea9a26394c",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8e6acf7c-175a-4bbb-a1e8-4813ab3d1caf",
        "title": "VotingToManageEmissionFundsNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToManageEmissionFundsNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "77462bb8-b968-4bdc-93bc-9fd68aa65886",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToManageEmissionFundsNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "960c02cc-fde5-4d16-a091-09c0b052ded3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToManageEmissionFundsNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "84b1342c-8b7b-452c-b688-7527cbfac7fe",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2734e2f5-88f6-4c44-b363-b8c22155995c",
        "title": "BallotsStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "BallotsStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "2de74ba9-f029-4df8-88f9-18ce9a75df1d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "BallotsStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "cccf5795-edd9-47e1-81cd-b6a4051e966b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "BallotsStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3a191907-319d-4cf8-84e6-0bb764498683",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "36319b9a-6c5b-4e30-89d6-02578893c9c3",
        "title": "EternalStorageProxyMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "EternalStorageProxyMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "c8d504a4-ba56-4f9f-8382-209195c2d2d8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "EternalStorageProxyMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "546c81ee-f09e-423a-9667-91f6f22d7823",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "EternalStorageProxyMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "27f16033-7abd-44d2-ae1a-174ec418e82c",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e55521c6-56a3-4693-8ebb-2556e90ba54a",
        "title": "KeysManagerMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "KeysManagerMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "e8febb1e-9da3-4740-8a12-a962a45cbedf",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "KeysManagerMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "cb578f2a-cdf2-4e56-9612-f29413ac7252",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "KeysManagerMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ed8f234c-43bf-431c-91fb-1e796ce2a5bd",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9782cab3-7c48-40b3-8889-c6ebef07b5da",
        "title": "PoaNetworkConsensusMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "PoaNetworkConsensusMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "7355facb-dd6c-4f10-952a-b12d2b1b9b70",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "PoaNetworkConsensusMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "eb2bdcd3-c871-41cc-b1e8-3ad1627320c0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "PoaNetworkConsensusMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "901b897e-7652-41ac-ad49-583ea7f1ea4f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4aba38ba-991a-43cd-8730-c5c22f79b1c1",
        "title": "ProxyStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ProxyStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "5beb585f-dfd9-4dc1-9aff-ae49650b1091",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ProxyStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "00e94f1e-1f5f-4d1f-a239-fcdb301faf7b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ProxyStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "799aa825-5d66-40c0-886c-8ca1ebaeed69",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a8421089-39b7-4b33-8f74-5a1bdc035820",
        "title": "RewardByBlockMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByBlockMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "0fa03e81-3b15-46b7-a062-b8dc03c38b6c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByBlockMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d1f2d193-3966-45e7-8bd5-f471bb24a92d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByBlockMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "f520d1f5-b997-457b-8564-d7f9da0d9962",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4fe72ace-e409-4fe9-84f3-587657635edf",
        "title": "RewardByTimeMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByTimeMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "9c97b232-f9ff-46ad-9de3-e600ca05326b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByTimeMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5f564493-0953-418e-aa49-57c253394a5d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByTimeMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a076f132-9109-48f6-bed1-6cca5d8ddb96",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5864c8ba-98dd-4e27-b76c-34115a4387f2",
        "title": "ValidatorMetadataMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "037f7ef1-2a39-4b85-b169-53e8e3cd03d7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "09b34d66-6c1c-4af4-9d26-a18ad0562f5f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9b9c76ae-1c0f-4316-a8f2-fe0964567bc5",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8c7cdbfa-e3eb-4303-bc06-d9e96caa7ed7",
        "title": "VotingToChangeKeysMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeKeysMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "524ae385-fc76-4ed7-8f4f-478f032799fe",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeKeysMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4b1d9268-5312-44cf-8014-54381de11655",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeKeysMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3866246b-0e99-4a4e-8aa7-0c212352547d",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "876dd62b-821a-40a3-8ff1-fdf6716b2e12",
        "title": "VotingToChangeMinThresholdMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMinThresholdMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "2de3bd3f-2e87-44f4-88d9-8a5097abb2c8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMinThresholdMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "97d99ef0-ad0d-43b7-9e53-801ba030c0e7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMinThresholdMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7e760258-2fe6-4e97-9fb1-fbd85df37ef0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f121d9ba-7bb8-4afe-9f8d-3e1113e3578d",
        "title": "VotingToChangeMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "dd9cd878-71f4-4e09-ab1c-bb0f3490435a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8b512988-c799-4d3e-9538-2e97de5e2fe4",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "91fd75ce-1e2c-4242-a614-a886fd1c079f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1613e6a0-9e28-4295-8ae1-75c2186b4313",
        "title": "VotingToChangeProxyAddressMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeProxyAddressMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "98e93eee-38b0-4ba1-ad5d-f792c9705a24",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeProxyAddressMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5da0b3c0-9d7a-4d9c-90b3-2be802fab519",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeProxyAddressMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a7254cfc-2699-466f-abe3-f642c0541ed0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0a0a8b01-b3d8-4073-b1eb-2ea818627d31",
        "title": "VotingToManageEmissionFundsMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToManageEmissionFundsMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "a111d917-ffa2-4a02-81d6-7a5b419a6a20",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToManageEmissionFundsMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "72f4fa41-a1fa-4e76-ab05-dd835b30c8ac",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToManageEmissionFundsMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "13452587-d0cd-4a5d-813f-73555a8a6052",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "605892bf-f8e9-4cb6-b8e9-59e280e6f9ce",
        "title": "VotingKey",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingKey \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "cc974908-47b6-4c0a-a8f4-a22c50a421a6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingKey \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1be11f70-ef5d-4671-a07d-04b57a65988f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingKey \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8d752b95-ccaa-477b-ba27-a233bfb5fb3b",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f5ab274e-80bf-4ac7-8ed8-6adfd5ad4447",
        "title": "Contract: BallotsStorage [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
        "file": "/test/ballots_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: BallotsStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 209,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "05863637-d3de-48a3-a3af-0a0e3e2e5d60",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "500b0306-1504-4501-9646-f6da55a0eb90",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 629,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\nvotingToChangeKeys = accounts[0];\nvotingToChangeMinThreshold = accounts[3];\nvotingToChangeProxy = accounts[4];\nvotingToManageEmissionFunds = accounts[5];\nrewardByBlock = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 3]).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nawait proxyStorage.initializeAddresses(\n  keysManager.address,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  votingToManageEmissionFunds,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock\n);",
            "err": {},
            "isRoot": false,
            "uuid": "96657482-b998-4fc5-9e12-bb4d2d5b7f34",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: BallotsStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "166ec343-df49-4592-b182-dda523b72334",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "68676b01-b50c-4365-8e00-f2c878b2c0f2",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "prevent from double init",
                "fullTitle": "Contract: BallotsStorage [all features] #init prevent from double init",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.init([3, 2]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e1d1601b-78e6-4519-87f1-e2ca9ecd42bd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "thresholds are correct",
                "fullTitle": "Contract: BallotsStorage [all features] #init thresholds are correct",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(3).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(1)\n);\nnew web3.BigNumber(2).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "0f702379-893b-49ef-aa60-df65d1447f26",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e1d1601b-78e6-4519-87f1-e2ca9ecd42bd",
              "0f702379-893b-49ef-aa60-df65d1447f26"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 65,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ad891d02-579a-4db1-85da-58f98b4f957e",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy thresholds from an old contract",
                "fullTitle": "Contract: BallotsStorage [all features] #migrate should copy thresholds from an old contract",
                "timedOut": false,
                "duration": 309,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nconst ballotsEternalStorageNew = await EternalStorageProxy.new(proxyStorage.address, ballotsStorageNew.address);\nballotsStorageNew = await BallotsStorage.at(ballotsEternalStorageNew.address);\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(0);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(0);\nawait ballotsStorageNew.migrate('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.fulfilled;\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(3);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(2);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b13c9c82-9834-42bb-87ca-576a4175755f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b13c9c82-9834-42bb-87ca-576a4175755f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 309,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "db28eb5c-424d-4e6e-918e-fbad80182b72",
            "title": "#setThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeThreshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold can only be called from votingToChangeThreshold address",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.setThreshold(4, 1, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait setThreshold(4, 1, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "2a62b00e-b85d-4a1f-aabf-2030b7a7bd30",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set for Invalid threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold cannot be set for Invalid threshold",
                "timedOut": false,
                "duration": 213,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(3, 1, false, {from: accounts[3]});\nawait setThreshold(5, 0, false, {from: accounts[3]});\nawait setThreshold(5, -10, false, {from: accounts[3]});\nawait setThreshold(5, -1, false, {from: accounts[3]});\nawait setThreshold(5, 3, false, {from: accounts[3]});\nawait setThreshold(3, 2, false, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "e77d9fd7-4d1f-4df6-a1ca-cd51298d643d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new value cannot be equal to 0",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold new value cannot be equal to 0",
                "timedOut": false,
                "duration": 149,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(0, 1, false, {from: accounts[3]});\nawait setThreshold(0, 2, false, {from: accounts[3]});\nawait setThreshold(4, 1, true, {from: accounts[3]});\nawait setThreshold(1, 2, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "1147b982-1ac1-4002-9ed3-765281a30a49",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for Keys threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for Keys threshold",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(5, 1, true, {from: accounts[3]});\nnew web3.BigNumber(5).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(1));",
                "err": {},
                "isRoot": false,
                "uuid": "0e47ae45-b11b-4325-bd6d-19626c7a0e32",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for MetadataChange threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for MetadataChange threshold",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(2).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));\nawait setThreshold(1, 2, true, {from: accounts[3]});\nnew web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));",
                "err": {},
                "isRoot": false,
                "uuid": "802e22de-643d-492d-ba71-4cebd0b17233",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2a62b00e-b85d-4a1f-aabf-2030b7a7bd30",
              "e77d9fd7-4d1f-4df6-a1ca-cd51298d643d",
              "1147b982-1ac1-4002-9ed3-765281a30a49",
              "0e47ae45-b11b-4325-bd6d-19626c7a0e32",
              "802e22de-643d-492d-ba71-4cebd0b17233"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 569,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6a01803a-56b1-4c5b-9923-fb2a0ba48f2c",
            "title": "#getProxyThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "return value is correct",
                "fullTitle": "Contract: BallotsStorage [all features] #getProxyThreshold return value is correct",
                "timedOut": false,
                "duration": 427,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(6).should.be.bignumber.equal(getValidators.length);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\nnew web3.BigNumber(3).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "22fa1d5e-40d1-40f6-be8b-2617ba5c18cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "return value is correct if MoC is removed",
                "fullTitle": "Contract: BallotsStorage [all features] #getProxyThreshold return value is correct if MoC is removed",
                "timedOut": false,
                "duration": 1475,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait addValidator(accounts[6]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(7).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(6);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());",
                "err": {},
                "isRoot": false,
                "uuid": "8730fff3-64cc-4716-90db-f450d645dda0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "22fa1d5e-40d1-40f6-be8b-2617ba5c18cf",
              "8730fff3-64cc-4716-90db-f450d645dda0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1902,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6962a0e3-d66e-4117-ba83-a8a50b4fd848",
            "title": "#getVotingToChangeThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns voting to change min threshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #getVotingToChangeThreshold returns voting to change min threshold address",
                "timedOut": false,
                "duration": 68,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "votingToChangeMinThreshold.should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())\nawait proxyStorage.setVotingToChangeMinThresholdMock(accounts[4]);\naccounts[4].should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "c5265398-9b3a-4802-abcf-2a4f09625adb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c5265398-9b3a-4802-abcf-2a4f09625adb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 68,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ec74e5ec-7463-4d3a-80aa-8bc331d0d41b",
            "title": "#getBallotLimitPerValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns correct limit",
                "fullTitle": "Contract: BallotsStorage [all features] #getBallotLimitPerValidator returns correct limit",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "2823e760-eb44-4d3c-a1a2-5911ee03da58",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "returns correct limit if MoC is removed",
                "fullTitle": "Contract: BallotsStorage [all features] #getBallotLimitPerValidator returns correct limit if MoC is removed",
                "timedOut": false,
                "duration": 1135,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(3);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "23f8415b-74cf-44bd-81b0-8b8e421f42e5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2823e760-eb44-4d3c-a1a2-5911ee03da58",
              "23f8415b-74cf-44bd-81b0-8b8e421f42e5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1405,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ca28a634-d263-4ad6-860b-3ba28e79b448",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 88,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nballotsStorage = await BallotsStorage.new();\nballotsStorageOldImplementation = ballotsStorage.address;\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "19f1347d-fc7a-4bf5-bfd7-36023187ced6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait ballotsEternalStorage.upgradeTo(ballotsStorageNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "5b4a4d47-6d6e-49f3-be28-2a6db20b3bea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nconst newImplementation = ballotsStorageNew.address;\n(await ballotsEternalStorage.implementation.call()).should.be.equal(ballotsStorageOldImplementation);\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\n(await ballotsEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "0b3b4876-4cfe-4ed1-9d26-6673b50721a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nconst oldVersion = await ballotsEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\n(await ballotsEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "726e762e-a066-4c1e-85ad-e21b0019b358",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 156,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\nballotsStorageNew = await BallotsStorageNew.at(ballotsEternalStorage.address);\n(await ballotsStorageNew.initialized.call()).should.be.equal(false);\nawait ballotsStorageNew.initialize();\n(await ballotsStorageNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "fb683fe0-14a7-4de5-83ed-908e09667ffb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nballotsStorageNew = await BallotsStorageNew.at(ballotsEternalStorage.address);\n(await ballotsStorageNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "629e425a-d880-426a-bbc0-10cf1c05c71a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 160,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(6, 1, true, {from: votingToChangeMinThreshold});\nlet ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nballotsStorageNew = await BallotsStorageNew.at(ballotsEternalStorage.address);\nconst threshold = await ballotsStorageNew.getBallotThreshold.call(1);\nthreshold.should.be.bignumber.equal(6);\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "1dc17553-21da-4de5-895a-12c7839abf6a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5b4a4d47-6d6e-49f3-be28-2a6db20b3bea",
              "0b3b4876-4cfe-4ed1-9d26-6673b50721a0",
              "726e762e-a066-4c1e-85ad-e21b0019b358",
              "fb683fe0-14a7-4de5-83ed-908e09667ffb",
              "629e425a-d880-426a-bbc0-10cf1c05c71a",
              "1dc17553-21da-4de5-895a-12c7839abf6a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 846,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "28c95ce6-7b9b-42e5-a6f9-1f312b90545e",
        "title": "Contract: BallotsStorage upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
        "file": "/test/ballots_storage_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1356,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "c437e4f8-bd80-4bf1-92ad-9b68a98b1071",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6cff522f-91fe-4cf9-a002-ef12e744e154",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 739,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\nvotingToChangeKeys = accounts[0];\nvotingToChangeMinThreshold = accounts[3];\nvotingToChangeProxy = accounts[4];\nvotingToManageEmissionFunds = accounts[5];\nrewardByBlock = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 3]).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nawait proxyStorage.initializeAddresses(\n  keysManager.address,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  votingToManageEmissionFunds,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock\n);\nlet ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await ballotsEternalStorage.upgradeTo(ballotsStorageNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\nballotsStorage = await BallotsStorageNew.at(ballotsEternalStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "2b5b9ea4-c404-4d9c-a1d5-63f101bdc1a0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0f60199a-8f16-4e41-8484-05a335e7ab7f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "9c4eb91a-30a6-4166-ba09-9e9d29ba4c5f",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "prevent from double init",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #init prevent from double init",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.init([3, 2]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c31d646e-e635-470b-884d-9045601fba66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "thresholds are correct",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #init thresholds are correct",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(3).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(1)\n);\nnew web3.BigNumber(2).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "a106e2fb-739b-4b2f-af6a-c21b90c1ef26",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c31d646e-e635-470b-884d-9045601fba66",
              "a106e2fb-739b-4b2f-af6a-c21b90c1ef26"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 52,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a90a7a82-5920-4406-af48-fff701b71a36",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy thresholds from an old contract",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #migrate should copy thresholds from an old contract",
                "timedOut": false,
                "duration": 236,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nconst ballotsEternalStorageNew = await EternalStorageProxy.new(proxyStorage.address, ballotsStorageNew.address);\nballotsStorageNew = await BallotsStorage.at(ballotsEternalStorageNew.address);\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(0);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(0);\nawait ballotsStorageNew.migrate('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.fulfilled;\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(3);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(2);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c2adc25a-d245-44f2-a547-cf8600bb7ca1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c2adc25a-d245-44f2-a547-cf8600bb7ca1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 236,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e1aa987d-166f-43b4-8711-3e8537ec880b",
            "title": "#setThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeThreshold address",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold can only be called from votingToChangeThreshold address",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.setThreshold(4, 1, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait setThreshold(4, 1, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "61922519-019e-407b-9ce9-87b80149ee38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set for Invalid threshold",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold cannot be set for Invalid threshold",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(3, 1, false, {from: accounts[3]});\nawait setThreshold(5, 0, false, {from: accounts[3]});\nawait setThreshold(5, -10, false, {from: accounts[3]});\nawait setThreshold(5, -1, false, {from: accounts[3]});\nawait setThreshold(5, 3, false, {from: accounts[3]});\nawait setThreshold(3, 2, false, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "5babdabe-3c48-4a06-aa53-21011158ab8d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new value cannot be equal to 0",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold new value cannot be equal to 0",
                "timedOut": false,
                "duration": 141,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(0, 1, false, {from: accounts[3]});\nawait setThreshold(0, 2, false, {from: accounts[3]});\nawait setThreshold(4, 1, true, {from: accounts[3]});\nawait setThreshold(1, 2, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "bed3010a-1644-48b1-b8df-4f66d7972ffc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for Keys threshold",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold sets new value for Keys threshold",
                "timedOut": false,
                "duration": 68,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(5, 1, true, {from: accounts[3]});\nnew web3.BigNumber(5).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(1));",
                "err": {},
                "isRoot": false,
                "uuid": "48a220b9-e169-4023-a420-61c45d657620",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for MetadataChange threshold",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold sets new value for MetadataChange threshold",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(2).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));\nawait setThreshold(1, 2, true, {from: accounts[3]});\nnew web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));",
                "err": {},
                "isRoot": false,
                "uuid": "0a43628d-97b3-431e-b855-31f138b4f9b8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "61922519-019e-407b-9ce9-87b80149ee38",
              "5babdabe-3c48-4a06-aa53-21011158ab8d",
              "bed3010a-1644-48b1-b8df-4f66d7972ffc",
              "48a220b9-e169-4023-a420-61c45d657620",
              "0a43628d-97b3-431e-b855-31f138b4f9b8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 508,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9879a311-e7c9-4f4b-ab47-78f319bc2935",
            "title": "#getProxyThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "return value is correct",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getProxyThreshold return value is correct",
                "timedOut": false,
                "duration": 396,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(6).should.be.bignumber.equal(getValidators.length);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\nnew web3.BigNumber(3).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "9219eadd-dafb-4d08-8768-0aa184874d4f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "return value is correct if MoC is removed",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getProxyThreshold return value is correct if MoC is removed",
                "timedOut": false,
                "duration": 1338,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait addValidator(accounts[6]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(7).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(6);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());",
                "err": {},
                "isRoot": false,
                "uuid": "50fc08c6-589a-4a7f-92b9-6ecb0568a204",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9219eadd-dafb-4d08-8768-0aa184874d4f",
              "50fc08c6-589a-4a7f-92b9-6ecb0568a204"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1734,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "394c1113-651d-4368-84f9-1eced6ace8f2",
            "title": "#getVotingToChangeThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns voting to change min threshold address",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getVotingToChangeThreshold returns voting to change min threshold address",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "votingToChangeMinThreshold.should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())\nawait proxyStorage.setVotingToChangeMinThresholdMock(accounts[4]);\naccounts[4].should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "3e6d878c-b0b2-4ab8-9617-28f81777e618",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3e6d878c-b0b2-4ab8-9617-28f81777e618"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 65,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b41a8545-8aa1-47c5-8b85-2a409e55fe84",
            "title": "#getBallotLimitPerValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns correct limit",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getBallotLimitPerValidator returns correct limit",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "3e7f8bc6-6b40-4cab-bd3e-5f9a5d3f8b62",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "returns correct limit if MoC is removed",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getBallotLimitPerValidator returns correct limit if MoC is removed",
                "timedOut": false,
                "duration": 1082,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(3);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "deb19ceb-bef7-4bb5-9374-c3c9611fd9ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3e7f8bc6-6b40-4cab-bd3e-5f9a5d3f8b62",
              "deb19ceb-bef7-4bb5-9374-c3c9611fd9ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1346,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "0ccd41bb-ae38-4cff-be5a-5e9096eef44c",
        "title": "Contract: EmissionFunds [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
        "file": "/test/emission_funds_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: EmissionFunds [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1085,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "f4784a08-d57c-4c58-89fe-b25a19586708",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: EmissionFunds [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "722bfbd6-6e70-4fc2-9c93-7313de8a935e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: EmissionFunds [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 376,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "amount = web3.toWei(10, 'ether');\nvotingToManageEmissionFunds = accounts[0];\nawait EmissionFunds.new(0).should.be.rejectedWith(ERROR_MSG);\n\nemissionFunds = await EmissionFunds.new(\n  votingToManageEmissionFunds\n).should.be.fulfilled;\n\nawait web3.eth.sendTransaction({\n  from: accounts[1],\n  to: emissionFunds.address,\n  value: amount\n});\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);",
            "err": {},
            "isRoot": false,
            "uuid": "0cd5852c-542d-4c26-b1d8-bae2e5ee9cdb",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: EmissionFunds [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "b0e3fcda-c52e-4471-b189-565f83f6526e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "924c0d41-3880-4e99-9ece-8be95dae209b",
            "title": "constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should save VotingToManageEmissionFunds address",
                "fullTitle": "Contract: EmissionFunds [all features] constructor should save VotingToManageEmissionFunds address",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await emissionFunds.votingToManageEmissionFunds.call()).should.be.equal(\n  votingToManageEmissionFunds\n);",
                "err": {},
                "isRoot": false,
                "uuid": "b4b8d3f6-7f86-4982-991b-ccd1a78a6196",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b4b8d3f6-7f86-4982-991b-ccd1a78a6196"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 24,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ba6cb3b8-8e3f-4e87-b133-3def98f9d35a",
            "title": "#fallback",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should receive funds",
                "fullTitle": "Contract: EmissionFunds [all features] #fallback should receive funds",
                "timedOut": false,
                "duration": 323,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await web3.eth.sendTransaction({\n  from: accounts[1],\n  to: emissionFunds.address,\n  value: amount\n});\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(\n  amount * 2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "82825aca-ca26-4b05-b16f-112a7865b9c4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "82825aca-ca26-4b05-b16f-112a7865b9c4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 323,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b9577b53-dddb-49f2-b302-1eeb7d8a2d8f",
            "title": "#sendFundsTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo \"before each\" hook",
                "timedOut": false,
                "duration": 167,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[2];\nreceiverInitBalance = await web3.eth.getBalance(receiver);",
                "err": {},
                "isRoot": false,
                "uuid": "5e2bf4b1-c9b8-44e3-9ef5-a64f35741f4d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by VotingToManageEmissionFunds",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo may only be called by VotingToManageEmissionFunds",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(5, 'ether');\nawait emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "ee43617f-c252-4dc3-8db0-38c9a1460b06",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should send funds to receiver",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should send funds to receiver",
                "timedOut": false,
                "duration": 331,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(4, 'ether');\nconst amountRemain = amount - amountToSend;\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(\n  amountRemain\n);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(amountToSend)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "bd0b534f-50ca-466d-a173-0ebc6aad98b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should send entire amount",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should send entire amount",
                "timedOut": false,
                "duration": 349,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amount,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(amount)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amount);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "88806aa2-b141-43c9-a65e-22af8f94b9f2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not send funds if amount greater than balance",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should not send funds if amount greater than balance",
                "timedOut": false,
                "duration": 345,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = amount + 1;\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nreceiverInitBalance.should.be.bignumber.equal(\n  await web3.eth.getBalance(receiver)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "b9f80f0f-2c58-41d1-b931-d404c592d237",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not send funds if amount is too much",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should not send funds if amount is too much",
                "timedOut": false,
                "duration": 337,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(11, 'ether');\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nreceiverInitBalance.should.be.bignumber.equal(\n  await web3.eth.getBalance(receiver)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "56b5414f-cd06-414b-b150-8680d238481c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if receiver is 0x0",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should be fulfilled if receiver is 0x0",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(5, 'ether');\nconst amountRemain = amount - amountToSend;\nconst {logs} = await emissionFunds.sendFundsTo(\n  '0x0000000000000000000000000000000000000000',\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namountRemain.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal('0x0000000000000000000000000000000000000000');\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "de7bf5fd-38a8-4c4a-95ce-5c969cba27ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if amount is zero",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should be fulfilled if amount is zero",
                "timedOut": false,
                "duration": 352,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = 0;\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nreceiverInitBalance.should.be.bignumber.equal(\n  await web3.eth.getBalance(receiver)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(0);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "c5e77f4b-a3fb-402a-931c-a796ada0348a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail if receiver address is not full",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should fail if receiver address is not full",
                "timedOut": false,
                "duration": 701,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const signature = web3.sha3('sendFundsTo(address,uint256)').slice(0, 10);\nlet data = signature;\ndata += '0000000000000000000000000000000000000000000000000000000000000A';\ndata += '0000000000000000000000000000000000000000000000004563918244F40000';\nlet receipt = await web3.eth.getTransactionReceipt(\n  await web3.eth.sendTransaction({\n    from: votingToManageEmissionFunds,\n    to: emissionFunds.address,\n    data: data\n  })\n);\nreceipt.logs.length.should.be.equal(0);\ndata = signature;\ndata += '000000000000000000000000000000000000000000000000000000000000000A';\ndata += '0000000000000000000000000000000000000000000000004563918244F40000';\nreceipt = await web3.eth.getTransactionReceipt(\n  await web3.eth.sendTransaction({\n    from: votingToManageEmissionFunds,\n    to: emissionFunds.address,\n    data: data\n  })\n);\nreceipt.logs.length.should.be.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "d38cff87-c388-4a24-a4cf-179650367590",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ee43617f-c252-4dc3-8db0-38c9a1460b06",
              "bd0b534f-50ca-466d-a173-0ebc6aad98b3",
              "88806aa2-b141-43c9-a65e-22af8f94b9f2",
              "b9f80f0f-2c58-41d1-b931-d404c592d237",
              "56b5414f-cd06-414b-b150-8680d238481c",
              "de7bf5fd-38a8-4c4a-95ce-5c969cba27ed",
              "c5e77f4b-a3fb-402a-931c-a796ada0348a",
              "d38cff87-c388-4a24-a4cf-179650367590"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2626,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "83d62943-5b60-452d-8f6e-f1f7dfaa0e77",
            "title": "#burnFunds",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by VotingToManageEmissionFunds",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds may only be called by VotingToManageEmissionFunds",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = web3.toWei(5, 'ether');\nawait emissionFunds.burnFunds(\n  amountToBurn,\n  {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "d55a7a07-4217-42df-8c72-e497d5c354b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should burn funds",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should burn funds",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = web3.toWei(4, 'ether');\nconst amountRemain = amount - amountToBurn;\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(\n  amountRemain\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToBurn);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "e050a7d5-d28c-465d-a102-90e70f6abdfa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should burn entire amount",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should burn entire amount",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await emissionFunds.burnFunds(\n  amount,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amount);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "c84dfedb-4440-490b-a862-b0dd2c313507",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not burn funds if amount greater than balance",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should not burn funds if amount greater than balance",
                "timedOut": false,
                "duration": 174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = amount + 1;\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToBurn);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "5c0e8c89-6c98-4c27-83e0-3767ebd0f4e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not burn funds if amount is too much",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should not burn funds if amount is too much",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = web3.toWei(11, 'ether');\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToBurn);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "981bd475-1582-4139-a260-85e36d395f10",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if amount is zero",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should be fulfilled if amount is zero",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = 0;\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(0);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "9f62ecf8-436e-4c05-9b33-c13494a9e087",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d55a7a07-4217-42df-8c72-e497d5c354b0",
              "e050a7d5-d28c-465d-a102-90e70f6abdfa",
              "c84dfedb-4440-490b-a862-b0dd2c313507",
              "5c0e8c89-6c98-4c27-83e0-3767ebd0f4e0",
              "981bd475-1582-4139-a260-85e36d395f10",
              "9f62ecf8-436e-4c05-9b33-c13494a9e087"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 919,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f8e311d7-e383-4c00-b7a8-d3e0cc15ebf6",
            "title": "#freezeFunds",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by VotingToManageEmissionFunds",
                "fullTitle": "Contract: EmissionFunds [all features] #freezeFunds may only be called by VotingToManageEmissionFunds",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToFreeze = web3.toWei(5, 'ether');\nawait emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "fb47255b-8d39-4aae-9c64-175a985315dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should freeze funds",
                "fullTitle": "Contract: EmissionFunds [all features] #freezeFunds should freeze funds",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToFreeze = web3.toWei(4, 'ether');\nconst {logs} = await emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsFrozen\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToFreeze);",
                "err": {},
                "isRoot": false,
                "uuid": "87285d90-5297-4db4-ad8e-30c1eeb6308e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if amount is zero",
                "fullTitle": "Contract: EmissionFunds [all features] #freezeFunds should be fulfilled if amount is zero",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToFreeze = 0;\nconst {logs} = await emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsFrozen\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "7fd01cf6-5784-489a-93dd-93e96d40004a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fb47255b-8d39-4aae-9c64-175a985315dc",
              "87285d90-5297-4db4-ad8e-30c1eeb6308e",
              "7fd01cf6-5784-489a-93dd-93e96d40004a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 385,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e20f714c-d5db-4e54-ac2e-186fcd248b48",
        "title": "Contract: EternalStorageProxy [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
        "file": "/test/eternal_storage_proxy_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: EternalStorageProxy [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 357,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "9c838ea7-82bb-4a2a-9378-0efffc0c9a57",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: EternalStorageProxy [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c1458aaa-bc0c-4d6a-b7a0-bd40b770ce27",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: EternalStorageProxy [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8199edcd-b209-4f87-838b-5024ac2da338",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "6115cf92-c1de-4e00-abe4-f0d6a38e8a8c",
            "title": "constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should revert if implementation address is equal to 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should revert if implementation address is equal to 0x0",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await EternalStorageProxy.new(\n  accounts[1],\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3cf91e66-fdf0-4255-a8b0-ae8bb4befac0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow ProxyStorage address equal to 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should allow ProxyStorage address equal to 0x0",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  '0x0000000000000000000000000000000000000000',\n  accounts[1]\n).should.be.fulfilled;\ninstance.address.should.be.equal(\n  await instance.getProxyStorage.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "062524a8-dce5-4290-b717-b30da63318f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set ProxyStorage address",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should set ProxyStorage address",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;\n(await instance.getProxyStorage.call()).should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "bc1b22b4-e7f8-4783-a07c-02be871ccbff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set implementation address",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should set implementation address",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;\n(await instance.implementation.call()).should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "295ccb8d-807f-46e5-adb4-999e5a122c3c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should set owner",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;\n(await instance.getOwner.call()).should.be.equal(accounts[0]);",
                "err": {},
                "isRoot": false,
                "uuid": "71903519-be24-404c-a39c-b5325088400a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3cf91e66-fdf0-4255-a8b0-ae8bb4befac0",
              "062524a8-dce5-4290-b717-b30da63318f3",
              "bc1b22b4-e7f8-4783-a07c-02be871ccbff",
              "295ccb8d-807f-46e5-adb4-999e5a122c3c",
              "71903519-be24-404c-a39c-b5325088400a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 230,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ded686e1-b7cf-4dbb-ac81-069d0fb2916c",
            "title": "#renounceOwnership",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EternalStorageProxy [all features] #renounceOwnership \"before each\" hook",
                "timedOut": false,
                "duration": 45,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "6aa0a35a-c6b2-4dd5-97d5-83fe1f8058cd",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by an owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] #renounceOwnership may only be called by an owner",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.renounceOwnership({from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait instance.renounceOwnership().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "30b1649f-5402-4a08-873f-70c13b216a5c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set owner to 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] #renounceOwnership should set owner to 0x0",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await instance.renounceOwnership().should.be.fulfilled;\n(await instance.getOwner.call()).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\nlogs[0].event.should.be.equal(\"OwnershipRenounced\");\nlogs[0].args.previousOwner.should.be.equal(accounts[0]);",
                "err": {},
                "isRoot": false,
                "uuid": "93ee9533-5595-4f12-b5b1-5e330717ef8f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "30b1649f-5402-4a08-873f-70c13b216a5c",
              "93ee9533-5595-4f12-b5b1-5e330717ef8f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 75,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "53bd22e1-dfdb-41fa-a5b9-0986e2464d4c",
            "title": "#transferOwnership",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership \"before each\" hook",
                "timedOut": false,
                "duration": 42,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c48297f7-a7b5-4f06-a9a5-d79d39edaf6b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by an owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership may only be called by an owner",
                "timedOut": false,
                "duration": 139,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.transferOwnership(\n  accounts[3],\n  {from: accounts[4]}\n).should.be.rejectedWith(ERROR_MSG);\nawait instance.transferOwnership(accounts[3]).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "8eda5dac-d2a5-47fe-80d8-ddb9a6581e51",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership should change owner",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await instance.transferOwnership(accounts[3]).should.be.fulfilled;\n(await instance.getOwner.call()).should.be.equal(accounts[3]);\nlogs[0].event.should.be.equal(\"OwnershipTransferred\");\nlogs[0].args.previousOwner.should.be.equal(accounts[0]);\nlogs[0].args.newOwner.should.be.equal(accounts[3]);",
                "err": {},
                "isRoot": false,
                "uuid": "2dda668b-dd7c-45f0-8915-4ad3886e6d6b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not change owner if its address is 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership should not change owner if its address is 0x0",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.transferOwnership(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b3170734-7f06-4e3e-b957-37eeea27bea8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8eda5dac-d2a5-47fe-80d8-ddb9a6581e51",
              "2dda668b-dd7c-45f0-8915-4ad3886e6d6b",
              "b3170734-7f06-4e3e-b957-37eeea27bea8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 205,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "05b64c3f-79f7-40fa-9f37-1c15fbfd5883",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 31,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "0e7c2b3e-4271-4186-9a7b-5023e1a08583",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.upgradeTo(accounts[3]).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await instance.upgradeTo(accounts[3], {from: accounts[1]});\nlogs[0].event.should.be.equal(\"Upgraded\");",
                "err": {},
                "isRoot": false,
                "uuid": "01bc3b6b-3ce9-4987-9fb5-7ae3897738cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not change implementation address if it is the same",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should not change implementation address if it is the same",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await instance.upgradeTo(\n  accounts[2],\n  {from: accounts[1]}\n).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "9408e59c-5d03-40b7-902c-5c74a89b65d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not change implementation address if it is 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should not change implementation address if it is 0x0",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await instance.upgradeTo(\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[1]}\n);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "35c4e33e-bf1d-433f-96c0-4a62542e8b1f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await instance.upgradeTo(\n  accounts[3],\n  {from: accounts[1]}\n).should.be.fulfilled;\n(await instance.implementation.call()).should.be.equal(accounts[3]);\nlogs[0].event.should.be.equal(\"Upgraded\");\nlogs[0].args.version.should.be.bignumber.equal(1);\nlogs[0].args.implementation.should.be.equal(accounts[3]);",
                "err": {},
                "isRoot": false,
                "uuid": "bdbe539b-d410-40d3-95e9-272a68f97497",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment version",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should increment version",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await instance.version.call()).should.be.bignumber.equal(0);\nconst {logs} = await instance.upgradeTo(\n  accounts[3],\n  {from: accounts[1]}\n);\nlogs[0].event.should.be.equal(\"Upgraded\");\n(await instance.version.call()).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "cf686ed2-5372-44e0-a7c1-be25af629ffe",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "01bc3b6b-3ce9-4987-9fb5-7ae3897738cb",
              "9408e59c-5d03-40b7-902c-5c74a89b65d3",
              "35c4e33e-bf1d-433f-96c0-4a62542e8b1f",
              "bdbe539b-d410-40d3-95e9-272a68f97497",
              "cf686ed2-5372-44e0-a7c1-be25af629ffe"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 193,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9ab1b917-7f26-44f3-a3fc-7418ab02e304",
        "title": "Contract: KeysManager [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
        "file": "/test/keys_manager_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: KeysManager [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 486,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "c7fc5344-49da-44ac-aa7b-efcf39f49606",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4bda2f43-a51f-41b8-9032-c24745da641f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 617,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\",\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nlet ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvalidatorMetadata = await ValidatorMetadata.new();\nlet validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvalidatorMetadata = ValidatorMetadata.at(validatorMetadataEternalStorage.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsStorage.address,\n  validatorMetadata.address,\n  accounts[0]\n);",
            "err": {},
            "isRoot": false,
            "uuid": "2802b3bc-60df-40dc-abb6-66465bb83c51",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: KeysManager [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2dd06c71-e358-4bda-b904-7dba746f65f7",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "040c10b2-b922-4ab3-84d6-0c8487a36356",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets masterOfCeremony, proxyStorage, poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #constructor sets masterOfCeremony, proxyStorage, poaConsensus",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(await keysManager.masterOfCeremony.call());\nproxyStorageMock.address.should.be.equal(await keysManager.proxyStorage.call());\npoaNetworkConsensusMock.address.should.be.equal(await keysManager.poaNetworkConsensus.call());",
                "err": {},
                "isRoot": false,
                "uuid": "014d97dd-3a92-45b5-9c55-35caf11f6565",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds masterOfCeremony to validators hash",
                "fullTitle": "Contract: KeysManager [all features] #constructor adds masterOfCeremony to validators hash",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const validator = await keysManager.validatorKeys.call(masterOfCeremony);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "5e87409a-84b4-4b45-aa7e-79cd6c7595b2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called twice",
                "fullTitle": "Contract: KeysManager [all features] #constructor cannot be called twice",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.init(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6bd4f82b-52f3-450b-9158-f8ca7b5adb47",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "014d97dd-3a92-45b5-9c55-35caf11f6565",
              "5e87409a-84b4-4b45-aa7e-79cd6c7595b2",
              "6bd4f82b-52f3-450b-9158-f8ca7b5adb47"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 100,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "48424dfb-d07e-44a8-9f33-56eb583e356c",
            "title": "#initiateKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called by master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys can only be called by master of ceremony",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "43b0e814-9a8f-4447-9396-e55876807c34",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot allow 0x0 addresses",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys cannot allow 0x0 addresses",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys('0x0').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6eec44cf-7663-4f9f-ac50-192e6d0c53ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key",
                "timedOut": false,
                "duration": 72,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0eb5e632-e414-4eba-9177-cf18776c39ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key after validator created mining key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key after validator created mining key",
                "timedOut": false,
                "duration": 160,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.createKeys(accounts[3],accounts[4],accounts[5], {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "83a01017-8aa8-4471-98cc-538a0be76cf0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not equal to master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not equal to master of ceremony",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(masterOfCeremony, {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "faf80020-e49d-4811-89b9-295f3e3b42f1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 628,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys.call();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(12);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000013', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9f6ad474-b2df-4aee-bd7c-f121d0d18420",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment initialKeyCount by 1",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should increment initialKeyCount by 1",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let initialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(0);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\ninitialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "0c8e281e-b6cd-4a77-8dcb-9295d6cc5019",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set initialKeys hash to activated status",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should set initialKeys hash to activated status",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(0).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nconst {logs} = await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nnew web3.BigNumber(1).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nlet initialKeysCount = await keysManager.initialKeysCount.call();\n// event InitialKeyCreated(address indexed initialKey, uint256 time, uint256 initialKeysCount);\nlogs[0].event.should.equal(\"InitialKeyCreated\");\nlogs[0].args.initialKey.should.be.equal(accounts[1]);\ninitialKeysCount.should.be.bignumber.equal(logs[0].args.initialKeysCount);",
                "err": {},
                "isRoot": false,
                "uuid": "316c57a2-413a-4bbd-9436-29a93fb94440",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "43b0e814-9a8f-4447-9396-e55876807c34",
              "6eec44cf-7663-4f9f-ac50-192e6d0c53ad",
              "0eb5e632-e414-4eba-9177-cf18776c39ce",
              "83a01017-8aa8-4471-98cc-538a0be76cf0",
              "faf80020-e49d-4811-89b9-295f3e3b42f1",
              "9f6ad474-b2df-4aee-bd7c-f121d0d18420",
              "0c8e281e-b6cd-4a77-8dcb-9295d6cc5019",
              "316c57a2-413a-4bbd-9436-29a93fb94440"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1199,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0f783465-2ab1-4090-b48c-218753f4aa24",
            "title": "#createKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from initialized key",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should only be called from initialized key",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "cc7acdb8-c0c3-44e2-8346-42bdf07a07d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to 0x0",
                "fullTitle": "Contract: KeysManager [all features] #createKeys params should not be equal to 0x0",
                "timedOut": false,
                "duration": 241,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(\n  '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  '0x0000000000000000000000000000000000000000',\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "417f3447-d893-4d7a-b934-1c76c9675bd3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to each other",
                "fullTitle": "Contract: KeysManager [all features] #createKeys params should not be equal to each other",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(masterOfCeremony, masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], masterOfCeremony, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "43224c71-1d88-4bc2-9dfe-f0ceff5dfff9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "any of params should not be equal to initialKey",
                "fullTitle": "Contract: KeysManager [all features] #createKeys any of params should not be equal to initialKey",
                "timedOut": false,
                "duration": 154,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[1], masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[1], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9037295f-cec1-4ee1-8950-2455c339123b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow passing the same key after it is already created",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should not allow passing the same key after it is already created",
                "timedOut": false,
                "duration": 379,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[5], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[2], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[3], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[4], accounts[7], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[6], {from: accounts[5]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "79cbfb46-f686-4478-950e-d7c898c253f0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign mining, voting, payout keys to relative mappings",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assign mining, voting, payout keys to relative mappings",
                "timedOut": false,
                "duration": 311,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\ntrue.should.be.equal(\n  await keysManager.isMiningActive.call(accounts[4])\n)\ntrue.should.be.equal(\n  await keysManager.isVotingActive.call(accounts[3])\n)\ntrue.should.be.equal(\n  await keysManager.isPayoutActive.call(accounts[4])\n)\n// event ValidatorInitialized(address indexed miningKey, address indexed votingKey, address indexed payoutKey);\nlogs[0].event.should.be.equal('ValidatorInitialized');\nlogs[0].args.miningKey.should.be.equal(accounts[4]);\nlogs[0].args.votingKey.should.be.equal(accounts[3]);\nlogs[0].args.payoutKey.should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "817a4f2a-6c8b-417b-a516-cd536d590685",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign voting <-> mining key and payout <-> mining key relationships",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assign voting <-> mining key and payout <-> mining key relationships",
                "timedOut": false,
                "duration": 155,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]});\naccounts[4].should.be.equal(\n  await keysManager.getMiningKeyByVoting.call(accounts[3])\n);\naccounts[4].should.be.equal(\n  await keysManager.miningKeyByPayout.call(accounts[2])\n);",
                "err": {},
                "isRoot": false,
                "uuid": "ecb08786-e277-4887-ab09-bcbc0a3069c5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds validator to poaConsensus contract",
                "fullTitle": "Contract: KeysManager [all features] #createKeys adds validator to poaConsensus contract",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst index = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\n(await poaNetworkConsensusMock.pendingList.call(index)).should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "03a92c70-ef0b-4946-b9a2-b8c4712eb1da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst validatorKey = await keysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  accounts[3],\n  accounts[2],\n  true,\n  true,\n  true\n])",
                "err": {},
                "isRoot": false,
                "uuid": "a4b1e2a1-980b-4871-840c-9ae59f848f59",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nnew web3.BigNumber(2).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));",
                "err": {},
                "isRoot": false,
                "uuid": "8cee4ad6-3846-46f6-b5b1-0f0689b62e6f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cc7acdb8-c0c3-44e2-8346-42bdf07a07d4",
              "417f3447-d893-4d7a-b934-1c76c9675bd3",
              "43224c71-1d88-4bc2-9dfe-f0ceff5dfff9",
              "9037295f-cec1-4ee1-8950-2455c339123b",
              "79cbfb46-f686-4478-950e-d7c898c253f0",
              "817a4f2a-6c8b-417b-a516-cd536d590685",
              "ecb08786-e277-4887-ab09-bcbc0a3069c5",
              "03a92c70-ef0b-4946-b9a2-b8c4712eb1da",
              "a4b1e2a1-980b-4871-840c-9ae59f848f59",
              "8cee4ad6-3846-46f6-b5b1-0f0689b62e6f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2040,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8ccd13e8-5fe2-4ace-8856-119c953acb0b",
            "title": "#addMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.setInitEnabled().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], false, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "7dc808a0-dab4-4cb8-b5e3-9595f0f8bbf2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called from votingToChangeKeys",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should only be called from votingToChangeKeys",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1],{from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], true, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "e1054540-4278-46c0-b0ba-b19126346d9b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add more than maxLimit",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should not let add more than maxLimit",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensusMock.setCurrentValidatorsLength(2001);\nawait addMiningKey(accounts[2], false);",
                "err": {},
                "isRoot": false,
                "uuid": "e83f9cdf-d605-4cf3-8508-57bb63d54d3d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should set validatorKeys hash",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[2]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "aa0c0271-de60-4db9-adf5-8c544f1c2dcb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7dc808a0-dab4-4cb8-b5e3-9595f0f8bbf2",
              "e1054540-4278-46c0-b0ba-b19126346d9b",
              "e83f9cdf-d605-4cf3-8508-57bb63d54d3d",
              "aa0c0271-de60-4db9-adf5-8c544f1c2dcb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 367,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f131ddc6-d3d4-4125-9fed-d3cfca248059",
            "title": "#addVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "54f301b3-d232-4c0e-994d-8a32a775c205",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 158,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[1], accounts[1], false);\nawait addVotingKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "da51b8a1-9a9f-499c-9b73-71b03d83fb2f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add VotingKey",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should add VotingKey",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addVotingKey(accounts[2], accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(accounts[2]);\nminingKey.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "f7f16e1d-3fec-44b7-a6e2-8ba620d26ec1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should only be called if mining is active",
                "timedOut": false,
                "duration": 237,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "bccefd7e-730d-47e4-b476-7b6f554d71a7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 247,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nfalse.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[3]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "9167c066-3e34-41ef-919b-208e38953adf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "54f301b3-d232-4c0e-994d-8a32a775c205",
              "da51b8a1-9a9f-499c-9b73-71b03d83fb2f",
              "f7f16e1d-3fec-44b7-a6e2-8ba620d26ec1",
              "bccefd7e-730d-47e4-b476-7b6f554d71a7",
              "9167c066-3e34-41ef-919b-208e38953adf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 950,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "bf6eda0b-68a5-4952-871c-ed18d6458b06",
            "title": "#addPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 161,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "39be1b13-81dd-4b13-aa89-9cbfd410d529",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 150,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[1], accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "e522e1b1-4b19-4a2e-a4a7-1e5b47acddea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add PayoutKey",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should add PayoutKey",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addPayoutKey(accounts[2], accounts[1], false);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "358962e2-858e-44e7-bc09-5d5d9a2e11e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should only be called if mining is active",
                "timedOut": false,
                "duration": 259,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "1ce76793-b11c-4fa8-ba89-37c0c9446ae6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 250,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addPayoutKey(accounts[3], accounts[1], true);\ntrue.should.be.equal(await keysManager.isPayoutActive.call(accounts[1]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "1a89edfa-c2b7-486c-bdac-1cf671d9b722",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "39be1b13-81dd-4b13-aa89-9cbfd410d529",
              "e522e1b1-4b19-4a2e-a4a7-1e5b47acddea",
              "358962e2-858e-44e7-bc09-5d5d9a2e11e3",
              "1ce76793-b11c-4fa8-ba89-37c0c9446ae6",
              "1a89edfa-c2b7-486c-bdac-1cf671d9b722"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 985,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "044b0692-0283-41ef-bc44-d77213bea39e",
            "title": "#removeMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nlet result = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "5c5b8ffa-316c-455c-9468-dfff04d5edde",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove miningKey",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should remove miningKey",
                "timedOut": false,
                "duration": 896,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423, \"\", false\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[3]}).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n);\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');\nlogs[1].event.should.be.equal('VotingKeyChanged');\nlogs[1].args.key.should.be.equal(accounts[3]);\nlogs[1].args.miningKey.should.be.equal(accounts[1]);\nlogs[1].args.action.should.be.equal('removed');\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\nlet result = await keysManager.removeVotingKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nresult = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "5d42f230-3a0b-4c80-a60d-2c8fab77c50f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes validator from poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey removes validator from poaConsensus",
                "timedOut": false,
                "duration": 376,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nlet currentValidatorsLength = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength.sub(1).toNumber(); i++){\n    let pending = await poaNetworkConsensusMock.pendingList.call(i);\n    pendingList.push(pending);\n}\npendingList.should.not.contain(accounts[1]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(accounts[1]);\nconst expected = currentValidatorsLength.sub(1);\nconst actual = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nexpected.should.be.bignumber.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "aac6f137-fb3e-4bc1-8279-527580ec548c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes MoC from poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey removes MoC from poaConsensus",
                "timedOut": false,
                "duration": 1162,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\n\nlet result = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs.length.should.be.equal(0);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\n\nresult = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "c61d5e7b-7e39-47ad-859c-fceb001dfdd9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "timedOut": false,
                "duration": 359,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1], true);\nresult = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('MiningKeyChanged');\nresult.logs[0].args.key.should.be.equal(accounts[1]);\nresult.logs[0].args.action.should.be.equal('removed');\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "7834b28f-ab8f-4a16-bc19-4d7fbed263d0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5c5b8ffa-316c-455c-9468-dfff04d5edde",
              "5d42f230-3a0b-4c80-a60d-2c8fab77c50f",
              "aac6f137-fb3e-4bc1-8279-527580ec548c",
              "c61d5e7b-7e39-47ad-859c-fceb001dfdd9",
              "7834b28f-ab8f-4a16-bc19-4d7fbed263d0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2969,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ad30cf49-bae9-49c4-9176-d3c1ecd2e442",
            "title": "#removeVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 561,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removeVotingKey(mining, false);",
                "err": {},
                "isRoot": false,
                "uuid": "4206ba39-2b06-4bd6-bbb7-532a6e95b293",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active voting key",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey should be successful only for active voting key",
                "timedOut": false,
                "duration": 216,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addPayoutKey(payout, mining, true);\nconst result = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait addVotingKey(voting, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.miningKey.should.be.equal(mining);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "5e339648-5ffd-4fb8-b2d6-22d62de6164e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove votingKey",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey should remove votingKey",
                "timedOut": false,
                "duration": 291,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait keysManager.removeVotingKey(mining, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(mining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  payout,\n  true,\n  false,\n  true]\n)\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(voting);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "1c375c0a-631a-4d24-8cc9-37997e2f6f6a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4206ba39-2b06-4bd6-bbb7-532a6e95b293",
              "5e339648-5ffd-4fb8-b2d6-22d62de6164e",
              "1c375c0a-631a-4d24-8cc9-37997e2f6f6a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1068,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6c28c3eb-1d78-435b-a5c6-46d2988181f7",
            "title": "#removePayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 214,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removePayoutKey(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "5a17e2c3-7087-4cad-a4b4-fbb245e43695",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active payout key",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey should be successful only for active payout key",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait removePayoutKey(accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "62fc49fa-4436-425d-964e-47d5c24a2fda",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove payoutKey",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey should remove payoutKey",
                "timedOut": false,
                "duration": 281,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removePayoutKey(accounts[1], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.miningKeyByPayout.call(accounts[2]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "ea39b671-c34c-4ae6-9ad5-63339cdf9c7e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5a17e2c3-7087-4cad-a4b4-fbb245e43695",
              "62fc49fa-4436-425d-964e-47d5c24a2fda",
              "ea39b671-c34c-4ae6-9ad5-63339cdf9c7e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 748,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5274e70f-be16-4251-b6f3-4265071eda51",
            "title": "#swapMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap mining key",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should swap mining key",
                "timedOut": false,
                "duration": 722,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapMiningKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[5], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423, \"\", false\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[5]}).should.be.fulfilled;\nawait swapMiningKey(accounts[2], accounts[1], true);\nawait swapMiningKey(accounts[4], accounts[3], false);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false\n]);\nconst validatorNew = await keysManager.validatorKeys.call(accounts[2]);\nvalidatorNew.should.be.deep.equal([\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false\n]);\n(await validatorMetadata.validators.call(accounts[2])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "78df0f46-13a7-4078-9553-4cc6b72e59b2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should swap MoC",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should swap MoC",
                "timedOut": false,
                "duration": 399,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait swapMiningKey(accounts[1], masterOfCeremony, true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await keysManager.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.isValidator.call(accounts[1])).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "4df200c6-f692-4b86-80ad-c9976cab3a5a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should keep voting and payout keys",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should keep voting and payout keys",
                "timedOut": false,
                "duration": 605,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldMining = accounts[1];\nconst voting = accounts[2];\nconst payout = accounts[3];\nconst newMining = accounts[4];\nawait addMiningKey(oldMining, true);\nawait addVotingKey(voting, oldMining, true);\nawait addPayoutKey(payout, oldMining, true);\nconst {logs} = await keysManager.swapMiningKey(newMining, oldMining).should.be.fulfilled;\n//const mining = await keysManager.getMiningKeyByVoting.call(voting);\nconst validator = await keysManager.validatorKeys.call(oldMining);\nnewMining.should.be.equal(await keysManager.getMiningKeyByVoting.call(voting));\nnewMining.should.be.equal(await keysManager.miningKeyByPayout.call(payout));\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys.call(newMining);\nvalidatorNew.should.be.deep.equal(\n  [ voting,\n  payout,\n  true,\n  true,\n  true]\n)\noldMining.should.be.equal(await keysManager.getMiningKeyHistory.call(newMining));\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(oldMining);\nvalidators.should.contain(newMining);",
                "err": {},
                "isRoot": false,
                "uuid": "24a62187-6339-4512-bdce-068deade594e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "78df0f46-13a7-4078-9553-4cc6b72e59b2",
              "4df200c6-f692-4b86-80ad-c9976cab3a5a",
              "24a62187-6339-4512-bdce-068deade594e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1726,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3b6352ba-49a2-4e5f-bc43-ddf90ceb122d",
            "title": "#swapVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap voting key",
                "fullTitle": "Contract: KeysManager [all features] #swapVotingKey should swap voting key",
                "timedOut": false,
                "duration": 240,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapVotingKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait swapVotingKey(accounts[3], accounts[1], true);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "193a60a9-c623-420b-823d-07fcb9798498",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "193a60a9-c623-420b-823d-07fcb9798498"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 240,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3183f207-741b-49a9-8148-46a658bdac93",
            "title": "#swapPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap payout key",
                "fullTitle": "Contract: KeysManager [all features] #swapPayoutKey should swap payout key",
                "timedOut": false,
                "duration": 246,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapPayoutKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.swapPayoutKey(accounts[3], accounts[1]);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "858a1328-eb6d-407f-b1b6-e256af825b9a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "858a1328-eb6d-407f-b1b6-e256af825b9a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 246,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f4470f7c-a80b-4eb1-a681-85c309087994",
            "title": "#migrateInitialKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can copy initial keys",
                "fullTitle": "Contract: KeysManager [all features] #migrateInitialKey can copy initial keys",
                "timedOut": false,
                "duration": 482,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\nkeysManager.address.should.be.equal(\n  await newKeysManager.previousKeysManager.call()\n);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\n\nawait newKeysManager.migrateInitialKey(\n  accounts[1],\n  {from: accounts[9]}\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateInitialKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateInitialKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.name.should.be.equal(\"initialKey\");\nawait newKeysManager.migrateInitialKey(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(1).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[1])\n)\nawait newKeysManager.migrateInitialKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(0).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[2])\n)",
                "err": {},
                "isRoot": false,
                "uuid": "e93cbb15-15fd-4afb-b6ef-6c69c79e4d28",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e93cbb15-15fd-4afb-b6ef-6c69c79e4d28"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 482,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "96ab575a-a425-4c4b-a10e-14ad5dcf92a7",
            "title": "#migrateMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "copies validator keys",
                "fullTitle": "Contract: KeysManager [all features] #migrateMiningKey copies validator keys",
                "timedOut": false,
                "duration": 1159,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[2];\nconst votingKey = accounts[3];\nconst payoutKey = accounts[4];\nconst miningKey2 = accounts[5];\nconst miningKey3 = accounts[6];\n\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey2, true);\nawait swapMiningKey(miningKey3, miningKey2, true);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, votingKey, payoutKey, {from: accounts[1]}).should.be.fulfilled;\n\nconst validatorKeyFromOld = await keysManager.validatorKeys.call(miningKey);\nvalidatorKeyFromOld.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\n// mining #1\nawait newKeysManager.migrateMiningKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateMiningKey(accounts[9]).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateMiningKey(miningKey).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(miningKey);\nlogs[0].args.name.should.be.equal(\"miningKey\");\nawait newKeysManager.migrateMiningKey(miningKey).should.be.rejectedWith(ERROR_MSG);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\nconst validatorKey = await newKeysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.getMiningKeyByVoting.call(votingKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.miningKeyByPayout.call(payoutKey)\n);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isVotingActive.call(votingKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isPayoutActive.call(miningKey)\n)\n// mining #2\nawait newKeysManager.migrateMiningKey(miningKey3).should.be.fulfilled;\nconst validatorKey2 = await newKeysManager.validatorKeys.call(miningKey3);\nvalidatorKey2.should.be.deep.equal([\n  \"0x0000000000000000000000000000000000000000\",\n  \"0x0000000000000000000000000000000000000000\",\n  true,\n  false,\n  false\n]);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey3)\n);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey3)\n);\n(await keysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);\n(await newKeysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "eca58cc6-b095-469f-8ebf-9ccc869dd071",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when trying to copy invalid mining key",
                "fullTitle": "Contract: KeysManager [all features] #migrateMiningKey throws when trying to copy invalid mining key",
                "timedOut": false,
                "duration": 236,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(masterOfCeremony)\n);\nawait newKeysManager.migrateMiningKey(masterOfCeremony).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2e6200ac-0247-41b2-8fd8-7b6dd322ed23",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eca58cc6-b095-469f-8ebf-9ccc869dd071",
              "2e6200ac-0247-41b2-8fd8-7b6dd322ed23"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1395,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "76630ffd-3ccc-4b01-9bbf-8c6bff05eaf5",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 166,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nkeysManager = await KeysManagerMock.new();\nkeysManagerOldImplementation = keysManager.address;\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nawait keysManager.setProxyStorage(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "856230cb-a856-4fe6-afa2-8be1950c9801",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nawait keysManagerEternalStorage.upgradeTo(keysManagerNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "e1d7e295-3b31-4414-9160-b29233a70acc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nlet newImplementation = keysManagerNew.address;\n(await keysManagerEternalStorage.implementation.call()).should.be.equal(keysManagerOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await keysManagerEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "2fed48a2-f944-49ed-b573-ee59f6877535",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nlet oldVersion = await keysManagerEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\n(await keysManagerEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "6346b61d-db40-4580-95a0-bd784ebc10b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\nkeysManagerNew = await KeysManagerNew.at(keysManagerEternalStorage.address);\n(await keysManagerNew.initialized.call()).should.be.equal(false);\nawait keysManagerNew.initialize();\n(await keysManagerNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "7f347a2c-c2dd-401d-91c2-3ed668ec202e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\nkeysManagerNew = await KeysManagerNew.at(keysManagerEternalStorage.address);\n(await keysManagerNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "bc2ce18f-aab1-4e5b-9720-50e88f64232b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 343,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keys = await keysManager.validatorKeys.call(accounts[2]);\nkeys.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false\n]);\nawait keysManager.setProxyStorage(proxyStorageMock.address);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;\nlet keysManagerNew = await KeysManagerNew.new();\nawait keysManager.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\nkeysManagerNew = await KeysManagerNew.at(keysManagerEternalStorage.address);\nkeys = await keysManagerNew.validatorKeys.call(accounts[2]);\nkeys.should.be.deep.equal([accounts[3], accounts[4], true, true, true]);",
                "err": {},
                "isRoot": false,
                "uuid": "d88ba65f-c9db-4217-9267-7b6e8a4b5ea3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e1d7e295-3b31-4414-9160-b29233a70acc",
              "2fed48a2-f944-49ed-b573-ee59f6877535",
              "6346b61d-db40-4580-95a0-bd784ebc10b6",
              "7f347a2c-c2dd-401d-91c2-3ed668ec202e",
              "bc2ce18f-aab1-4e5b-9720-50e88f64232b",
              "d88ba65f-c9db-4217-9267-7b6e8a4b5ea3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 906,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "00a39df7-efb2-4de2-afe6-1ca8f0641c8d",
        "title": "Contract: KeysManager upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
        "file": "/test/keys_manager_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3301,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "b127b524-3803-4ab6-8c87-2259d61c1c47",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "47ebc9c8-efdd-4264-b7a5-5ade4b39edbe",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 718,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\",\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nlet ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvalidatorMetadata = await ValidatorMetadata.new();\nlet validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvalidatorMetadata = ValidatorMetadata.at(validatorMetadataEternalStorage.address);\nlet keysManagerNew = await KeysManagerNew.new();\nawait keysManagerEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await keysManagerEternalStorage.upgradeTo(keysManagerNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait keysManagerEternalStorage.setProxyStorage(proxyStorageMock.address);\nkeysManager = await KeysManagerNew.at(keysManagerEternalStorage.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsStorage.address,\n  validatorMetadata.address,\n  accounts[0]\n);",
            "err": {},
            "isRoot": false,
            "uuid": "a1cfbe17-bff7-4982-bed7-1b7e60bab5aa",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5ab0e443-a212-4489-b9e7-a8c1b035353b",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "c93aae1d-eabb-4691-86b3-f2c3de4be2ed",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets masterOfCeremony, proxyStorage, poaConsensus",
                "fullTitle": "Contract: KeysManager upgraded [all features] #constructor sets masterOfCeremony, proxyStorage, poaConsensus",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(await keysManager.masterOfCeremony.call());\nproxyStorageMock.address.should.be.equal(await keysManager.proxyStorage.call());\npoaNetworkConsensusMock.address.should.be.equal(await keysManager.poaNetworkConsensus.call());",
                "err": {},
                "isRoot": false,
                "uuid": "0c82b5e8-b061-479a-9693-21d2b7ac241b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds masterOfCeremony to validators hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #constructor adds masterOfCeremony to validators hash",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const validator = await keysManager.validatorKeys.call(masterOfCeremony);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "ca528e03-3f16-4e2b-a9be-fda26d95a59f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called twice",
                "fullTitle": "Contract: KeysManager upgraded [all features] #constructor cannot be called twice",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.init(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "96c82032-6669-4ecb-9106-751062bdc4d5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0c82b5e8-b061-479a-9693-21d2b7ac241b",
              "ca528e03-3f16-4e2b-a9be-fda26d95a59f",
              "96c82032-6669-4ecb-9106-751062bdc4d5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 105,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a22f8bd2-c420-4bfe-8dfd-617b035bf387",
            "title": "#initiateKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called by master of ceremony",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys can only be called by master of ceremony",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b2b17f60-e684-4add-9b5c-e9707a04d1fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot allow 0x0 addresses",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys cannot allow 0x0 addresses",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys('0x0').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e59c5b24-b14b-4727-8028-e3f54b2b971f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not allow to initialize already initialized key",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "bb733b65-9b9e-4ebd-8603-eb4ad53f6a48",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key after validator created mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not allow to initialize already initialized key after validator created mining key",
                "timedOut": false,
                "duration": 158,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.createKeys(accounts[3],accounts[4],accounts[5], {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "851dafb8-f7d0-428a-bd1d-b1c7d82b2d3f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not equal to master of ceremony",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not equal to master of ceremony",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(masterOfCeremony, {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6cbbdb8c-5fa1-4ef1-a78b-7d454f22a894",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 697,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys.call();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(12);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000013', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3f7dfcc7-6424-42d4-bd58-b21f825c6777",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment initialKeyCount by 1",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should increment initialKeyCount by 1",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let initialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(0);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\ninitialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "aaf4571c-02a2-4b98-99b6-dd849a634ee1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set initialKeys hash to activated status",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should set initialKeys hash to activated status",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(0).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nconst {logs} = await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nnew web3.BigNumber(1).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nlet initialKeysCount = await keysManager.initialKeysCount.call();\n// event InitialKeyCreated(address indexed initialKey, uint256 time, uint256 initialKeysCount);\nlogs[0].event.should.equal(\"InitialKeyCreated\");\nlogs[0].args.initialKey.should.be.equal(accounts[1]);\ninitialKeysCount.should.be.bignumber.equal(logs[0].args.initialKeysCount);",
                "err": {},
                "isRoot": false,
                "uuid": "ec6ea558-2d37-4184-ae3f-0afd8250ee48",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b2b17f60-e684-4add-9b5c-e9707a04d1fa",
              "e59c5b24-b14b-4727-8028-e3f54b2b971f",
              "bb733b65-9b9e-4ebd-8603-eb4ad53f6a48",
              "851dafb8-f7d0-428a-bd1d-b1c7d82b2d3f",
              "6cbbdb8c-5fa1-4ef1-a78b-7d454f22a894",
              "3f7dfcc7-6424-42d4-bd58-b21f825c6777",
              "aaf4571c-02a2-4b98-99b6-dd849a634ee1",
              "ec6ea558-2d37-4184-ae3f-0afd8250ee48"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1288,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a9c1c60f-9577-4c19-81fc-fb4404b1cb82",
            "title": "#createKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from initialized key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should only be called from initialized key",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "31462619-8bcf-49f7-8a66-26698e5f6fee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to 0x0",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys params should not be equal to 0x0",
                "timedOut": false,
                "duration": 219,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(\n  '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  '0x0000000000000000000000000000000000000000',\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "91f723e9-3231-42e6-b51a-82253fa57391",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to each other",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys params should not be equal to each other",
                "timedOut": false,
                "duration": 140,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(masterOfCeremony, masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], masterOfCeremony, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ad56c63a-e026-4298-b70b-2e81caabec82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "any of params should not be equal to initialKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys any of params should not be equal to initialKey",
                "timedOut": false,
                "duration": 143,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[1], masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[1], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "56fe8dce-9562-447f-a686-c4399db868a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow passing the same key after it is already created",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should not allow passing the same key after it is already created",
                "timedOut": false,
                "duration": 414,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[5], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[2], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[3], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[4], accounts[7], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[6], {from: accounts[5]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "1329e9af-c0ef-4ca7-8fd6-83e4afd9d1ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign mining, voting, payout keys to relative mappings",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should assign mining, voting, payout keys to relative mappings",
                "timedOut": false,
                "duration": 188,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\ntrue.should.be.equal(\n  await keysManager.isMiningActive.call(accounts[4])\n)\ntrue.should.be.equal(\n  await keysManager.isVotingActive.call(accounts[3])\n)\ntrue.should.be.equal(\n  await keysManager.isPayoutActive.call(accounts[4])\n)\n// event ValidatorInitialized(address indexed miningKey, address indexed votingKey, address indexed payoutKey);\nlogs[0].event.should.be.equal('ValidatorInitialized');\nlogs[0].args.miningKey.should.be.equal(accounts[4]);\nlogs[0].args.votingKey.should.be.equal(accounts[3]);\nlogs[0].args.payoutKey.should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "5561ce93-8080-46dc-9e34-6006991d6221",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign voting <-> mining key and payout <-> mining key relationships",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should assign voting <-> mining key and payout <-> mining key relationships",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]});\naccounts[4].should.be.equal(\n  await keysManager.getMiningKeyByVoting.call(accounts[3])\n);\naccounts[4].should.be.equal(\n  await keysManager.miningKeyByPayout.call(accounts[2])\n);",
                "err": {},
                "isRoot": false,
                "uuid": "fe58936a-9333-4b82-afd5-41c53d86c5c8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds validator to poaConsensus contract",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys adds validator to poaConsensus contract",
                "timedOut": false,
                "duration": 159,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst index = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\n(await poaNetworkConsensusMock.pendingList.call(index)).should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "1b7b0701-688c-4fde-b40b-d35f557e7789",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 162,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst validatorKey = await keysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  accounts[3],\n  accounts[2],\n  true,\n  true,\n  true\n])",
                "err": {},
                "isRoot": false,
                "uuid": "89bb0b96-001a-4587-ae0f-b7d22ab9b851",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 199,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nnew web3.BigNumber(2).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));",
                "err": {},
                "isRoot": false,
                "uuid": "67225409-8a0c-49f8-be2b-386b867bffd8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "31462619-8bcf-49f7-8a66-26698e5f6fee",
              "91f723e9-3231-42e6-b51a-82253fa57391",
              "ad56c63a-e026-4298-b70b-2e81caabec82",
              "56fe8dce-9562-447f-a686-c4399db868a3",
              "1329e9af-c0ef-4ca7-8fd6-83e4afd9d1ed",
              "5561ce93-8080-46dc-9e34-6006991d6221",
              "fe58936a-9333-4b82-afd5-41c53d86c5c8",
              "1b7b0701-688c-4fde-b40b-d35f557e7789",
              "89bb0b96-001a-4587-ae0f-b7d22ab9b851",
              "67225409-8a0c-49f8-be2b-386b867bffd8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1957,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a4c32a43-1b68-4501-9f29-694fcff4dd40",
            "title": "#addMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.setInitEnabled().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], false, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "494e043d-d525-4725-b3bd-f9a51c0d818e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called from votingToChangeKeys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey should only be called from votingToChangeKeys",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1],{from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], true, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "377d120b-f8bc-488d-a41e-a45ead53b381",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add more than maxLimit",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey should not let add more than maxLimit",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensusMock.setCurrentValidatorsLength(2001);\nawait addMiningKey(accounts[2], false);",
                "err": {},
                "isRoot": false,
                "uuid": "82310304-2df8-4139-800c-2e4b58bf9717",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey should set validatorKeys hash",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[2]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "1f206996-0c39-4dea-955f-d7198ac1a60c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "494e043d-d525-4725-b3bd-f9a51c0d818e",
              "377d120b-f8bc-488d-a41e-a45ead53b381",
              "82310304-2df8-4139-800c-2e4b58bf9717",
              "1f206996-0c39-4dea-955f-d7198ac1a60c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 362,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5d342faa-67d2-47eb-ba33-f79826e05ecf",
            "title": "#addVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 135,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "e9c0e2d6-b26e-4f5d-9c8c-c1a7c3b96cc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[1], accounts[1], false);\nawait addVotingKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "bc68179a-9b7f-45f7-9d65-4221c5488680",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add VotingKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey should add VotingKey",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addVotingKey(accounts[2], accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(accounts[2]);\nminingKey.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "60d5e1ef-b209-4cf4-a458-0ea84f1e76f9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey should only be called if mining is active",
                "timedOut": false,
                "duration": 251,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "9e6d4f66-18d6-4fe2-8ed4-1df55ae9c509",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 335,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nfalse.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[3]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "13bec0a3-db7b-4e69-a174-53ec09ac48fa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e9c0e2d6-b26e-4f5d-9c8c-c1a7c3b96cc5",
              "bc68179a-9b7f-45f7-9d65-4221c5488680",
              "60d5e1ef-b209-4cf4-a458-0ea84f1e76f9",
              "9e6d4f66-18d6-4fe2-8ed4-1df55ae9c509",
              "13bec0a3-db7b-4e69-a174-53ec09ac48fa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1174,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a1671582-7ab3-41b1-9e07-29a77c7cdcf3",
            "title": "#addPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 133,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "c6e0202e-cd0d-4526-809e-df758b1558db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[1], accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "3fb630b2-ec86-4f53-a0eb-c82eb251c42d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add PayoutKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey should add PayoutKey",
                "timedOut": false,
                "duration": 249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addPayoutKey(accounts[2], accounts[1], false);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "17983b15-4d44-47c1-8403-c7c6a3b20e1a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey should only be called if mining is active",
                "timedOut": false,
                "duration": 243,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "32b611ce-c025-4a5a-a071-d82dd1cc8e67",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 256,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addPayoutKey(accounts[3], accounts[1], true);\ntrue.should.be.equal(await keysManager.isPayoutActive.call(accounts[1]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "2231177b-c5b8-49af-8d64-f8b3da443e82",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c6e0202e-cd0d-4526-809e-df758b1558db",
              "3fb630b2-ec86-4f53-a0eb-c82eb251c42d",
              "17983b15-4d44-47c1-8403-c7c6a3b20e1a",
              "32b611ce-c025-4a5a-a071-d82dd1cc8e67",
              "2231177b-c5b8-49af-8d64-f8b3da443e82"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1034,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "19d284e1-c12e-4f48-b19d-73b04fc85ce7",
            "title": "#removeMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 296,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nlet result = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "4a13bd82-38c5-43cf-8a84-392dd2d0555a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove miningKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey should remove miningKey",
                "timedOut": false,
                "duration": 681,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423, \"\", false\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[3]}).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n);\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');\nlogs[1].event.should.be.equal('VotingKeyChanged');\nlogs[1].args.key.should.be.equal(accounts[3]);\nlogs[1].args.miningKey.should.be.equal(accounts[1]);\nlogs[1].args.action.should.be.equal('removed');\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\nlet result = await keysManager.removeVotingKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nresult = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "664dc499-0e69-45db-abd6-9c759d8644f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes validator from poaConsensus",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey removes validator from poaConsensus",
                "timedOut": false,
                "duration": 356,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nlet currentValidatorsLength = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength.sub(1).toNumber(); i++){\n    let pending = await poaNetworkConsensusMock.pendingList.call(i);\n    pendingList.push(pending);\n}\npendingList.should.not.contain(accounts[1]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(accounts[1]);\nconst expected = currentValidatorsLength.sub(1);\nconst actual = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nexpected.should.be.bignumber.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "8ebab622-ea58-43f4-bcb2-2027ab18c1c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes MoC from poaConsensus",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey removes MoC from poaConsensus",
                "timedOut": false,
                "duration": 986,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\n\nlet result = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs.length.should.be.equal(0);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\n\nresult = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "55a1ecd1-801a-4221-993b-276a95460302",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "timedOut": false,
                "duration": 322,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1], true);\nresult = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('MiningKeyChanged');\nresult.logs[0].args.key.should.be.equal(accounts[1]);\nresult.logs[0].args.action.should.be.equal('removed');\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "25e1b496-9e22-4c16-9024-3bbfe050af92",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4a13bd82-38c5-43cf-8a84-392dd2d0555a",
              "664dc499-0e69-45db-abd6-9c759d8644f4",
              "8ebab622-ea58-43f4-bcb2-2027ab18c1c9",
              "55a1ecd1-801a-4221-993b-276a95460302",
              "25e1b496-9e22-4c16-9024-3bbfe050af92"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2641,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "67bf3209-ad24-4998-9151-a4159d60e264",
            "title": "#removeVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 222,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removeVotingKey(mining, false);",
                "err": {},
                "isRoot": false,
                "uuid": "51220e8c-7dc0-499f-91ae-e435675cc517",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active voting key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeVotingKey should be successful only for active voting key",
                "timedOut": false,
                "duration": 229,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addPayoutKey(payout, mining, true);\nconst result = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait addVotingKey(voting, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.miningKey.should.be.equal(mining);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "fcd4fd5c-2b27-4c10-8cba-35358047a76b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove votingKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeVotingKey should remove votingKey",
                "timedOut": false,
                "duration": 366,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait keysManager.removeVotingKey(mining, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(mining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  payout,\n  true,\n  false,\n  true]\n)\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(voting);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "f9f54590-c7a1-4e8d-bcd4-461efdeb7196",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "51220e8c-7dc0-499f-91ae-e435675cc517",
              "fcd4fd5c-2b27-4c10-8cba-35358047a76b",
              "f9f54590-c7a1-4e8d-bcd4-461efdeb7196"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 817,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "78803e2f-e647-4b50-8ad5-72ccb6a33be8",
            "title": "#removePayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removePayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 205,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removePayoutKey(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "a16e0771-2aa6-4b40-a840-3f7f98684f40",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active payout key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removePayoutKey should be successful only for active payout key",
                "timedOut": false,
                "duration": 239,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait removePayoutKey(accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "3b9cd5f0-fb9e-41c5-961d-035135aa02ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove payoutKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removePayoutKey should remove payoutKey",
                "timedOut": false,
                "duration": 288,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removePayoutKey(accounts[1], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.miningKeyByPayout.call(accounts[2]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "cdc48c1b-d72b-486c-9c08-c0f4178b6f63",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a16e0771-2aa6-4b40-a840-3f7f98684f40",
              "3b9cd5f0-fb9e-41c5-961d-035135aa02ed",
              "cdc48c1b-d72b-486c-9c08-c0f4178b6f63"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 732,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5e1d06e3-c529-4166-b196-b7046f55ffc8",
            "title": "#swapMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapMiningKey should swap mining key",
                "timedOut": false,
                "duration": 767,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapMiningKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[5], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423, \"\", false\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[5]}).should.be.fulfilled;\nawait swapMiningKey(accounts[2], accounts[1], true);\nawait swapMiningKey(accounts[4], accounts[3], false);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false\n]);\nconst validatorNew = await keysManager.validatorKeys.call(accounts[2]);\nvalidatorNew.should.be.deep.equal([\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false\n]);\n(await validatorMetadata.validators.call(accounts[2])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "d07233aa-e44f-4adc-b0d6-1b5375e08e4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should swap MoC",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapMiningKey should swap MoC",
                "timedOut": false,
                "duration": 378,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait swapMiningKey(accounts[1], masterOfCeremony, true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await keysManager.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.isValidator.call(accounts[1])).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "01248ffb-1579-4e48-8d1b-9d5e6b6bb645",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should keep voting and payout keys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapMiningKey should keep voting and payout keys",
                "timedOut": false,
                "duration": 588,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldMining = accounts[1];\nconst voting = accounts[2];\nconst payout = accounts[3];\nconst newMining = accounts[4];\nawait addMiningKey(oldMining, true);\nawait addVotingKey(voting, oldMining, true);\nawait addPayoutKey(payout, oldMining, true);\nconst {logs} = await keysManager.swapMiningKey(newMining, oldMining).should.be.fulfilled;\n//const mining = await keysManager.getMiningKeyByVoting.call(voting);\nconst validator = await keysManager.validatorKeys.call(oldMining);\nnewMining.should.be.equal(await keysManager.getMiningKeyByVoting.call(voting));\nnewMining.should.be.equal(await keysManager.miningKeyByPayout.call(payout));\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys.call(newMining);\nvalidatorNew.should.be.deep.equal(\n  [ voting,\n  payout,\n  true,\n  true,\n  true]\n)\noldMining.should.be.equal(await keysManager.getMiningKeyHistory.call(newMining));\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(oldMining);\nvalidators.should.contain(newMining);",
                "err": {},
                "isRoot": false,
                "uuid": "5866977a-7926-41dc-beb0-85de2602c995",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d07233aa-e44f-4adc-b0d6-1b5375e08e4a",
              "01248ffb-1579-4e48-8d1b-9d5e6b6bb645",
              "5866977a-7926-41dc-beb0-85de2602c995"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1733,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "afcd6acd-8b67-4735-abe1-d8fd3fbb0201",
            "title": "#swapVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap voting key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapVotingKey should swap voting key",
                "timedOut": false,
                "duration": 230,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapVotingKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait swapVotingKey(accounts[3], accounts[1], true);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "0a1b2618-80f0-4741-bd21-e56d4fa6bc17",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0a1b2618-80f0-4741-bd21-e56d4fa6bc17"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 230,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ce125247-85d5-41cb-b076-bb121bbc19b2",
            "title": "#swapPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap payout key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapPayoutKey should swap payout key",
                "timedOut": false,
                "duration": 592,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapPayoutKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.swapPayoutKey(accounts[3], accounts[1]);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "fa2a7cad-1eba-4ac1-b572-7f019ebb458c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fa2a7cad-1eba-4ac1-b572-7f019ebb458c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 592,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0edd05a5-68a9-4cc3-927c-ddafcd0ed84e",
            "title": "#migrateInitialKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can copy initial keys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #migrateInitialKey can copy initial keys",
                "timedOut": false,
                "duration": 399,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\nkeysManager.address.should.be.equal(\n  await newKeysManager.previousKeysManager.call()\n);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\n\nawait newKeysManager.migrateInitialKey(\n  accounts[1],\n  {from: accounts[9]}\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateInitialKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateInitialKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.name.should.be.equal(\"initialKey\");\nawait newKeysManager.migrateInitialKey(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(1).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[1])\n)\nawait newKeysManager.migrateInitialKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(0).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[2])\n)",
                "err": {},
                "isRoot": false,
                "uuid": "8fe9e9ba-a112-4cb7-9ac4-2aab25043056",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8fe9e9ba-a112-4cb7-9ac4-2aab25043056"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 399,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d238d508-f728-4c00-97c3-8e51a6f6325a",
            "title": "#migrateMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "copies validator keys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #migrateMiningKey copies validator keys",
                "timedOut": false,
                "duration": 1353,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[2];\nconst votingKey = accounts[3];\nconst payoutKey = accounts[4];\nconst miningKey2 = accounts[5];\nconst miningKey3 = accounts[6];\n\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey2, true);\nawait swapMiningKey(miningKey3, miningKey2, true);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, votingKey, payoutKey, {from: accounts[1]}).should.be.fulfilled;\n\nconst validatorKeyFromOld = await keysManager.validatorKeys.call(miningKey);\nvalidatorKeyFromOld.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\n// mining #1\nawait newKeysManager.migrateMiningKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateMiningKey(accounts[9]).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateMiningKey(miningKey).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(miningKey);\nlogs[0].args.name.should.be.equal(\"miningKey\");\nawait newKeysManager.migrateMiningKey(miningKey).should.be.rejectedWith(ERROR_MSG);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\nconst validatorKey = await newKeysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.getMiningKeyByVoting.call(votingKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.miningKeyByPayout.call(payoutKey)\n);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isVotingActive.call(votingKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isPayoutActive.call(miningKey)\n)\n// mining #2\nawait newKeysManager.migrateMiningKey(miningKey3).should.be.fulfilled;\nconst validatorKey2 = await newKeysManager.validatorKeys.call(miningKey3);\nvalidatorKey2.should.be.deep.equal([\n  \"0x0000000000000000000000000000000000000000\",\n  \"0x0000000000000000000000000000000000000000\",\n  true,\n  false,\n  false\n]);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey3)\n);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey3)\n);\n(await keysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);\n(await newKeysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "e024b7dd-0448-43d6-9ef2-af482b512c32",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when trying to copy invalid mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #migrateMiningKey throws when trying to copy invalid mining key",
                "timedOut": false,
                "duration": 209,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(masterOfCeremony)\n);\nawait newKeysManager.migrateMiningKey(masterOfCeremony).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7e55226c-3106-498a-a530-d1dcc6fdc577",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e024b7dd-0448-43d6-9ef2-af482b512c32",
              "7e55226c-3106-498a-a530-d1dcc6fdc577"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1562,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "cd57c4d5-8e0b-4b7e-8298-52d1769007a0",
        "title": "Contract: ValidatorMetadata [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
        "file": "/test/metadata_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3406,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "75d691a7-2644-4d07-ab60-d8081d98fa61",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2bb7ec0e-d3c6-42b7-9b81-b2856d2e2168",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 954,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (typeof masterOfCeremony === 'undefined') {\n  masterOfCeremony = accounts[0];\n}\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nminingKey = accounts[1];\nminingKey2 = accounts[4];\nminingKey3 = accounts[5];\nvotingKey3 = accounts[7];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nmetadata = await ValidatorMetadata.new();\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  metadataEternalStorage.address,\n  accounts[0]\n);\n\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKey, miningKey);\nawait addMiningKey(miningKey2);\nawait addVotingKey(votingKey2, miningKey2);\nawait addMiningKey(miningKey3);\nawait addVotingKey(votingKey3, miningKey3);\nawait metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "393bcbc9-f011-4058-98d3-7778e53b0640",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "af581243-781e-4e57-9bad-568613843cd9",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "576a7ff5-d96d-437b-add5-fb909a98b002",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getTime.call()).should.be.bignumber.equal(55555);\nconst {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "db1459a1-05d6-4bdd-8775-5316c0c7ad7a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if fullAddress is too long",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if fullAddress is too long",
                "timedOut": false,
                "duration": 227,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let localFakeData = fakeData.slice();\nlocalFakeData[3] = 'a'.repeat(201);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nlocalFakeData[3] = 'a'.repeat(200);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "a40b1afb-d4d3-4e10-9b67-f2c5dd8eec84",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "4a2c1401-5796-41b4-b8ac-1b57830c50cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "736d4f7f-0d76-4350-aa55-839162e4fcc8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "db1459a1-05d6-4bdd-8775-5316c0c7ad7a",
              "a40b1afb-d4d3-4e10-9b67-f2c5dd8eec84",
              "4a2c1401-5796-41b4-b8ac-1b57830c50cb",
              "736d4f7f-0d76-4350-aa55-839162e4fcc8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 698,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c5eb4be4-572e-47fa-8a97-4e21e42d3951",
            "title": "#clearMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #clearMetadata happy path",
                "timedOut": false,
                "duration": 909,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey2); // voters array\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.clearMetadata(miningKey);\nresult.logs[0].event.should.be.equal('MetadataCleared');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "352c0cb5-dea5-4093-9fe1-d880ad0fd58d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "352c0cb5-dea5-4093-9fe1-d880ad0fd58d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 909,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f398ca33-e881-4235-9c32-b5bbf44196b7",
            "title": "#moveMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #moveMetadata happy path",
                "timedOut": false,
                "duration": 1155,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.moveMetadata(miningKey, miningKey2);\nresult.logs[0].event.should.be.equal('MetadataMoved');\nresult.logs[0].args.oldMiningKey.should.be.equal(miningKey);\nresult.logs[0].args.newMiningKey.should.be.equal(miningKey2);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nconfirmations = await metadata.confirmations.call(miningKey2);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "dbe230f5-35b2-4869-9605-858f95204429",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dbe230f5-35b2-4869-9605-858f95204429"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1155,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c1c79052-ae09-45df-b185-fc39efe93621",
            "title": "#initMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #initMetadata happy path",
                "timedOut": false,
                "duration": 446,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorData = [\n  \"Djamshut\", // bytes32 _firstName\n  \"Roosvelt\", // bytes32 _lastName\n  \"123asd\",   // bytes32 _licenseId\n  \"Moskva\",   // string _fullAddress\n  \"ZZ\",       // bytes32 _state\n  \"234\",      // bytes32 _zipcode\n  23423,      // uint256 _expirationDate\n  123,        // uint256 _createdDate\n  0,          // uint256 _updatedDate\n  3,          // uint256 _minThreshold\n  accounts[8] // address _miningKey\n];\nawait metadata.initMetadata(...validatorData, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[10] = miningKey;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  toHex(\"\"),\n  false\n]);\nvalidatorData[7] = 0;\nvalidatorData[10] = miningKey2;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[7] = 123;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  toHex(\"\"),\n  false\n]);\nvalidatorData[10] = miningKey3;\nawait metadata.initMetadataDisable({from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadataDisable().should.be.fulfilled;\n(await metadata.initMetadataDisabled.call()).should.be.equal(true);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0545ebd4-1fbf-4c51-b771-43133bd72f7c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0545ebd4-1fbf-4c51-b771-43133bd72f7c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 446,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7bdd8046-994f-479f-8d62-986c5a29448b",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 120,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "eb08b05b-5eda-4454-be99-b2ea32d723fe",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "bae3c459-10cf-4fad-9601-5b34dd45bf22",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2d8e234b-67cf-49c1-a982-47cd580d9b6b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "resets confirmations when changeRequest recreated",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest resets confirmations when changeRequest recreated",
                "timedOut": false,
                "duration": 544,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count\nconst {logs} = await metadata.changeRequest(...anotherData, {from: votingKey}).should.be.fulfilled;\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "65f241c2-0fa6-4b50-9357-3c6f7202ba47",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bae3c459-10cf-4fad-9601-5b34dd45bf22",
              "2d8e234b-67cf-49c1-a982-47cd580d9b6b",
              "65f241c2-0fa6-4b50-9357-3c6f7202ba47"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 841,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "58678bb7-65a0-431b-8944-79179e8e6f7e",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 522,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  false\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "b7890890-24cd-4d87-b3de-21574862a205",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 614,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "571af97c-8628-49d3-bcd1-6c2b2d170b72",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b7890890-24cd-4d87-b3de-21574862a205",
              "571af97c-8628-49d3-bcd1-6c2b2d170b72"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1136,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d5d84b40-031f-489c-8d31-146faae510f4",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 259,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c8e0a4c1-19b7-4e29-9e57-03ccabed4639",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 335,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "2d0022a7-b04b-4c19-837f-51e1ee2330d8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent from double voting",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange prevent from double voting",
                "timedOut": false,
                "duration": 355,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "84a6fdb7-cf93-46f7-bc01-501021ce2bfd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not exceed confirmations limit",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should not exceed confirmations limit",
                "timedOut": false,
                "duration": 675,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey4 = accounts[8];\nconst votingKey4 = accounts[9];\nawait addMiningKey(miningKey4);\nawait addVotingKey(votingKey4, miningKey4);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey4}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "fa7f9b2c-e5e1-414b-94af-6985cf824216",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c8e0a4c1-19b7-4e29-9e57-03ccabed4639",
              "2d0022a7-b04b-4c19-837f-51e1ee2330d8",
              "84a6fdb7-cf93-46f7-bc01-501021ce2bfd",
              "fa7f9b2c-e5e1-414b-94af-6985cf824216"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1624,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "86ee122b-6f52-46bd-8c43-f39d909c5eda",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #finalize happy path",
                "timedOut": false,
                "duration": 876,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.finalize(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey}).should.be.fulfilled;\nawait metadata.finalize(miningKey2, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "85437e3a-28c2-4c3e-b6c2-007e826bd353",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "85437e3a-28c2-4c3e-b6c2-007e826bd353"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 876,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0a6b3d1b-f57a-4287-8627-0067c36c4bd2",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold.call()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "8be99880-e5c4-498e-8b72-c87ac9e940dd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8be99880-e5c4-498e-8b72-c87ac9e940dd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "98d8262a-3edd-4a8d-a66a-fe8f6840ef61",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 90,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nmetadata = await ValidatorMetadata.new();\nmetadataOldImplementation = metadata.address;\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "09db2582-6139-4780-8fcd-0c1f823be9f4",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "37ccaea9-0791-474d-8b3a-5aeaae0932a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nlet newImplementation = metadataNew.address;\n(await metadataEternalStorage.implementation.call()).should.be.equal(metadataOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await metadataEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "46c5b427-fd5a-4bfd-a67d-2f0ee5847c14",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nlet oldVersion = await metadataEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\n(await metadataEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "738ee385-b030-432f-a03b-7e7b0a5142fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 131,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.initialized.call()).should.be.equal(false);\nawait metadataNew.initialize();\n(await metadataNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "3a4ccfa4-a73c-48f5-bac1-46a6bad5ca66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "e998aba6-cc51-4120-9136-6c4d5d211eee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 324,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(55555);\nawait metadataEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadataEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet metadataNew = await ValidatorMetadataNew.new();\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\nconst validators = await metadataNew.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "1134c1e7-a507-41ba-8aa4-b647af940d3b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "37ccaea9-0791-474d-8b3a-5aeaae0932a5",
              "46c5b427-fd5a-4bfd-a67d-2f0ee5847c14",
              "738ee385-b030-432f-a03b-7e7b0a5142fe",
              "3a4ccfa4-a73c-48f5-bac1-46a6bad5ca66",
              "e998aba6-cc51-4120-9136-6c4d5d211eee",
              "1134c1e7-a507-41ba-8aa4-b647af940d3b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 821,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f234893b-6344-4039-86c1-0c554df25910",
        "title": "Contract: ValidatorMetadata upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
        "file": "/test/metadata_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1974,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "4fd04dcf-9ecc-4665-acdc-ad0aae26b4d2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a3fd768e-26eb-459f-b73e-83d0d754a6ae",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1205,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (typeof masterOfCeremony === 'undefined') {\n  masterOfCeremony = accounts[0];\n}\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nminingKey = accounts[1];\nminingKey2 = accounts[4];\nminingKey3 = accounts[5];\nvotingKey3 = accounts[7];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nmetadata = await ValidatorMetadata.new();\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  metadataEternalStorage.address,\n  accounts[0]\n);\nlet metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await metadataEternalStorage.upgradeTo(metadataNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait metadataEternalStorage.setProxyStorage(proxyStorageMock.address);\nmetadata = await ValidatorMetadataNew.at(metadataEternalStorage.address);\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKey, miningKey);\nawait addMiningKey(miningKey2);\nawait addVotingKey(votingKey2, miningKey2);\nawait addMiningKey(miningKey3);\nawait addVotingKey(votingKey3, miningKey3);\nawait metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "df49db79-7f92-4cce-a32c-4813a50f1884",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1a634a0c-6c05-4c23-87df-dd9012b925f0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "a4d9b31c-a4ec-41f4-a424-4095e6829eb0",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 198,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getTime.call()).should.be.bignumber.equal(55555);\nconst {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "ac894fae-f866-49e5-8dd5-1d3b9908d748",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if fullAddress is too long",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if fullAddress is too long",
                "timedOut": false,
                "duration": 196,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let localFakeData = fakeData.slice();\nlocalFakeData[3] = 'a'.repeat(201);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nlocalFakeData[3] = 'a'.repeat(200);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c70062d8-d4f9-42ba-ab20-ae6114743af7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "da74260e-b54b-4f7c-b4a7-d190202a25c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c6dab0d0-6379-4d3a-9a4d-4b1fcedc61e2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ac894fae-f866-49e5-8dd5-1d3b9908d748",
              "c70062d8-d4f9-42ba-ab20-ae6114743af7",
              "da74260e-b54b-4f7c-b4a7-d190202a25c7",
              "c6dab0d0-6379-4d3a-9a4d-4b1fcedc61e2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 649,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d7788e12-2b39-49eb-9cfd-e011f14fe7a0",
            "title": "#clearMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #clearMetadata happy path",
                "timedOut": false,
                "duration": 839,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey2); // voters array\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.clearMetadata(miningKey);\nresult.logs[0].event.should.be.equal('MetadataCleared');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "6d802d89-074e-4cdd-9fcb-e63464b53a3c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6d802d89-074e-4cdd-9fcb-e63464b53a3c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 839,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f8379247-cc7a-445e-9080-81fe62bd41fa",
            "title": "#moveMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #moveMetadata happy path",
                "timedOut": false,
                "duration": 1223,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.moveMetadata(miningKey, miningKey2);\nresult.logs[0].event.should.be.equal('MetadataMoved');\nresult.logs[0].args.oldMiningKey.should.be.equal(miningKey);\nresult.logs[0].args.newMiningKey.should.be.equal(miningKey2);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nconfirmations = await metadata.confirmations.call(miningKey2);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "516e6584-9a13-4d9c-89fd-b003e6f76352",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "516e6584-9a13-4d9c-89fd-b003e6f76352"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1223,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "02caf77f-9c37-4617-afa6-0cb3f47b3ee0",
            "title": "#initMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #initMetadata happy path",
                "timedOut": false,
                "duration": 454,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorData = [\n  \"Djamshut\", // bytes32 _firstName\n  \"Roosvelt\", // bytes32 _lastName\n  \"123asd\",   // bytes32 _licenseId\n  \"Moskva\",   // string _fullAddress\n  \"ZZ\",       // bytes32 _state\n  \"234\",      // bytes32 _zipcode\n  23423,      // uint256 _expirationDate\n  123,        // uint256 _createdDate\n  0,          // uint256 _updatedDate\n  3,          // uint256 _minThreshold\n  accounts[8] // address _miningKey\n];\nawait metadata.initMetadata(...validatorData, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[10] = miningKey;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  toHex(\"\"),\n  false\n]);\nvalidatorData[7] = 0;\nvalidatorData[10] = miningKey2;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[7] = 123;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  toHex(\"\"),\n  false\n]);\nvalidatorData[10] = miningKey3;\nawait metadata.initMetadataDisable({from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadataDisable().should.be.fulfilled;\n(await metadata.initMetadataDisabled.call()).should.be.equal(true);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "83282f54-0501-42f7-91fa-30e1cd047a53",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "83282f54-0501-42f7-91fa-30e1cd047a53"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 454,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "22207317-1b25-48a7-b39f-30cfad5a32e6",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 112,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "805f2f3e-cfa1-4dc1-a230-14d08eed6798",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "a32f29d8-46b8-4f07-a9c6-928127fd5e8c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "231e4593-fa25-41ea-941c-6dabe2d02f5a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "resets confirmations when changeRequest recreated",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest resets confirmations when changeRequest recreated",
                "timedOut": false,
                "duration": 520,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count\nconst {logs} = await metadata.changeRequest(...anotherData, {from: votingKey}).should.be.fulfilled;\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "4ebd496a-d60d-48a8-8f7f-20740ac07f9a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a32f29d8-46b8-4f07-a9c6-928127fd5e8c",
              "231e4593-fa25-41ea-941c-6dabe2d02f5a",
              "4ebd496a-d60d-48a8-8f7f-20740ac07f9a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 725,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "cd82823e-8584-46eb-9eb5-0cca1ec388f9",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 610,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  false\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "6015432f-0da8-4b6f-bb48-18a9f9cc4179",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 630,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "2f830a8c-fc27-4628-9cd0-d30fc715a07d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6015432f-0da8-4b6f-bb48-18a9f9cc4179",
              "2f830a8c-fc27-4628-9cd0-d30fc715a07d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1240,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c737af37-dcd3-4809-b63d-00be74ae45ba",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 283,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "22492578-d524-42d6-9d6a-2dec96175593",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 313,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "4988feb7-5383-4acc-9f76-84971af1855c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent from double voting",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange prevent from double voting",
                "timedOut": false,
                "duration": 454,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "cd382985-7fa5-4f1b-ab73-6108939fe297",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not exceed confirmations limit",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should not exceed confirmations limit",
                "timedOut": false,
                "duration": 681,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey4 = accounts[8];\nconst votingKey4 = accounts[9];\nawait addMiningKey(miningKey4);\nawait addVotingKey(votingKey4, miningKey4);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey4}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "cb6fb1a7-e9f9-45e9-a12a-66bd08a68c83",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "22492578-d524-42d6-9d6a-2dec96175593",
              "4988feb7-5383-4acc-9f76-84971af1855c",
              "cd382985-7fa5-4f1b-ab73-6108939fe297",
              "cb6fb1a7-e9f9-45e9-a12a-66bd08a68c83"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1731,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7c5fb3ad-761c-4e1e-bc75-81727c27b5c0",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #finalize happy path",
                "timedOut": false,
                "duration": 875,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.finalize(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey}).should.be.fulfilled;\nawait metadata.finalize(miningKey2, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "70048f35-d7db-43b8-b461-f5b978165c06",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "70048f35-d7db-43b8-b461-f5b978165c06"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 875,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "323371bd-3b61-4e65-80cd-971b81d67f09",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold.call()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "0776f3c2-a742-40fb-b871-f570166fd4e5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0776f3c2-a742-40fb-b871-f570166fd4e5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 34,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1e453410-c8df-4416-87a0-fd106463f5ef",
        "title": "Contract: PoaNetworkConsensus [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
        "file": "/test/poa_network_consensus_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1847,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "97e84ad0-3f6a-4552-937a-ef7b834ac47b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "18d2b648-1aa5-435d-b6a5-31574b55dd8f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 254,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[9];\nawait PoaNetworkConsensus.new('0x0000000000000000000000000000000000000000', []).should.be.rejectedWith(ERROR_MSG);\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []).should.be.fulfilled;;\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensus.address).should.be.fulfilled;\n\nawait poaNetworkConsensus.setProxyStorage(proxyStorageMock.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorageMock.address).should.be.rejectedWith(ERROR_MSG);\n\nawait proxyStorageMock.initializeAddresses(\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0]\n);",
            "err": {},
            "isRoot": false,
            "uuid": "15c295d8-729d-40a4-a41b-13b2f0a301b4",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "aa5def59-0a28-4c3f-a6ca-592606bb1be4",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "afa1d076-dc5e-4646-ac92-42baeadbef21",
            "title": "default values",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "finalized should be false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values finalized should be false",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validators = await poaNetworkConsensus.getValidators.call();\nlet finalized = await poaNetworkConsensus.finalized.call();\nvalidators.should.be.deep.equal([\n  masterOfCeremony\n]);\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "85dcb159-35bf-4bbb-9319-33af2e05dfb8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "checks systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values checks systemAddress",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let systemAddress = await poaNetworkConsensus.systemAddress.call();\nsystemAddress.should.be.equal('0xfffffffffffffffffffffffffffffffffffffffe');",
                "err": {},
                "isRoot": false,
                "uuid": "93953f48-cf1a-4194-a509-f46864fdf085",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allows you to set current list of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values allows you to set current list of validators",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorsList = [accounts[2], accounts[3], accounts[4]];\nlet poa = await PoaNetworkConsensus.new(masterOfCeremony, validatorsList).should.be.fulfilled;\nlet validators = await poa.getValidators.call();\nvalidators.should.be.deep.equal([\n  masterOfCeremony,\n  ...validatorsList\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "0328440e-3f8a-46ce-a0a6-f1daf5da00ca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "validators in the list must differ",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values validators in the list must differ",
                "timedOut": false,
                "duration": 129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await PoaNetworkConsensus.new(\n  masterOfCeremony,\n  [masterOfCeremony, accounts[3], accounts[4]]\n).should.be.rejectedWith(ERROR_MSG);\nawait PoaNetworkConsensus.new(\n  masterOfCeremony,\n  [accounts[2], accounts[2], accounts[4]]\n).should.be.rejectedWith(ERROR_MSG);\nawait PoaNetworkConsensus.new(\n  masterOfCeremony,\n  [accounts[2], accounts[3], accounts[3]]\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "16463306-48ca-4c13-844c-f60c3914d362",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "85dcb159-35bf-4bbb-9319-33af2e05dfb8",
              "93953f48-cf1a-4194-a509-f46864fdf085",
              "0328440e-3f8a-46ce-a0a6-f1daf5da00ca",
              "16463306-48ca-4c13-844c-f60c3914d362"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 276,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d2aab928-c23d-4544-82d4-ee0e451da7c9",
            "title": "#finalizeChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called by systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should only be called by systemAddress",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a0da697e-d6f3-4490-8e77-0565bde3e1e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to true",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set finalized to true",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let finalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.false;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nfinalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "ab04fbcc-03e8-43a2-b1a4-d4e0a6bf5fe7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set currentValidators to pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set currentValidators to pendingList",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setSystemAddress(accounts[0]);\nconst { logs } = await poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nlogs[0].event.should.be.equal('ChangeFinalized');\nlogs[0].args.newSet.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "ca9e6f9f-9b02-42d7-88d2-5f9c8461c90d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "set currentValidators to pendingList after addValidator call",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange set currentValidators to pendingList after addValidator call",
                "timedOut": false,
                "duration": 342,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait addValidator(accounts[1], true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nawait addValidator(accounts[2], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\ncurrentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call()\nconst expected = [masterOfCeremony, accounts[1], accounts[2]];\ncurrentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\ncurrentValidators = [];\npendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\nexpected.should.be.deep.equal(pendingList);\nexpected.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "59f40fac-64e7-4786-8188-3e72ff1818a3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a0da697e-d6f3-4490-8e77-0565bde3e1e6",
              "ab04fbcc-03e8-43a2-b1a4-d4e0a6bf5fe7",
              "ca9e6f9f-9b02-42d7-88d2-5f9c8461c90d",
              "59f40fac-64e7-4786-8188-3e72ff1818a3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 597,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "1097a4bc-4ff1-4a2a-b01d-052fa7f8f4a6",
            "title": "#addValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should only be called from keys manager",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[2]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setKeysManagerMock(accounts[5]);\nawait addValidator(accounts[1], true, {from: accounts[5]});",
                "err": {},
                "isRoot": false,
                "uuid": "f6e709ca-26ab-4897-975b-84e341ad9a4c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to add already existing validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow to add already existing validator",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait addValidator(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "ffc58c7a-283e-4b6a-b73c-ad2fac69b226",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow 0x0 addresses",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow 0x0 addresses",
                "timedOut": false,
                "duration": 72,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator('0x0', false);\nawait addValidator('0x0000000000000000000000000000000000000000', false);",
                "err": {},
                "isRoot": false,
                "uuid": "0bc2e704-a5d3-4c2f-abac-eb35f2340bb4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorsState for new validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set validatorsState for new validator",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nlet state = await poaNetworkConsensus.validatorsState.call(accounts[1]);\nlet pendingList = await poaNetworkConsensus.getPendingList.call();\nstate[0].should.be.true;\nstate[2].should.be.bignumber.equal(pendingList.length - 1)",
                "err": {},
                "isRoot": false,
                "uuid": "bbff1b81-9fe8-4e52-a2d0-5772c4b7c734",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set finalized to false",
                "timedOut": false,
                "duration": 68,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nlet finalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "aa5c41bb-12ab-4060-b80a-0dda1863f721",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should emit InitiateChange with blockhash and pendingList as params",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should emit InitiateChange with blockhash and pendingList as params",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nconst {logs} = await poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet currentValidators = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n}\ncurrentValidators.push(accounts[1]);\nlogs[0].args['newSet'].should.deep.equal(currentValidators);  \nlogs[0].event.should.be.equal('InitiateChange');",
                "err": {},
                "isRoot": false,
                "uuid": "0dcc60ec-dd97-4d1e-9a45-f74b2015225d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f6e709ca-26ab-4897-975b-84e341ad9a4c",
              "ffc58c7a-283e-4b6a-b73c-ad2fac69b226",
              "0bc2e704-a5d3-4c2f-abac-eb35f2340bb4",
              "bbff1b81-9fe8-4e52-a2d0-5772c4b7c734",
              "aa5c41bb-12ab-4060-b80a-0dda1863f721",
              "0dcc60ec-dd97-4d1e-9a45-f74b2015225d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 468,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0eb026c8-9293-457e-ac86-bba9369f30d9",
            "title": "#swapValidatorKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap validator key",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #swapValidatorKey should swap validator key",
                "timedOut": false,
                "duration": 282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait addValidator(accounts[1], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(true);\n(await poaNetworkConsensus.isValidator.call(accounts[2])).should.be.equal(false);\n\nawait swapValidatorKey(accounts[2], accounts[3], false);\nawait swapValidatorKey(accounts[2], accounts[1], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.isValidator.call(accounts[2])).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "d7817bce-e02e-416e-a8ea-a14ccf01123d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should swap MoC",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #swapValidatorKey should swap MoC",
                "timedOut": false,
                "duration": 310,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensus.masterOfCeremonyPending.call()).should.be.equal('0x0000000000000000000000000000000000000000');\n\nawait swapValidatorKey(accounts[1], masterOfCeremony, true);\n(await poaNetworkConsensus.masterOfCeremonyPending.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(true);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensus.masterOfCeremonyPending.call()).should.be.equal('0x0000000000000000000000000000000000000000');\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "b1005a0c-7a3c-4fe7-b7db-54be12ed032a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d7817bce-e02e-416e-a8ea-a14ccf01123d",
              "b1005a0c-7a3c-4fe7-b7db-54be12ed032a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 592,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6d3624aa-e2a8-401e-aadd-18082106cb80",
            "title": "#removeValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should remove validator",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "0df68fff-b222-4147-bdd0-b460bf530e9a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove MoC",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should remove MoC",
                "timedOut": false,
                "duration": 231,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\nawait removeValidator(masterOfCeremony, true);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(0);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "32ac5de7-d04f-4425-af18-de98a9ad8582",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should only be called from keys manager",
                "timedOut": false,
                "duration": 132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await removeValidator(accounts[1], false);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "50db754f-d0c9-40aa-ab59-a0ac2e487c96",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be allowed to remove from existing set of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should only be allowed to remove from existing set of validators",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait removeValidator(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "364d8b95-f812-40aa-b42f-5f55fc7f2776",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease length of pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should decrease length of pendingList",
                "timedOut": false,
                "duration": 260,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait addValidator(accounts[2], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength; i++){\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\nconst indexOfRemovedElement = pendingList.indexOf(accounts[1]);\npendingList.splice(indexOfRemovedElement, 1);\nconst { logs } = await poaNetworkConsensus.removeValidator(accounts[1],true).should.be.fulfilled;\nlet pendingListFromContract = logs[0].args['newSet'];\npendingListFromContract.length.should.be.equal(currentValidatorsLength.toNumber(10) - 1);\npendingList.should.be.deep.equal(pendingListFromContract);\nlogs[0].event.should.be.equal('InitiateChange');\nconst expected = [masterOfCeremony, accounts[2]];\nexpected.should.be.deep.equal(pendingList);",
                "err": {},
                "isRoot": false,
                "uuid": "e5dacb45-38af-4166-9f3f-7ac5be4067a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change validatorsState",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should change validatorsState",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);\nconst state = await poaNetworkConsensus.validatorsState.call(accounts[1]);\nstate[0].should.be.false;\nstate[2].should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "a3b84c5d-1987-4566-bfb8-80b90e0551eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should set finalized to false",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);\nconst finalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "f1ca9527-f68e-4949-aff5-dc746c213d43",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0df68fff-b222-4147-bdd0-b460bf530e9a",
              "32ac5de7-d04f-4425-af18-de98a9ad8582",
              "50db754f-d0c9-40aa-ab59-a0ac2e487c96",
              "364d8b95-f812-40aa-b42f-5f55fc7f2776",
              "e5dacb45-38af-4166-9f3f-7ac5be4067a4",
              "a3b84c5d-1987-4566-bfb8-80b90e0551eb",
              "f1ca9527-f68e-4949-aff5-dc746c213d43"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 967,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4431e98f-ca4f-4226-9dcc-46cc7e6554ee",
            "title": "#setProxyStorage",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can be called by MoC",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can be called by MoC",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "ca646196-0e93-463d-8273-b9e65bf16add",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be called by owner",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can be called by owner",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: accounts[0]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "8c6c4775-b4d6-4d3e-b671-a6a38c0f3243",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can only be called once",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can only be called once",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// we already call it in the beforeEach block, hence why I expect it to be rejected\nawait poaNetworkConsensus.setProxyStorage(nonOwner, {from: nonOwner}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c8724bcc-250a-4bb5-a6c9-322f9fb9baa6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage('0x0000000000000000000000000000000000000000', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0d38f908-9f19-4201-b569-458d245392e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets proxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets proxyStorage",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: masterOfCeremony}).should.be.fulfilled;\n(await poaNetworkConsensus.proxyStorage.call()).should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "a60ff0a4-15aa-412d-a965-39880e2b989f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets wasProxyStorageSet",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets wasProxyStorageSet",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: masterOfCeremony}).should.be.fulfilled;\n(await poaNetworkConsensus.wasProxyStorageSet.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "9beca819-1328-4bc0-9c12-39d08b109e16",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "emits MoCInitializedProxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage emits MoCInitializedProxyStorage",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nconst {logs} = await poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: masterOfCeremony}).should.be.fulfilled;\nlogs[0].event.should.be.equal('MoCInitializedProxyStorage');\nlogs[0].args.proxyStorage.should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "7013510c-b434-4aef-9e40-85bf94ea0cb8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "#getKeysManager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage #getKeysManager",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait proxyStorageMock.setKeysManagerMock(newKeysManager);\n(await poaNetworkConsensus.getKeysManager.call()).should.be.equal(newKeysManager);",
                "err": {},
                "isRoot": false,
                "uuid": "3f6494aa-1663-46c7-a7df-f6d0ef778ed7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ca646196-0e93-463d-8273-b9e65bf16add",
              "8c6c4775-b4d6-4d3e-b671-a6a38c0f3243",
              "c8724bcc-250a-4bb5-a6c9-322f9fb9baa6",
              "0d38f908-9f19-4201-b569-458d245392e3",
              "a60ff0a4-15aa-412d-a965-39880e2b989f",
              "9beca819-1328-4bc0-9c12-39d08b109e16",
              "7013510c-b434-4aef-9e40-85bf94ea0cb8",
              "3f6494aa-1663-46c7-a7df-f6d0ef778ed7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 371,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "77c7fabf-781a-42b6-95d2-cf7f3594f4af",
            "title": "#isValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns true for validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #isValidator returns true for validator",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.isValidator.call(accounts[2])).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "1d81a601-73fa-4a50-bceb-9bd93dae21a3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1d81a601-73fa-4a50-bceb-9bd93dae21a3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "1d8afbfe-c648-4d4a-8b86-4f978220ac85",
            "title": "#isValidatorFinalized",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns true for finalized validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #isValidatorFinalized returns true for finalized validator",
                "timedOut": false,
                "duration": 1556,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(false);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(false);\n}\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.finalized.call()).should.be.true;\n(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(false);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(false);\n}\nfor (let i = 1; i <= 4; i++) {\n  await addValidator(accounts[i], true);\n}\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(false);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(false);\n}\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(true);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(true);\n}\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal(\n  await poaNetworkConsensus.getPendingList.call()\n);\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal([\n  masterOfCeremony, accounts[1], accounts[2], accounts[3], accounts[4]\n]);\nawait swapValidatorKey(accounts[5], accounts[1], true);\n(await poaNetworkConsensus.getValidators.call()).should.not.be.deep.equal(\n  await poaNetworkConsensus.getPendingList.call()\n);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\nfor (let i = 2; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(true);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(true);\n}\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[5])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[5]))[1].should.be.equal(false);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal(\n  await poaNetworkConsensus.getPendingList.call()\n);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\nfor (let i = 2; i <= 5; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(true);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(true);\n}\nawait removeValidator(accounts[1], false);\nawait removeValidator(accounts[3], true);\n(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[2])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[2]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[3])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[3]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[4])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[4]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[5])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[5]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[6])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[6]))[1].should.be.equal(false);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[2])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[2]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[3])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[3]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[4])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[4]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[5])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[5]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[6])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[6]))[1].should.be.equal(false);\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal([\n  masterOfCeremony, accounts[4], accounts[2], accounts[5]\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "b15e6bb1-6a4a-4065-8b72-e1fd268c75c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b15e6bb1-6a4a-4065-8b72-e1fd268c75c2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1556,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "35f04afe-abf0-47d0-a8c6-ebf2077e6efc",
        "title": "Contract: ProxyStorage [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
        "file": "/test/proxy_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ProxyStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1303,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "7997938d-0623-47e1-89db-64de2837688a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ad7a241c-50a8-4310-87fd-f723e8ef7448",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 872,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n(await proxyStorageEternalStorage.getProxyStorage.call()).should.be.equal(\n  proxyStorageEternalStorage.address\n);\nkeysManager = await KeysManager.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nvalidatorMetadata = await ValidatorMetadata.new();\nvalidatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nvotingToChangeKeys = await VotingToChangeKeys.new();\nvotingToChangeKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeKeys.address);\nvotingToChangeMinThreshold = await VotingToChangeMinThreshold.new();\nvotingToChangeMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeMinThreshold.address);\nvotingToChangeProxy = await VotingToChangeProxy.new();\nvotingToChangeProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeProxy.address);\nvotingToManageEmissionFunds = await VotingToManageEmissionFunds.new();\nvotingToManageEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToManageEmissionFunds.address);\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);",
            "err": {},
            "isRoot": false,
            "uuid": "6a8e1009-5743-4bf0-97fa-641a4598a80c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ProxyStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "217c5f0c-ed58-47b0-968f-fbf61db6ded2",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "aab002e5-40b0-495a-a606-be6e0b8322e5",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets PoA",
                "fullTitle": "Contract: ProxyStorage [all features] #constructor sets PoA",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "poaNetworkConsensus.address.should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "429988fb-006c-48af-a49f-71d9a995fd27",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "429988fb-006c-48af-a49f-71d9a995fd27"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 14,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8269b6af-c6df-4140-9512-cb640ecc0169",
            "title": "#initializeAddresses",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets all addresses",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses sets all addresses",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\nkeysManagerEternalStorage.address.should.be.equal(\n  await proxyStorage.getKeysManager.call()\n);\nvotingToChangeKeysEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeKeys.call()\n);\nvotingToChangeMinThresholdEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold.call()\n);\nvotingToChangeProxyEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeProxy.call()\n);\nvotingToManageEmissionFundsEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToManageEmissionFunds.call()\n);\nballotsEternalStorage.address.should.be.equal(\n  await proxyStorage.getBallotsStorage.call()\n);\nvalidatorMetadataEternalStorage.address.should.be.equal(\n  await proxyStorage.getValidatorMetadata.call()\n);\nrewardByBlockEternalStorage.address.should.be.equal(\n  await proxyStorage.getRewardByBlock.call()\n);\nlogs[0].event.should.be.equal('ProxyInitialized');\nlogs[0].args.keysManagerEternalStorage.should.be.equal(keysManagerEternalStorage.address);\nlogs[0].args.votingToChangeKeysEternalStorage.should.be.equal(votingToChangeKeysEternalStorage.address);\nlogs[0].args.votingToChangeMinThresholdEternalStorage.should.be.equal(votingToChangeMinThresholdEternalStorage.address);\nlogs[0].args.votingToChangeProxyEternalStorage.should.be.equal(votingToChangeProxyEternalStorage.address);\nlogs[0].args.votingToManageEmissionFundsEternalStorage.should.be.equal(votingToManageEmissionFundsEternalStorage.address);\nlogs[0].args.ballotsStorageEternalStorage.should.be.equal(ballotsEternalStorage.address);\nlogs[0].args.validatorMetadataEternalStorage.should.be.equal(validatorMetadataEternalStorage.address);\nlogs[0].args.rewardByBlockEternalStorage.should.be.equal(rewardByBlockEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "b6989713-0ed9-470a-baac-c8a12b5a7baa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents Moc to call it more than once",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses prevents Moc to call it more than once",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "false.should.be.equal(await proxyStorage.mocInitialized.call());\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\ntrue.should.be.equal(await proxyStorage.mocInitialized.call());\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1c134fa8-6579-4d30-9aa7-b5e328575778",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b6989713-0ed9-470a-baac-c8a12b5a7baa",
              "1c134fa8-6579-4d30-9aa7-b5e328575778"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 283,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4cd8fa78-0a37-45de-9613-f1f4dc4396d6",
            "title": "#setContractAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress \"before each\" hook",
                "timedOut": false,
                "duration": 38,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: masterOfCeremony}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "822e353b-55a3-479c-961d-a226f3022536",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeProxy address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress can only be called from votingToChangeProxy address",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, accounts[2], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "21df94d9-a500-441b-a2c8-23116ad46eca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, '0x0000000000000000000000000000000000000000', false, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "a2cd60cd-c145-4725-aa10-dfd479bc825d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets keysManager",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets keysManager",
                "timedOut": false,
                "duration": 157,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManager.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, keysManagerNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nkeysManagerNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "c4d2887a-f2c6-4515-b308-32b9ea1298b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeKeys",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeKeys",
                "timedOut": false,
                "duration": 160,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeKeysNew = await VotingToChangeKeys.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(2, votingToChangeKeysNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeKeysNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "952911ec-c6cd-4871-b41c-55f92cf0389d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeMinThreshold",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeMinThreshold",
                "timedOut": false,
                "duration": 257,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeMinThresholdNew = await VotingToChangeMinThreshold.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(3, votingToChangeMinThresholdNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeMinThresholdNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b223b17b-129a-4441-9351-4f0f24ee5b35",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets ballotsStorage",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets ballotsStorage",
                "timedOut": false,
                "duration": 158,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(5, ballotsStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nballotsStorageNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "7a585c98-8346-4d6b-9e84-a8d7ecc4266c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets poaConsensus",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets poaConsensus",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(6, accounts[5], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\naccounts[5].should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "718a28eb-9b66-4bc8-9d95-077a442ded0c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets validatorMetadata",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets validatorMetadata",
                "timedOut": false,
                "duration": 157,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorMetadataNew = await ValidatorMetadata.new();\n\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(7, validatorMetadataNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvalidatorMetadataNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "33a23dfc-b9af-4da7-a3b2-a0dd3e3dd1b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "changes proxyStorage (itself) implementation",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress changes proxyStorage (itself) implementation",
                "timedOut": false,
                "duration": 142,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldVersion = await proxyStorageEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nlet proxyStorageNew = await ProxyStorageMock.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(8, proxyStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nproxyStorageNew.address.should.be.equal(\n  await proxyStorageEternalStorage.implementation.call()\n);\nnewVersion.should.be.bignumber.equal(\n  await proxyStorageEternalStorage.version.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "eef159d0-ee00-4765-aa97-5b44a5cba75a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets rewardByBlock",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets rewardByBlock",
                "timedOut": false,
                "duration": 149,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const rewardByBlockNew = await RewardByBlock.new();\n\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(9, rewardByBlockNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nconst eternalProxyAddress = await proxyStorage.getRewardByBlock.call();\nconst eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nrewardByBlockNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "64031a24-c5a7-46c4-b7a1-fac4c682fea0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "21df94d9-a500-441b-a2c8-23116ad46eca",
              "a2cd60cd-c145-4725-aa10-dfd479bc825d",
              "c4d2887a-f2c6-4515-b308-32b9ea1298b6",
              "952911ec-c6cd-4871-b41c-55f92cf0389d",
              "b223b17b-129a-4441-9351-4f0f24ee5b35",
              "7a585c98-8346-4d6b-9e84-a8d7ecc4266c",
              "718a28eb-9b66-4bc8-9d95-077a442ded0c",
              "33a23dfc-b9af-4da7-a3b2-a0dd3e3dd1b7",
              "eef159d0-ee00-4765-aa97-5b44a5cba75a",
              "64031a24-c5a7-46c4-b7a1-fac4c682fea0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1433,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "bea978cd-656c-4cdc-b1db-70c12858d0c7",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage (itself)",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo may only be called by ProxyStorage (itself)",
                "timedOut": false,
                "duration": 134,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const proxyStorageNew = await ProxyStorageNew.new();\n(await proxyStorageEternalStorage.getProxyStorage.call()).should.be.equal(\n  proxyStorageEternalStorage.address\n);\nawait proxyStorageEternalStorage.upgradeTo(proxyStorageNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\n(await proxyStorageEternalStorage.implementation.call()).should.be.equal(\n  proxyStorageNew.address\n);",
                "err": {},
                "isRoot": false,
                "uuid": "58bfbaf0-f336-4c7a-8442-e97e9a229d15",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 126,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\n(await proxyStorageEternalStorage.implementation.call()).should.be.equal(\n  proxyStorageNew.address\n);",
                "err": {},
                "isRoot": false,
                "uuid": "150f2040-5c2d-4323-a3d0-11a5176d26ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 131,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proxyStorageNew = await ProxyStorageNew.new();\nconst oldVersion = await proxyStorageEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\n(await proxyStorageEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "06231c4e-1564-43f5-8233-0d1bba78a7f6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\nproxyStorageNew = await ProxyStorageNew.at(proxyStorageEternalStorage.address);\n(await proxyStorageNew.initialized.call()).should.be.equal(false);\nawait proxyStorageNew.initialize();\n(await proxyStorageNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "6706408d-8ae9-44d5-9cd7-16dfc06ea30a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 135,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\nproxyStorageNew = await ProxyStorageNew.at(proxyStorageEternalStorage.address);\n(await proxyStorageNew.getPoaConsensus.call()).should.be.equal(poaNetworkConsensus.address);",
                "err": {},
                "isRoot": false,
                "uuid": "658595cc-083a-4d1a-8721-55e439d04cc3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "58bfbaf0-f336-4c7a-8442-e97e9a229d15",
              "150f2040-5c2d-4323-a3d0-11a5176d26ab",
              "06231c4e-1564-43f5-8233-0d1bba78a7f6",
              "6706408d-8ae9-44d5-9cd7-16dfc06ea30a",
              "658595cc-083a-4d1a-8721-55e439d04cc3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 697,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "986e3293-7d50-4ab1-bffc-c27dc9320aaa",
        "title": "Contract: ProxyStorage upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
        "file": "/test/proxy_storage_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1646,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "893c22b5-4846-4a9d-9401-be624529aa76",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "214e94b0-300b-40f2-b51a-e05f62c6e59b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1115,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n(await proxyStorageEternalStorage.getProxyStorage.call()).should.be.equal(\n  proxyStorageEternalStorage.address\n);\nconst proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await proxyStorageEternalStorage.upgradeTo(proxyStorageNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\nproxyStorage = await ProxyStorageNew.at(proxyStorageEternalStorage.address);\nkeysManager = await KeysManager.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nvalidatorMetadata = await ValidatorMetadata.new();\nvalidatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nvotingToChangeKeys = await VotingToChangeKeys.new();\nvotingToChangeKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeKeys.address);\nvotingToChangeMinThreshold = await VotingToChangeMinThreshold.new();\nvotingToChangeMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeMinThreshold.address);\nvotingToChangeProxy = await VotingToChangeProxy.new();\nvotingToChangeProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeProxy.address);\nvotingToManageEmissionFunds = await VotingToManageEmissionFunds.new();\nvotingToManageEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToManageEmissionFunds.address);\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);",
            "err": {},
            "isRoot": false,
            "uuid": "8ca3c3e5-f22a-420f-b1bd-e0be183ed074",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e28453b4-5cac-4831-99da-28534a0cb64e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "8b9cd131-d354-47f6-ae02-9f5be9590575",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
            "file": "/test/proxy_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets PoA",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #constructor sets PoA",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "poaNetworkConsensus.address.should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "81c64c1d-3fdb-4b76-8592-75036cd11f0e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "81c64c1d-3fdb-4b76-8592-75036cd11f0e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 16,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5d17338f-2dd0-46e8-ab87-fe421e36d9e4",
            "title": "#initializeAddresses",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
            "file": "/test/proxy_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets all addresses",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #initializeAddresses sets all addresses",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\nkeysManagerEternalStorage.address.should.be.equal(\n  await proxyStorage.getKeysManager.call()\n);\nvotingToChangeKeysEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeKeys.call()\n);\nvotingToChangeMinThresholdEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold.call()\n);\nvotingToChangeProxyEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeProxy.call()\n);\nvotingToManageEmissionFundsEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToManageEmissionFunds.call()\n);\nballotsEternalStorage.address.should.be.equal(\n  await proxyStorage.getBallotsStorage.call()\n);\nvalidatorMetadataEternalStorage.address.should.be.equal(\n  await proxyStorage.getValidatorMetadata.call()\n);\nrewardByBlockEternalStorage.address.should.be.equal(\n  await proxyStorage.getRewardByBlock.call()\n);\nlogs[0].event.should.be.equal('ProxyInitialized');\nlogs[0].args.keysManagerEternalStorage.should.be.equal(keysManagerEternalStorage.address);\nlogs[0].args.votingToChangeKeysEternalStorage.should.be.equal(votingToChangeKeysEternalStorage.address);\nlogs[0].args.votingToChangeMinThresholdEternalStorage.should.be.equal(votingToChangeMinThresholdEternalStorage.address);\nlogs[0].args.votingToChangeProxyEternalStorage.should.be.equal(votingToChangeProxyEternalStorage.address);\nlogs[0].args.votingToManageEmissionFundsEternalStorage.should.be.equal(votingToManageEmissionFundsEternalStorage.address);\nlogs[0].args.ballotsStorageEternalStorage.should.be.equal(ballotsEternalStorage.address);\nlogs[0].args.validatorMetadataEternalStorage.should.be.equal(validatorMetadataEternalStorage.address);\nlogs[0].args.rewardByBlockEternalStorage.should.be.equal(rewardByBlockEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "23930f84-862a-4876-8564-587ea0323997",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents Moc to call it more than once",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #initializeAddresses prevents Moc to call it more than once",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "false.should.be.equal(await proxyStorage.mocInitialized.call());\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\ntrue.should.be.equal(await proxyStorage.mocInitialized.call());\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "400a8083-2328-48e5-8ece-96ba4a092204",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "23930f84-862a-4876-8564-587ea0323997",
              "400a8083-2328-48e5-8ece-96ba4a092204"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 261,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "157123c1-8e8d-45c8-b8c7-33f5fed92051",
            "title": "#setContractAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
            "file": "/test/proxy_storage_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress \"before each\" hook",
                "timedOut": false,
                "duration": 63,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: masterOfCeremony}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "36d31fee-03af-45da-89a5-9113edccf5ca",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeProxy address",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress can only be called from votingToChangeProxy address",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, accounts[2], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "9093ebe3-9cc4-4cbe-aafa-fcd549183ef5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, '0x0000000000000000000000000000000000000000', false, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "74465822-cfe6-442b-8920-4451d3dbe166",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets keysManager",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets keysManager",
                "timedOut": false,
                "duration": 152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManager.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, keysManagerNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nkeysManagerNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "16cb5bc4-068a-4466-93a1-3d61267ba668",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeKeys",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets votingToChangeKeys",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeKeysNew = await VotingToChangeKeys.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(2, votingToChangeKeysNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeKeysNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "368bf74a-cf65-4376-a10b-43ae6d0b5f43",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeMinThreshold",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets votingToChangeMinThreshold",
                "timedOut": false,
                "duration": 155,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeMinThresholdNew = await VotingToChangeMinThreshold.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(3, votingToChangeMinThresholdNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeMinThresholdNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "1a543bdf-315e-4119-8e11-a7c631d1b805",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets ballotsStorage",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets ballotsStorage",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(5, ballotsStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nballotsStorageNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "ad71a6d4-92c3-4a9c-a985-59cb0667d408",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets poaConsensus",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets poaConsensus",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(6, accounts[5], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\naccounts[5].should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "306ffab7-2044-41ab-8d63-0a3a1adc6478",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets validatorMetadata",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets validatorMetadata",
                "timedOut": false,
                "duration": 161,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorMetadataNew = await ValidatorMetadata.new();\n\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(7, validatorMetadataNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvalidatorMetadataNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "20a54e38-095a-4ac2-910a-a42a622c02f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "changes proxyStorage (itself) implementation",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress changes proxyStorage (itself) implementation",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldVersion = await proxyStorageEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nlet proxyStorageNew = await ProxyStorageMock.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(8, proxyStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nproxyStorageNew.address.should.be.equal(\n  await proxyStorageEternalStorage.implementation.call()\n);\nnewVersion.should.be.bignumber.equal(\n  await proxyStorageEternalStorage.version.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "a5dd0d6c-e326-40ab-b90b-1fffe0f50eea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets rewardByBlock",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets rewardByBlock",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const rewardByBlockNew = await RewardByBlock.new();\n\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(9, rewardByBlockNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nconst eternalProxyAddress = await proxyStorage.getRewardByBlock.call();\nconst eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nrewardByBlockNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "12c2d02a-37e9-4848-b0bf-9888c516e651",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9093ebe3-9cc4-4cbe-aafa-fcd549183ef5",
              "74465822-cfe6-442b-8920-4451d3dbe166",
              "16cb5bc4-068a-4466-93a1-3d61267ba668",
              "368bf74a-cf65-4376-a10b-43ae6d0b5f43",
              "1a543bdf-315e-4119-8e11-a7c631d1b805",
              "ad71a6d4-92c3-4a9c-a985-59cb0667d408",
              "306ffab7-2044-41ab-8d63-0a3a1adc6478",
              "20a54e38-095a-4ac2-910a-a42a622c02f7",
              "a5dd0d6c-e326-40ab-b90b-1fffe0f50eea",
              "12c2d02a-37e9-4848-b0bf-9888c516e651"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1370,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c83e1dd8-ca7e-45e7-8831-49571c107bd5",
        "title": "Contract: RewardByBlock [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
        "file": "/test/reward_by_block_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByBlock [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1361,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "35007413-f35c-4f45-9736-d54a8aebf136",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByBlock [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "241feab3-7cdc-461c-9e97-c0212e18821f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByBlock [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 966,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockOldImplementation = rewardByBlock.address;\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';",
            "err": {},
            "isRoot": false,
            "uuid": "b1f6e507-aaee-4b2f-a62f-251700ff1b9b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByBlock [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "fddb2e60-8a74-441e-8492-4aacee79d5c6",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "1a80701a-72a6-483a-8644-a9e0948bed61",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
            "file": "/test/reward_by_block_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByBlock [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.reward([miningKey], [0]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward([miningKey], [0], {from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "67469872-8060-4fb9-a0df-d0fe7182b61f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if input array contains more than one item",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if input array contains more than one item",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey, miningKey2],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "03988653-4d60-4576-a335-f8ef74b5f291",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if lengths of input arrays are not equal",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if lengths of input arrays are not equal",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2af02946-88f8-4697-aad5-f18c4e1a9575",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if `kind` parameter is not 0",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if `kind` parameter is not 0",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [1],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4ff3befe-482f-4e34-b90d-4da4f413ec2a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if mining key does not exist",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if mining key does not exist",
                "timedOut": false,
                "duration": 316,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.removeMiningKey(miningKey3, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey3],\n  [0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.reward(\n  [miningKey2],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "97f10c9b-9ed9-4066-aea0-13b408819fa4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout key and EmissionFunds",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should assign rewards to payout key and EmissionFunds",
                "timedOut": false,
                "duration": 1271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\nconst totalMinted = web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(totalMinted);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(totalMinted);",
                "err": {},
                "isRoot": false,
                "uuid": "2ae2020c-93fc-48bd-93fc-bb648d24065c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign reward to mining key if payout key is 0",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should assign reward to mining key if payout key is 0",
                "timedOut": false,
                "duration": 147,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await keysManager.removePayoutKey(\n  miningKey,\n  {from: votingToChangeKeys}\n);\nresult.logs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([miningKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());",
                "err": {},
                "isRoot": false,
                "uuid": "ecbec5ef-6b1a-415e-abbd-0e3b680e8524",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to extra receivers and clear extra receivers list",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should assign rewards to extra receivers and clear extra receivers list",
                "timedOut": false,
                "duration": 1606,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nlet result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\nresult = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(10);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount * 2);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount * 2);\n(await rewardByBlock.mintedForAccount.call(accounts[2])).should.be.bignumber.equal(4);\n(await rewardByBlock.mintedForAccount.call(accounts[3])).should.be.bignumber.equal(6);\n\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[2], web3.eth.blockNumber)).should.be.bignumber.equal(2);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[3], web3.eth.blockNumber)).should.be.bignumber.equal(3);\n\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3)\n);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3).mul(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "b947da71-7807-4efc-a89a-17a3d3a549da",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "67469872-8060-4fb9-a0df-d0fe7182b61f",
              "03988653-4d60-4576-a335-f8ef74b5f291",
              "2af02946-88f8-4697-aad5-f18c4e1a9575",
              "4ff3befe-482f-4e34-b90d-4da4f413ec2a",
              "97f10c9b-9ed9-4066-aea0-13b408819fa4",
              "2ae2020c-93fc-48bd-93fc-bb648d24065c",
              "ecbec5ef-6b1a-415e-abbd-0e3b680e8524",
              "b947da71-7807-4efc-a89a-17a3d3a549da"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3597,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ab1d7964-4d3a-4825-86ce-50f8f42a8312",
            "title": "#addExtraReceiver",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
            "file": "/test/reward_by_block_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by bridge contract",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver may only be called by bridge contract",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(1, accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.addExtraReceiver(1, accounts[1], {from: accounts[2]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "13c442bb-b80f-4145-ac95-466a04a54593",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if receiver address is 0x0",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver should revert if receiver address is 0x0",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  1,\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "577bdba0-b5e5-4059-b24e-c99f12e57b84",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if amount is 0",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver should revert if amount is 0",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  0,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d00744a1-83ae-4069-aac1-29a2df628d29",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be called repeatedly for the same recipient",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver can be called repeatedly for the same recipient",
                "timedOut": false,
                "duration": 429,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(\n  1,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(\n  2,\n  accounts[1],\n  {from: accounts[3]}\n).should.be.fulfilled;\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[1]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(3);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(1);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(2);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[1]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "d485185b-e0fa-49a5-8862-ade92265f8ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add receivers",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver should add receivers",
                "timedOut": false,
                "duration": 204,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\nlet result = await rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[2]);\nresult.logs[0].args.amount.should.be.bignumber.equal(2);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);\nresult = await rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverByIndex.call(1)).should.be.equal(accounts[3]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(3);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(2);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[3]);\nresult.logs[0].args.amount.should.be.bignumber.equal(3);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "953c9aa0-00a3-4854-aa75-a05d76f1287c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "13c442bb-b80f-4145-ac95-466a04a54593",
              "577bdba0-b5e5-4059-b24e-c99f12e57b84",
              "d00744a1-83ae-4069-aac1-29a2df628d29",
              "d485185b-e0fa-49a5-8862-ade92265f8ce",
              "953c9aa0-00a3-4854-aa75-a05d76f1287c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 739,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "51458f5c-3fff-4320-804b-2bcd98f837d0",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
            "file": "/test/reward_by_block_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait rewardByBlockEternalStorage.upgradeTo(rewardByBlockNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "2463e63a-f125-4d53-bfa7-0f36ab5fcdb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 128,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nconst newImplementation = rewardByBlockNew.address;\n(await rewardByBlockEternalStorage.implementation.call()).should.be.equal(rewardByBlockOldImplementation);\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByBlockEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "82ff73dd-15d9-4fea-9270-44edd73f3f4f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 118,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nconst oldVersion = await rewardByBlockEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByBlockEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "c3d7379f-0ed1-4b21-adfe-41e88868040f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 236,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByBlockNew = await RewardByBlockNew.at(rewardByBlockEternalStorage.address);\n(await rewardByBlockNew.initialized.call()).should.be.equal(false);\nawait rewardByBlockNew.initialize();\n(await rewardByBlockNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "344c8669-c912-4a52-8741-6ba0b0d1e00c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nrewardByBlockNew = await RewardByBlockNew.at(rewardByBlockEternalStorage.address);\n(await rewardByBlockNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "ce3965ef-b40a-4774-b83c-babba56e896a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2463e63a-f125-4d53-bfa7-0f36ab5fcdb2",
              "82ff73dd-15d9-4fea-9270-44edd73f3f4f",
              "c3d7379f-0ed1-4b21-adfe-41e88868040f",
              "344c8669-c912-4a52-8741-6ba0b0d1e00c",
              "ce3965ef-b40a-4774-b83c-babba56e896a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 725,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "fa598f0a-9335-46c2-91ae-93edb42657d9",
        "title": "Contract: RewardByBlock upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_upgrade_test.js",
        "file": "/test/reward_by_block_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1361,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "fa81394c-eb35-4e48-9728-e088b9372f10",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "16766b76-70e1-4875-ad68-40788a38a1c9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1057,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nconst rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(accounts[8]);\nconst {logs} = await rewardByBlockEternalStorage.upgradeTo(rewardByBlockNew.address, {from: accounts[8]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByBlock = await RewardByBlockNew.at(rewardByBlockEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';",
            "err": {},
            "isRoot": false,
            "uuid": "14f704fa-710e-41bd-a42c-b9908748c29e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "37c00ed9-15e7-4432-82dd-a3d384d7257a",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "21fd26da-99dd-40f7-8f50-83b1c8c7ca8b",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_upgrade_test.js",
            "file": "/test/reward_by_block_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.reward([miningKey], [0]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward([miningKey], [0], {from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "7169915e-bb11-4d91-b64d-230e16896b8c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if input array contains more than one item",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if input array contains more than one item",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey, miningKey2],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "63181a52-c5a7-48bb-887b-12c1c5528d45",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if lengths of input arrays are not equal",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if lengths of input arrays are not equal",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "36f300d4-68c7-41e5-bfce-95e0567752e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if `kind` parameter is not 0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if `kind` parameter is not 0",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [1],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5e6520e3-9cf8-45ca-8e34-e3346bb205e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if mining key does not exist",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if mining key does not exist",
                "timedOut": false,
                "duration": 291,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.removeMiningKey(miningKey3, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey3],\n  [0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.reward(\n  [miningKey2],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "6cec14fa-1391-4fad-b469-0df0f643beda",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout key and EmissionFunds",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should assign rewards to payout key and EmissionFunds",
                "timedOut": false,
                "duration": 1119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\nconst totalMinted = web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(totalMinted);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(totalMinted);",
                "err": {},
                "isRoot": false,
                "uuid": "114026b5-056b-47fa-83e8-1193d762acd9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign reward to mining key if payout key is 0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should assign reward to mining key if payout key is 0",
                "timedOut": false,
                "duration": 158,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await keysManager.removePayoutKey(\n  miningKey,\n  {from: votingToChangeKeys}\n);\nresult.logs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([miningKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());",
                "err": {},
                "isRoot": false,
                "uuid": "552922c4-8616-476a-a125-9c2f686d338c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to extra receivers and clear extra receivers list",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should assign rewards to extra receivers and clear extra receivers list",
                "timedOut": false,
                "duration": 1595,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nlet result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\nresult = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(10);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount * 2);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount * 2);\n(await rewardByBlock.mintedForAccount.call(accounts[2])).should.be.bignumber.equal(4);\n(await rewardByBlock.mintedForAccount.call(accounts[3])).should.be.bignumber.equal(6);\n\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[2], web3.eth.blockNumber)).should.be.bignumber.equal(2);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[3], web3.eth.blockNumber)).should.be.bignumber.equal(3);\n\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3)\n);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3).mul(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "d747b7be-8288-4100-9af8-601deede96bb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7169915e-bb11-4d91-b64d-230e16896b8c",
              "63181a52-c5a7-48bb-887b-12c1c5528d45",
              "36f300d4-68c7-41e5-bfce-95e0567752e0",
              "5e6520e3-9cf8-45ca-8e34-e3346bb205e6",
              "6cec14fa-1391-4fad-b469-0df0f643beda",
              "114026b5-056b-47fa-83e8-1193d762acd9",
              "552922c4-8616-476a-a125-9c2f686d338c",
              "d747b7be-8288-4100-9af8-601deede96bb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3406,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "65bc14eb-6873-468e-9b27-499f8da57683",
            "title": "#addExtraReceiver",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_upgrade_test.js",
            "file": "/test/reward_by_block_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by bridge contract",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver may only be called by bridge contract",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(1, accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.addExtraReceiver(1, accounts[1], {from: accounts[2]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b75c5460-d007-4f81-8742-7c246aced4ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if receiver address is 0x0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver should revert if receiver address is 0x0",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  1,\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "cc7c8fac-7947-4f72-8e5d-c42a936f8813",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if amount is 0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver should revert if amount is 0",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  0,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "14c71f0f-175f-4c59-b695-380e484702bc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be called repeatedly for the same recipient",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver can be called repeatedly for the same recipient",
                "timedOut": false,
                "duration": 496,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(\n  1,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(\n  2,\n  accounts[1],\n  {from: accounts[3]}\n).should.be.fulfilled;\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[1]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(3);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(1);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(2);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[1]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "6ea17afc-58b3-4ab5-9d8c-fdbd6cdaa5ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add receivers",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver should add receivers",
                "timedOut": false,
                "duration": 198,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\nlet result = await rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[2]);\nresult.logs[0].args.amount.should.be.bignumber.equal(2);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);\nresult = await rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverByIndex.call(1)).should.be.equal(accounts[3]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(3);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(2);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[3]);\nresult.logs[0].args.amount.should.be.bignumber.equal(3);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "d4142fd9-4ed4-49f3-a2a5-b60b90ba4b9c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b75c5460-d007-4f81-8742-7c246aced4ea",
              "cc7c8fac-7947-4f72-8e5d-c42a936f8813",
              "14c71f0f-175f-4c59-b695-380e484702bc",
              "6ea17afc-58b3-4ab5-9d8c-fdbd6cdaa5ce",
              "d4142fd9-4ed4-49f3-a2a5-b60b90ba4b9c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 789,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e997f0a5-aa6a-46c9-9d51-38a9ca0ec6a3",
        "title": "Contract: RewardByTime [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_test.js",
        "file": "/test/reward_by_time_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByTime [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1406,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "a08476a9-d494-44ad-ae18-316d92bb7a28",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByTime [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "dea79037-53f2-4f03-a2c4-b580fb8f09e1",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByTime [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 964,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByTime = await RewardByTime.new();\nrewardByTimeOldImplementation = rewardByTime.address;\nrewardByTimeEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByTime.address);\nrewardByTime = await RewardByTime.at(rewardByTimeEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';\nthreshold = 5;",
            "err": {},
            "isRoot": false,
            "uuid": "b349d12c-11c5-4850-8ea7-01a39c72f088",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByTime [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3c4831e2-2c73-405a-95f6-a1b876cf493f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "35b9f6ed-165c-4113-87e2-f635eb11b055",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_test.js",
            "file": "/test/reward_by_time_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByTime [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.reward().should.be.rejectedWith(ERROR_MSG);\nawait rewardByTime.setSystemAddress(systemAddress);\nawait rewardByTime.reward({from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "600a15dd-d4b3-4e6c-981e-8026845fab00",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout keys and EmissionFunds",
                "fullTitle": "Contract: RewardByTime [all features] #reward should assign rewards to payout keys and EmissionFunds",
                "timedOut": false,
                "duration": 3716,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\nlet lastTime = 100 + threshold * 4;\nlet keyIndex = 1;\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\nconst keysArray = [\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n];\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal(keysArray);\nfor (let k = 0; k < 10; k++) {\n  const time = getRandomInt(lastTime + 4, lastTime + 81);\n  //console.log('time = ' + time);\n  const receiversCount = Math.floor((time - lastTime) / threshold);\n  let receivers = [];\n  await rewardByTime.setTime(time);\n  result = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\n  if (receiversCount > 0) {\n    result.logs[0].event.should.be.equal('Rewarded');\n  }\n  let i, n;\n  for (i = keyIndex, n = 0; n < receiversCount; i++, n++) {\n    receivers.push(keysArray[i % keysArray.length]);\n    result.logs[0].args.rewards[n].toString().should.be.equal(blockRewardAmount.toString());\n  }\n  if (receiversCount > 0) {\n    receivers.push(emissionFundsAddress);\n    result.logs[0].args.receivers.should.be.deep.equal(receivers);\n    result.logs[0].args.rewards[n].toString().should.be.equal((emissionFundsAmount * receiversCount).toString());\n    lastTime = lastTime + threshold * receiversCount;\n    keyIndex = i % keysArray.length;\n    (await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n    (await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\n  }\n}",
                "err": {},
                "isRoot": false,
                "uuid": "24d45baf-f7d7-4d9d-b2f0-1e25c968b3f1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should work fine after some validators are removed and added",
                "fullTitle": "Contract: RewardByTime [all features] #reward should work fine after some validators are removed and added",
                "timedOut": false,
                "duration": 1558,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nresult = await keysManager.removeMiningKey(miningKey2, {from: votingToChangeKeys});\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 4);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(135);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 7);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait addMiningKey(miningKey2);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(147);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  emissionFundsAddress\n]);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2\n]);\nawait rewardByTime.setTime(166);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2,\n  emissionFundsAddress\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "51572a1f-d504-41d4-9d1a-30e59ea9ef82",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "600a15dd-d4b3-4e6c-981e-8026845fab00",
              "24d45baf-f7d7-4d9d-b2f0-1e25c968b3f1",
              "51572a1f-d504-41d4-9d1a-30e59ea9ef82"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5418,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3d02f740-0482-41c9-b2a0-8b774c5268e8",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_test.js",
            "file": "/test/reward_by_time_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait rewardByTimeEternalStorage.upgradeTo(rewardByTimeNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "a00e45fd-287b-45d3-b3d2-77f71ffb635b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 113,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nconst newImplementation = rewardByTimeNew.address;\n(await rewardByTimeEternalStorage.implementation.call()).should.be.equal(rewardByTimeOldImplementation);\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByTimeEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "ae826995-eddf-46fc-a0e0-761138a738af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 122,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nconst oldVersion = await rewardByTimeEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByTimeEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "e53d79df-8518-47bd-abc5-4aab86f5670e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 141,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByTimeNew = await RewardByTimeNew.at(rewardByTimeEternalStorage.address);\n(await rewardByTimeNew.initialized.call()).should.be.equal(false);\nawait rewardByTimeNew.initialize();\n(await rewardByTimeNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "ab4abb52-4c4c-4bb5-a3c5-e5c90c7530fd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 115,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nrewardByTimeNew = await RewardByTimeNew.at(rewardByTimeEternalStorage.address);\n(await rewardByTimeNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "56e32fe7-bb83-4250-8394-4fb547f65d71",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a00e45fd-287b-45d3-b3d2-77f71ffb635b",
              "ae826995-eddf-46fc-a0e0-761138a738af",
              "e53d79df-8518-47bd-abc5-4aab86f5670e",
              "ab4abb52-4c4c-4bb5-a3c5-e5c90c7530fd",
              "56e32fe7-bb83-4250-8394-4fb547f65d71"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 599,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "587b7297-174a-4357-bbc3-6cc5d0b79580",
        "title": "Contract: RewardByTime upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_upgrade_test.js",
        "file": "/test/reward_by_time_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1060,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "1c083680-00ef-4fc5-ace3-f695c9983064",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6710635f-c0b4-4b8f-b3fd-5668b853f34c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1115,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByTime = await RewardByTime.new();\nrewardByTimeEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByTime.address);\nrewardByTime = await RewardByTime.at(rewardByTimeEternalStorage.address);\nconst rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(accounts[8]);\nconst {logs} = await rewardByTimeEternalStorage.upgradeTo(rewardByTimeNew.address, {from: accounts[8]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByTime = await RewardByTimeNew.at(rewardByTimeEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';\nthreshold = 5;",
            "err": {},
            "isRoot": false,
            "uuid": "ab92e5ee-25d7-4de6-9441-7f5b81f61648",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2aea2b7c-e3c6-4c73-b709-82f6e2030da8",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "48db940d-9dd7-44d6-88f9-60705dd1d7d0",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_upgrade_test.js",
            "file": "/test/reward_by_time_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByTime upgraded [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 154,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.reward().should.be.rejectedWith(ERROR_MSG);\nawait rewardByTime.setSystemAddress(systemAddress);\nawait rewardByTime.reward({from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "afe4ff03-075f-42d7-97f5-47437b5f3afb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout keys and EmissionFunds",
                "fullTitle": "Contract: RewardByTime upgraded [all features] #reward should assign rewards to payout keys and EmissionFunds",
                "timedOut": false,
                "duration": 3579,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\nlet lastTime = 100 + threshold * 4;\nlet keyIndex = 1;\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\nconst keysArray = [\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n];\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal(keysArray);\nfor (let k = 0; k < 10; k++) {\n  const time = getRandomInt(lastTime + 4, lastTime + 81);\n  //console.log('time = ' + time);\n  const receiversCount = Math.floor((time - lastTime) / threshold);\n  let receivers = [];\n  await rewardByTime.setTime(time);\n  result = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\n  if (receiversCount > 0) {\n    result.logs[0].event.should.be.equal('Rewarded');\n  }\n  let i, n;\n  for (i = keyIndex, n = 0; n < receiversCount; i++, n++) {\n    receivers.push(keysArray[i % keysArray.length]);\n    result.logs[0].args.rewards[n].toString().should.be.equal(blockRewardAmount.toString());\n  }\n  if (receiversCount > 0) {\n    receivers.push(emissionFundsAddress);\n    result.logs[0].args.receivers.should.be.deep.equal(receivers);\n    result.logs[0].args.rewards[n].toString().should.be.equal((emissionFundsAmount * receiversCount).toString());\n    lastTime = lastTime + threshold * receiversCount;\n    keyIndex = i % keysArray.length;\n    (await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n    (await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\n  }\n}",
                "err": {},
                "isRoot": false,
                "uuid": "e6e9329f-34a9-4472-a219-a1918d9cb912",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should work fine after some validators are removed and added",
                "fullTitle": "Contract: RewardByTime upgraded [all features] #reward should work fine after some validators are removed and added",
                "timedOut": false,
                "duration": 1406,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nresult = await keysManager.removeMiningKey(miningKey2, {from: votingToChangeKeys});\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 4);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(135);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 7);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait addMiningKey(miningKey2);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(147);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  emissionFundsAddress\n]);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2\n]);\nawait rewardByTime.setTime(166);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2,\n  emissionFundsAddress\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "d76e0920-cc54-4c5a-be65-95115476ed80",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "afe4ff03-075f-42d7-97f5-47437b5f3afb",
              "e6e9329f-34a9-4472-a219-a1918d9cb912",
              "d76e0920-cc54-4c5a-be65-95115476ed80"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5139,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b4065261-3041-46b7-83fe-994c0162fd2e",
        "title": "Contract: Voting to change keys [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
        "file": "/test/voting_to_change_keys_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Voting to change keys [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 456,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "c2bb8658-1092-415b-844b-19843e828741",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7e4bc81e-b9b3-4a84-9f9a-5bfbe59b6413",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 870,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nminingKeyForVotingKey = accounts[1];\nmasterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvoting = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingEternalStorage.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "1cce0940-be7c-4acc-9968-232bde533ca9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Voting to change keys [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d5cc38e2-86db-4567-a3a7-363cb4875051",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "2643759d-3226-4a88-8966-bf470201a32b",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 654,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nlet result = await keysManager.swapMiningKey(accounts[3], accounts[1]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(votingKey, accounts[3]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\n\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[3],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[0].should.be.bignumber.equal(VOTING_START_DATE);\nballotInfo[1].should.be.bignumber.equal(VOTING_END_DATE);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "718b0f0d-f9e7-425d-af18-895a9fd0ecf0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create voting with invalid duration",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let create voting with invalid duration",
                "timedOut": false,
                "duration": 160,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(10, 'days').unix();\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = 0\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = 0\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0718b50f-ebd2-4d67-afe7-074ab5ae4995",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for MoC",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let add votingKey for MoC",
                "timedOut": false,
                "duration": 448,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  masterOfCeremony, // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "e891eb39-e703-48d1-afa3-e60cf0706c24",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for 0x0",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let add votingKey for 0x0",
                "timedOut": false,
                "duration": 435,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  '0x0000000000000000000000000000000000000000', // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "1f0cf263-f2fc-492f-a321-4822d46b3676",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add payoutKey for 0x0",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let add payoutKey for 0x0",
                "timedOut": false,
                "duration": 427,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[2],\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c556c89f-6a6f-4527-96f5-6bd6c676641a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10525,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); //add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "d6120c24-a729-4168-a846-bca6ce6e6007",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "718b0f0d-f9e7-425d-af18-895a9fd0ecf0",
              "0718b50f-ebd2-4d67-afe7-074ab5ae4995",
              "e891eb39-e703-48d1-afa3-e60cf0706c24",
              "1f0cf263-f2fc-492f-a321-4822d46b3676",
              "c556c89f-6a6f-4527-96f5-6bd6c676641a",
              "d6120c24-a729-4168-a846-bca6ce6e6007"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12649,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d7bbd018-cf7b-4dba-81e9-1b50cd543bb0",
            "title": "#createBallotToAddNewValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator \"before each\" hook",
                "timedOut": false,
                "duration": 221,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addPayoutKey(accounts[6], miningKeyForVotingKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "21585a0c-4c81-4859-a2e9-61e8c37972f1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator happy path",
                "timedOut": false,
                "duration": 301,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\n\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[3], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  accounts[4], // newVotingKey\n  accounts[5], // newPayoutKey\n  '0x0000000000000000000000000000000000000000', // miningKey\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(1);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "baa1f773-33f1-42cc-b26c-63145267283b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed voting key",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator deny adding already existed voting key",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  votingKey,         // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "43dc5ce9-e1a0-4f6c-bdf0-619aac074d24",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed payout key",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator deny adding already existed payout key",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[6],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "9a96f42d-38ea-4648-b62f-30c8c25b2946",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create validator with all keys after finalization",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator should create validator with all keys after finalization",
                "timedOut": false,
                "duration": 1253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(5);",
                "err": {},
                "isRoot": false,
                "uuid": "f4c61ca3-1478-4b93-9179-145a66252027",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow removing new validator if finalizeChange did not happen",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator should allow removing new validator if finalizeChange did not happen",
                "timedOut": false,
                "duration": 2262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nVOTING_START_DATE = moment.utc().add(20, 'days').unix();\nVOTING_END_DATE = moment.utc().add(30, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  2,                 // _ballotType (KeyRemoval)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[7],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.isPayoutActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getVotingByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getPayoutByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);",
                "err": {},
                "isRoot": false,
                "uuid": "b1315903-6d1b-4f74-b774-dca16eca55a4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "baa1f773-33f1-42cc-b26c-63145267283b",
              "43dc5ce9-e1a0-4f6c-bdf0-619aac074d24",
              "9a96f42d-38ea-4648-b62f-30c8c25b2946",
              "f4c61ca3-1478-4b93-9179-145a66252027",
              "b1315903-6d1b-4f74-b774-dca16eca55a4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4060,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "762f992e-6e73-45d8-9343-e255fc226856",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 285,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3], \n  accounts[1],\n  {from: votingKey}\n);",
                "err": {},
                "isRoot": false,
                "uuid": "0533528d-c3b7-4ebd-b797-c973fbace91d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 189,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "85f11474-b7fb-4b1c-928f-fcbfb3f3d658",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: Voting to change keys [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "a2aeb5f9-8697-470c-8e61-dfe0a38714f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 942,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, {from: accounts[5]}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "e3d634ae-7cd5-4ec6-a69d-ec5ede4c7cae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2f4188a8-cac3-4063-8ab9-c227a260beaa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b71ee485-d5a1-4e08-b0fa-f0017b8e1c45",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 114,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f23abdea-bfad-4fcb-8e0e-6cc1e4f3a8a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 209,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "570a52ec-432d-45ab-bf30-3faebe3773b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e7a398fa-c27f-422d-9351-276ccbedf575",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4a7bd799-4033-4c87-9d89-df2b890ae516",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "85f11474-b7fb-4b1c-928f-fcbfb3f3d658",
              "a2aeb5f9-8697-470c-8e61-dfe0a38714f8",
              "e3d634ae-7cd5-4ec6-a69d-ec5ede4c7cae",
              "2f4188a8-cac3-4063-8ab9-c227a260beaa",
              "b71ee485-d5a1-4e08-b0fa-f0017b8e1c45",
              "f23abdea-bfad-4fcb-8e0e-6cc1e4f3a8a0",
              "570a52ec-432d-45ab-bf30-3faebe3773b0",
              "e7a398fa-c27f-422d-9351-276ccbedf575",
              "4a7bd799-4033-4c87-9d89-df2b890ae516"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2177,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "85226a65-011e-4008-ad92-4c414096ee33",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 551,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey  = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b6240ccd-b940-4f90-b532-b275d1568aa2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path - no action since it did not meet minimum number of totalVoters",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize happy path - no action since it did not meet minimum number of totalVoters",
                "timedOut": false,
                "duration": 736,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  payoutKeyToAdd,\n  accounts[1],\n  {from: votingKey}\n);\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 1);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(votingId).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  payoutKeyToAdd, // affectedKey\n  new web3.BigNumber(3), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[1], // miningKey\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\n\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey)\n);\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "26509800-2b32-40dd-a843-593d16a3dde0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of payout key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of payout key",
                "timedOut": false,
                "duration": 1028,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait deployAndTestBallot({\n  _affectedKey: payoutKeyToAdd,\n  _affectedKeyType: 3,\n  _miningKey: accounts[1],\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  payoutKeyToAdd,\n  true,\n  true,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "039a3ba8-7846-479f-a8c3-30dc3c85ba82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of VotingKey",
                "timedOut": false,
                "duration": 1036,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\nlet votingKeyToAdd = accounts[8];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ votingKeyToAdd,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "899bd84e-3282-425e-90f6-c9ccd7447bb9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create ballot for using previous mining key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize cannot create ballot for using previous mining key",
                "timedOut": false,
                "duration": 2254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n})\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.setTime(VOTING_START_DATE - 1);\nawait deployAndTestBallot({\n  _affectedKey: accounts[5],\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nawait voting.setTime(VOTING_START_DATE - 1);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  miningKey,\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "055541cb-98bb-435d-a8a7-fa455b0dbdfb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of MiningKey",
                "timedOut": false,
                "duration": 1463,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.contain(miningKey);\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "bcc73aa7-ece6-4dd3-bf52-24ee95175523",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of MiningKey",
                "timedOut": false,
                "duration": 2051,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "1ee96e5a-c2ad-4c3d-be07-563404c200b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of VotingKey",
                "timedOut": false,
                "duration": 1208,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet votingKeyToAdd = accounts[8];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKeyToAdd, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b2b245f4-5cc7-437e-8beb-9881dea1bedd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of PayoutKey",
                "timedOut": false,
                "duration": 1102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "e881e852-7066-480d-a104-7dfc2af108d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of VotingKey",
                "timedOut": false,
                "duration": 1252,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addVotingKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newVotingKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newVotingKey,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ newVotingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "3bc2b0fc-0806-45ab-bbad-2d569a6e49ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of PayoutKey",
                "timedOut": false,
                "duration": 1220,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newPayoutKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newPayoutKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  newPayoutKey,\n  true,\n  false,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "8b6a6263-9e37-4dc1-93d3-961289c1de55",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of MiningKey",
                "timedOut": false,
                "duration": 1480,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst keysStateNew = await keysManager.validatorKeys.call(affectedKey);\nkeysStateNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nvalidators.should.contain(affectedKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(affectedKey));",
                "err": {},
                "isRoot": false,
                "uuid": "e85c5fbd-13fb-468e-bb54-8172404a9263",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent double finalize",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize prevent double finalize",
                "timedOut": false,
                "duration": 1842,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  2,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nnew web3.BigNumber(3).should.be.bignumber.equal(await voting.getBallotType.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(2).should.be.bignumber.equal(await voting.getBallotType.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond))[9]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond))[8]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId))[8]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "8cacc376-1bd1-49e4-a543-9e737e043ad2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1687,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[4];\nconst affectedKey = accounts[6];\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "2277be1c-481d-4192-850a-6428d1944a51",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "26509800-2b32-40dd-a843-593d16a3dde0",
              "039a3ba8-7846-479f-a8c3-30dc3c85ba82",
              "899bd84e-3282-425e-90f6-c9ccd7447bb9",
              "055541cb-98bb-435d-a8a7-fa455b0dbdfb",
              "bcc73aa7-ece6-4dd3-bf52-24ee95175523",
              "1ee96e5a-c2ad-4c3d-be07-563404c200b8",
              "b2b245f4-5cc7-437e-8beb-9881dea1bedd",
              "e881e852-7066-480d-a104-7dfc2af108d2",
              "3bc2b0fc-0806-45ab-bbad-2d569a6e49ae",
              "8b6a6263-9e37-4dc1-93d3-961289c1de55",
              "e85c5fbd-13fb-468e-bb54-8172404a9263",
              "8cacc376-1bd1-49e4-a543-9e737e043ad2",
              "2277be1c-481d-4192-850a-6428d1944a51"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18359,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "15ac7a69-6819-4aee-b228-3e493ffa9150",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: Voting to change keys [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 2011,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[2],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[7], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[2], // miningKey\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3f1d13fb-f24f-4ed9-9363-7c0245a6c25b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3f1d13fb-f24f-4ed9-9363-7c0245a6c25b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2011,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d2f7406e-b9d2-48a7-a0ba-8abad08ede38",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 172,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await VotingToChangeKeysMock.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c6123254-d316-4050-bad0-b183799b181f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "12e591d3-8d4d-439e-85e4-a7d8f96f0afa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "4e7af63e-0580-4880-b1de-4f1eb28b9146",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "ba81e05f-09b7-4294-9790-2073eaa4c811",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeKeysNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "deae1fd0-5774-40a2-aec8-6709f355f94b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeKeysNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "5ee17e19-6de9-4c75-8e58-977c80041000",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 878,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const payoutKeyToAdd = accounts[0];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  payoutKeyToAdd,\n  accounts[1],\n  {from: votingKey}\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nconst votingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait finalize(votingId, true, {from: votingKey});\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingToChangeKeysNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeKeysNew.at(votingEternalStorage.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(votingId);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  payoutKeyToAdd, // affectedKey\n  new web3.BigNumber(3), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[1], // miningKey\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await votingNew.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await votingNew.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "9c7a8a0a-0cec-4180-abe9-80bb4a61d404",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "12e591d3-8d4d-439e-85e4-a7d8f96f0afa",
              "4e7af63e-0580-4880-b1de-4f1eb28b9146",
              "ba81e05f-09b7-4294-9790-2073eaa4c811",
              "deae1fd0-5774-40a2-aec8-6709f355f94b",
              "5ee17e19-6de9-4c75-8e58-977c80041000",
              "9c7a8a0a-0cec-4180-abe9-80bb4a61d404"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1474,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "09b75109-b4f9-468f-a8a0-56e25a63066a",
        "title": "Contract: Voting to change keys upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
        "file": "/test/voting_to_change_keys_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3943,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "c0a9044e-81e7-4784-adac-f05a0f333270",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1e7101ec-19d2-45ff-bb6e-22572e24a34c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 883,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nminingKeyForVotingKey = accounts[1];\nmasterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvoting = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingEternalStorage.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nlet votingNew = await VotingToChangeKeysMock.new();\nawait votingEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "20922a53-b0cc-4503-9497-9b8e12991384",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "fb8aa4ee-cf2b-4d23-8858-9dcb36adcfd2",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "47088c69-459f-4bdf-b01b-13f88f98e415",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 665,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nlet result = await keysManager.swapMiningKey(accounts[3], accounts[1]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(votingKey, accounts[3]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\n\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[3],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[0].should.be.bignumber.equal(VOTING_START_DATE);\nballotInfo[1].should.be.bignumber.equal(VOTING_END_DATE);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "631aaba4-5a19-4f18-8e59-0c23731a9b5f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create voting with invalid duration",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let create voting with invalid duration",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(10, 'days').unix();\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = 0\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = 0\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0ba10dd6-da2c-4ae9-af62-bbd6df11cf1c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for MoC",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let add votingKey for MoC",
                "timedOut": false,
                "duration": 451,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  masterOfCeremony, // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "e8ce57c7-f32f-4aea-9d08-b4ad2bcebb57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for 0x0",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let add votingKey for 0x0",
                "timedOut": false,
                "duration": 511,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  '0x0000000000000000000000000000000000000000', // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "1953cff0-4d1e-4b31-85c3-c94e38714e52",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add payoutKey for 0x0",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let add payoutKey for 0x0",
                "timedOut": false,
                "duration": 510,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[2],\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "ae7e3fef-794c-4e61-93c3-3562ec2e03a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10471,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); //add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "21ff97b9-7828-4b4e-9af1-e331c8af16ed",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "631aaba4-5a19-4f18-8e59-0c23731a9b5f",
              "0ba10dd6-da2c-4ae9-af62-bbd6df11cf1c",
              "e8ce57c7-f32f-4aea-9d08-b4ad2bcebb57",
              "1953cff0-4d1e-4b31-85c3-c94e38714e52",
              "ae7e3fef-794c-4e61-93c3-3562ec2e03a0",
              "21ff97b9-7828-4b4e-9af1-e331c8af16ed"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12773,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "bcedad9d-1930-40db-9be2-fd52d9b1a0c4",
            "title": "#createBallotToAddNewValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator \"before each\" hook",
                "timedOut": false,
                "duration": 221,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addPayoutKey(accounts[6], miningKeyForVotingKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "9007e018-8344-4b70-aebd-dcde9a39592b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator happy path",
                "timedOut": false,
                "duration": 296,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\n\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[3], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  accounts[4], // newVotingKey\n  accounts[5], // newPayoutKey\n  '0x0000000000000000000000000000000000000000', // miningKey\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(1);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "1720fa66-35f8-4974-b3e5-7f13ed03e7f9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed voting key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator deny adding already existed voting key",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  votingKey,         // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b0691f37-41e0-438f-902e-7c7c4b12ea72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed payout key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator deny adding already existed payout key",
                "timedOut": false,
                "duration": 199,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[6],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "4e648fc6-d7e6-481c-9ef1-950c8f5edcdf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create validator with all keys after finalization",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator should create validator with all keys after finalization",
                "timedOut": false,
                "duration": 1458,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(5);",
                "err": {},
                "isRoot": false,
                "uuid": "d1ef65cf-e767-4b63-afa3-bd02d8d27f2c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow removing new validator if finalizeChange did not happen",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator should allow removing new validator if finalizeChange did not happen",
                "timedOut": false,
                "duration": 2246,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nVOTING_START_DATE = moment.utc().add(20, 'days').unix();\nVOTING_END_DATE = moment.utc().add(30, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  2,                 // _ballotType (KeyRemoval)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[7],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.isPayoutActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getVotingByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getPayoutByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);",
                "err": {},
                "isRoot": false,
                "uuid": "da56e40e-85eb-4a27-810f-b9df6801e333",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1720fa66-35f8-4974-b3e5-7f13ed03e7f9",
              "b0691f37-41e0-438f-902e-7c7c4b12ea72",
              "4e648fc6-d7e6-481c-9ef1-950c8f5edcdf",
              "d1ef65cf-e767-4b63-afa3-bd02d8d27f2c",
              "da56e40e-85eb-4a27-810f-b9df6801e333"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4238,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c4462f23-3465-493d-a562-b9e3477bde4f",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 391,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3], \n  accounts[1],\n  {from: votingKey}\n);",
                "err": {},
                "isRoot": false,
                "uuid": "d16843cb-f3e8-481e-85af-6fc1e9db3277",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 192,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "10659611-2f18-4448-9c89-9a8cfbe66ac7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "4decb8b0-fc6a-45b4-9d0b-30c6feae00dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 930,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, {from: accounts[5]}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "8ef35693-ac09-4090-9490-5fd98074ce71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "885ff9a1-d863-42fa-a4fd-8f2bb9f7b541",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f9e1cb79-cb11-4f6b-a9aa-7dc6c9a5d5f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0d319b95-34a0-4521-afa5-5226ff43a446",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "66dcb442-9b47-4ea5-82ef-1fffca82ac77",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4089a42e-66d1-43dc-8186-4c99e12901c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9616a44a-a328-4fee-a798-61686f83b652",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "10659611-2f18-4448-9c89-9a8cfbe66ac7",
              "4decb8b0-fc6a-45b4-9d0b-30c6feae00dc",
              "8ef35693-ac09-4090-9490-5fd98074ce71",
              "885ff9a1-d863-42fa-a4fd-8f2bb9f7b541",
              "f9e1cb79-cb11-4f6b-a9aa-7dc6c9a5d5f4",
              "0d319b95-34a0-4521-afa5-5226ff43a446",
              "66dcb442-9b47-4ea5-82ef-1fffca82ac77",
              "4089a42e-66d1-43dc-8186-4c99e12901c3",
              "9616a44a-a328-4fee-a798-61686f83b652"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2216,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2456802e-c02e-4dac-b402-f4af0d5dbaf4",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 462,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey  = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "e3548016-ccd6-4e4e-b2b2-aa7ad91ea384",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path - no action since it did not meet minimum number of totalVoters",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize happy path - no action since it did not meet minimum number of totalVoters",
                "timedOut": false,
                "duration": 724,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  payoutKeyToAdd,\n  accounts[1],\n  {from: votingKey}\n);\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 1);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(votingId).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  payoutKeyToAdd, // affectedKey\n  new web3.BigNumber(3), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[1], // miningKey\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\n\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey)\n);\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "6fa3163f-a634-4221-b72e-44b9cdd15708",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of payout key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize addition of payout key",
                "timedOut": false,
                "duration": 1133,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait deployAndTestBallot({\n  _affectedKey: payoutKeyToAdd,\n  _affectedKeyType: 3,\n  _miningKey: accounts[1],\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  payoutKeyToAdd,\n  true,\n  true,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "ca99d6a7-4f62-4e04-a989-8bf2f7b56e33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of VotingKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize addition of VotingKey",
                "timedOut": false,
                "duration": 1115,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\nlet votingKeyToAdd = accounts[8];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ votingKeyToAdd,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "05f6a293-4505-470b-8b39-82dcc2bc8d59",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create ballot for using previous mining key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize cannot create ballot for using previous mining key",
                "timedOut": false,
                "duration": 2399,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n})\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.setTime(VOTING_START_DATE - 1);\nawait deployAndTestBallot({\n  _affectedKey: accounts[5],\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nawait voting.setTime(VOTING_START_DATE - 1);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  miningKey,\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "111e8195-59f1-4113-b36e-6a1a7e810774",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of MiningKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize addition of MiningKey",
                "timedOut": false,
                "duration": 1244,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.contain(miningKey);\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "c905f6b4-079c-457b-9ba9-82b2b7dd2d59",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of MiningKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize removal of MiningKey",
                "timedOut": false,
                "duration": 2053,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "b93a6091-2baa-46a0-a038-565f6a99c918",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of VotingKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize removal of VotingKey",
                "timedOut": false,
                "duration": 1162,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet votingKeyToAdd = accounts[8];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKeyToAdd, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "9929ac80-3727-4854-9199-7e3ebe2d7fb1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of PayoutKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize removal of PayoutKey",
                "timedOut": false,
                "duration": 1193,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b5a31ba1-a971-4ce3-bb7e-54d874804374",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of VotingKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize swap of VotingKey",
                "timedOut": false,
                "duration": 1301,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addVotingKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newVotingKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newVotingKey,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ newVotingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "5fd97fe2-eae0-4613-8c6a-5f55ad72a0b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of PayoutKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize swap of PayoutKey",
                "timedOut": false,
                "duration": 1192,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newPayoutKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newPayoutKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  newPayoutKey,\n  true,\n  false,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "8ec184ca-e0f8-4125-bc0b-f70ab4d93bbf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of MiningKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize swap of MiningKey",
                "timedOut": false,
                "duration": 1422,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst keysStateNew = await keysManager.validatorKeys.call(affectedKey);\nkeysStateNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nvalidators.should.contain(affectedKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(affectedKey));",
                "err": {},
                "isRoot": false,
                "uuid": "5bd25e3a-241c-4fe2-a3ea-d1d50606b8cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent double finalize",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize prevent double finalize",
                "timedOut": false,
                "duration": 1953,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  2,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nnew web3.BigNumber(3).should.be.bignumber.equal(await voting.getBallotType.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(2).should.be.bignumber.equal(await voting.getBallotType.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond))[9]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond))[8]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId))[8]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "c49a140b-4ce2-42bd-926e-5aef6852630c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1745,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[4];\nconst affectedKey = accounts[6];\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "715de2dc-59fd-45ed-8f1a-1465a7a15382",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6fa3163f-a634-4221-b72e-44b9cdd15708",
              "ca99d6a7-4f62-4e04-a989-8bf2f7b56e33",
              "05f6a293-4505-470b-8b39-82dcc2bc8d59",
              "111e8195-59f1-4113-b36e-6a1a7e810774",
              "c905f6b4-079c-457b-9ba9-82b2b7dd2d59",
              "b93a6091-2baa-46a0-a038-565f6a99c918",
              "9929ac80-3727-4854-9199-7e3ebe2d7fb1",
              "b5a31ba1-a971-4ce3-bb7e-54d874804374",
              "5fd97fe2-eae0-4613-8c6a-5f55ad72a0b1",
              "8ec184ca-e0f8-4125-bc0b-f70ab4d93bbf",
              "5bd25e3a-241c-4fe2-a3ea-d1d50606b8cf",
              "c49a140b-4ce2-42bd-926e-5aef6852630c",
              "715de2dc-59fd-45ed-8f1a-1465a7a15382"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18636,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "435e697d-ac76-45a0-9922-268f5d4b70ef",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 2064,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[2],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[7], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[2], // miningKey\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c58eb7d0-f923-4c56-b4fb-7b76582551e5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c58eb7d0-f923-4c56-b4fb-7b76582551e5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2064,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "44b9ab08-18f0-4b48-a84f-1c6b1400d488",
        "title": "Contract: VotingToChangeMinThreshold [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
        "file": "/test/voting_to_change_min_threshold_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3665,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "3fe8d206-fc49-4ce0-b343-55b97d3e439a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "28cee945-8db3-4fec-9901-6ded2a316e89",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1479,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nvoting = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await Voting.at(votingEternalStorage.address);\nawait voting.init(172800, 0).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800, 3).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  voting.address,\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\n\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait addMiningKey(accounts[7]);\nawait addMiningKey(accounts[8]);\nawait addMiningKey(accounts[9]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "77105044-6b35-4410-bf4c-38cee3c6c8da",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "494366a2-41bf-4932-b28b-2fc25d2671a8",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "f60f82c3-f715-4619-9b15-194cc001853d",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 13,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "b165440a-0c8a-4886-9af9-870d8535267b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey});\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "55d49b70-8a09-4d96-94dd-07fc26a3fa86",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should be more than or equal to 3",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot proposed value should be more than or equal to 3",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "28c386f7-9586-4bba-b6ed-1afbc1bbeabc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should not be equal to the same value",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot proposed value should not be equal to the same value",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 3,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "df5cf672-ffbe-4c16-92c4-ee9a121190a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10699,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\n// we have 6 validators, so 200 limit / 6 = 33.3 ~ 33\nnew web3.BigNumber(33).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 106 validators\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "31947f07-59fd-4b7f-9ac5-43b28edca760",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "55d49b70-8a09-4d96-94dd-07fc26a3fa86",
              "28c386f7-9586-4bba-b6ed-1afbc1bbeabc",
              "df5cf672-ffbe-4c16-92c4-ee9a121190a5",
              "31947f07-59fd-4b7f-9ac5-43b28edca760"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10997,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e67244c3-de4e-41d4-bd12-ba4dd7c4f8b8",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 180,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "8231d1f3-cec3-4ef4-88d9-397411250045",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 211,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "04bb59f8-3aa0-4e18-a283-4dac2daa0d7b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 216,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "01e6917e-137b-4765-b860-8220b9439ae6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 546,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\n// add new voter\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait voting.vote(id, choice.accept, {from: votingKey3}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "4caf5055-183a-4303-b7e5-1f699a347a9e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5e9927af-62be-436a-81cc-e19652a53eb5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3847e15a-d1d6-43aa-82e6-4c02e9b5dc32",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c00cd812-d7db-4904-af40-1ab7ad9a1d9f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 194,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e95fad3e-0da3-4341-abee-a7668fb9ddbb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b0c461b8-5df5-4012-a4a5-b6ff8e1963e9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "569e1445-8e3c-4604-bf91-65497e290521",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "04bb59f8-3aa0-4e18-a283-4dac2daa0d7b",
              "01e6917e-137b-4765-b860-8220b9439ae6",
              "4caf5055-183a-4303-b7e5-1f699a347a9e",
              "5e9927af-62be-436a-81cc-e19652a53eb5",
              "3847e15a-d1d6-43aa-82e6-4c02e9b5dc32",
              "c00cd812-d7db-4904-af40-1ab7ad9a1d9f",
              "e95fad3e-0da3-4341-abee-a7668fb9ddbb",
              "b0c461b8-5df5-4012-a4a5-b6ff8e1963e9",
              "569e1445-8e3c-4604-bf91-65497e290521"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1856,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "69ef7c1e-e289-4978-9990-0e2dccf61357",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "payoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();",
                "err": {},
                "isRoot": false,
                "uuid": "64b1973c-af9e-4ef6-94d3-a3cb59d928e5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 553,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "95e4fd0d-1190-4fa3-9e0d-6d4cad4c1e59",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change to proposedValue when quorum is reached",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize should change to proposedValue when quorum is reached",
                "timedOut": false,
                "duration": 1362,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.reject, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey2)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey3)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(proposedValue);\nlet votingForKeys = await VotingForKeys.new();\nconst votingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800);\nawait votingForKeys.migrateDisable();\nconst nextId = await votingForKeys.nextBallotId.call();\nawait votingForKeys.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[1],\n  {from: votingKey}\n);\nconst minThresholdVotingForKeys = await votingForKeys.getMinThresholdOfVoters.call(nextId);\nminThresholdVotingForKeys.should.be.bignumber.equal(proposedValue);",
                "err": {},
                "isRoot": false,
                "uuid": "927956df-eb1c-4436-9fb6-57ddfddd8451",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1889,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue1 = 4;\nlet proposedValue2 = 5;\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue1, \"memo\",{from: votingKey});\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9\");\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85d9\");\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(VOTING_START_DATE+2, VOTING_END_DATE+2, proposedValue2, \"memo\",{from: votingKey});\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(4).should.be.bignumber.equal(await voting.getProposedValue.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(5).should.be.bignumber.equal(await voting.getProposedValue.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[4]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId, votingKey))[3]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "da8116c0-9408-4085-84bb-a0091c6a4c3c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 2200,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "ff714367-7893-4e9d-a4f0-347820ed241d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease validator limit only once when calling finalize more than once",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize should decrease validator limit only once when calling finalize more than once",
                "timedOut": false,
                "duration": 1511,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait ballotsStorage.setThresholdMock(1, 1);\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(2);\n\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait ballotsStorage.setThresholdMock(2, 1);\nawait voting.setTime(VOTING_END_DATE + 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nawait ballotsStorage.setThresholdMock(1, 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs[0].event.should.equal(\"BallotFinalized\");\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(true);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "0c986a54-f87f-447b-8695-fccf90fc952b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "95e4fd0d-1190-4fa3-9e0d-6d4cad4c1e59",
              "927956df-eb1c-4436-9fb6-57ddfddd8451",
              "da8116c0-9408-4085-84bb-a0091c6a4c3c",
              "ff714367-7893-4e9d-a4f0-347820ed241d",
              "0c986a54-f87f-447b-8695-fccf90fc952b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7515,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3e9b72f3-02f7-48a0-b493-fa20d110a65e",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 1504,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey3}).should.be.fulfilled;\nlet votingNew = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await Voting.at(votingEternalStorage.address);\nawait votingNew.init(172800, 3).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[2], accounts[4]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(true);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f9b86bcc-dc38-492f-b8c0-e5b067eb353e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f9b86bcc-dc38-492f-b8c0-e5b067eb353e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1504,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f79cd767-1b58-4499-a717-37c8fae9270c",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 234,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await Voting.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await Voting.at(votingEternalStorage.address);\nawait voting.init(172800, 3).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "0142f44e-2dde-40cd-b6d8-b01c98a189c0",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "a57e1d3b-605a-41b1-8a48-fe52a21fbb01",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "196d196f-6231-4f16-8f6c-c7715416f142",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "9ecce80d-0e93-4c5c-96f4-6279d6662150",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "cf7db4ac-20f8-488f-b895-b3fe42693eca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "ab4af37b-837f-4bcc-a506-e0e55aa8f1e7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 418,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey}).should.be.fulfilled;\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingNew.at(votingEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "b3e88084-bc90-4357-b57c-c206386019b5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a57e1d3b-605a-41b1-8a48-fe52a21fbb01",
              "196d196f-6231-4f16-8f6c-c7715416f142",
              "9ecce80d-0e93-4c5c-96f4-6279d6662150",
              "cf7db4ac-20f8-488f-b895-b3fe42693eca",
              "ab4af37b-837f-4bcc-a506-e0e55aa8f1e7",
              "b3e88084-bc90-4357-b57c-c206386019b5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 923,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e2a64e60-bf53-4056-b2bd-3c1eb15e8127",
        "title": "Contract: VotingToChangeMinThreshold upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
        "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3088,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "98376475-f76f-4b1d-b20c-1eb8cb133eaf",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8ee7812d-d4f1-44c7-aa86-bf4306e87b5c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1569,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nvoting = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await Voting.at(votingEternalStorage.address);\nawait voting.init(172800, 0).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800, 3).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nconst votingNew = await VotingNew.new();\nawait votingEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingNew.at(votingEternalStorage.address);\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  voting.address,\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\n\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait addMiningKey(accounts[7]);\nawait addMiningKey(accounts[8]);\nawait addMiningKey(accounts[9]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "7bf42916-7a2a-48da-8a4d-2f232f430bf5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0044a752-a2ec-4898-a249-728669626793",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "6bf1c838-2758-46cc-b7db-79ba832b84ea",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 13,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "b579a96d-7c64-4a62-a348-b02d3e232167",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey});\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "6a2fe55e-afac-4996-90a7-63b14f3e053c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should be more than or equal to 3",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot proposed value should be more than or equal to 3",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "30fbcf95-7729-4520-abcd-d93b84e2115b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should not be equal to the same value",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot proposed value should not be equal to the same value",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 3,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c25cc5f9-7cff-4cf1-b852-afa20623120a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10651,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\n// we have 6 validators, so 200 limit / 6 = 33.3 ~ 33\nnew web3.BigNumber(33).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 106 validators\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "c23edee4-804b-4fb7-95cf-2f272edc8f3e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6a2fe55e-afac-4996-90a7-63b14f3e053c",
              "30fbcf95-7729-4520-abcd-d93b84e2115b",
              "c25cc5f9-7cff-4cf1-b852-afa20623120a",
              "c23edee4-804b-4fb7-95cf-2f272edc8f3e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10971,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "66f7534b-9013-4a57-a1ed-b453b1a7da5a",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 165,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "d787f916-ef76-4213-8004-6876bd5c8db4",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "28a61b5a-2bc1-4eb6-8cbb-8d74ce75c26d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 209,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "134cf4d3-c6f3-4b13-90bb-c3ef7feceda5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 506,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\n// add new voter\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait voting.vote(id, choice.accept, {from: votingKey3}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "65e9f89e-5b51-4dae-a1ae-684c84de4bc3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d46cfd88-9e48-4324-84ac-24cba2d7e781",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2cdeed7f-61bd-4680-aa82-4ba6df8a5f41",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "871ab0ac-0915-49ce-a742-051686738b6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 203,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5accc034-06db-4003-8d00-8ad092c6e6cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d9b4a062-f8fe-4b2a-830c-57a7d4d57a20",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4ea79e09-8554-4ba9-841d-4fb6a40ae8db",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "28a61b5a-2bc1-4eb6-8cbb-8d74ce75c26d",
              "134cf4d3-c6f3-4b13-90bb-c3ef7feceda5",
              "65e9f89e-5b51-4dae-a1ae-684c84de4bc3",
              "d46cfd88-9e48-4324-84ac-24cba2d7e781",
              "2cdeed7f-61bd-4680-aa82-4ba6df8a5f41",
              "871ab0ac-0915-49ce-a742-051686738b6d",
              "5accc034-06db-4003-8d00-8ad092c6e6cb",
              "d9b4a062-f8fe-4b2a-830c-57a7d4d57a20",
              "4ea79e09-8554-4ba9-841d-4fb6a40ae8db"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1722,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "488007e4-f78d-4e06-9a76-1ee3414ae5d3",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "payoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();",
                "err": {},
                "isRoot": false,
                "uuid": "12d64f05-a92d-40c7-9761-fc2e939a6572",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 551,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "0c545552-0e14-43d2-8a65-fe2b30960cf3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change to proposedValue when quorum is reached",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize should change to proposedValue when quorum is reached",
                "timedOut": false,
                "duration": 1553,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.reject, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey2)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey3)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(proposedValue);\nlet votingForKeys = await VotingForKeys.new();\nconst votingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800);\nawait votingForKeys.migrateDisable();\nconst nextId = await votingForKeys.nextBallotId.call();\nawait votingForKeys.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[1],\n  {from: votingKey}\n);\nconst minThresholdVotingForKeys = await votingForKeys.getMinThresholdOfVoters.call(nextId);\nminThresholdVotingForKeys.should.be.bignumber.equal(proposedValue);",
                "err": {},
                "isRoot": false,
                "uuid": "97023cc6-54d1-4f70-8716-dd162e1f2c65",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1922,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue1 = 4;\nlet proposedValue2 = 5;\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue1, \"memo\",{from: votingKey});\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9\");\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85d9\");\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(VOTING_START_DATE+2, VOTING_END_DATE+2, proposedValue2, \"memo\",{from: votingKey});\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(4).should.be.bignumber.equal(await voting.getProposedValue.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(5).should.be.bignumber.equal(await voting.getProposedValue.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[4]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId, votingKey))[3]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "5e7de3bc-9691-4df7-a082-be7494b45833",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 2134,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "28640baf-b418-484e-b07c-83a8e6d6b397",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease validator limit only once when calling finalize more than once",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize should decrease validator limit only once when calling finalize more than once",
                "timedOut": false,
                "duration": 1548,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait ballotsStorage.setThresholdMock(1, 1);\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(2);\n\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait ballotsStorage.setThresholdMock(2, 1);\nawait voting.setTime(VOTING_END_DATE + 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nawait ballotsStorage.setThresholdMock(1, 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs[0].event.should.equal(\"BallotFinalized\");\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(true);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "ff375c33-9e89-459d-b11d-5f5a0732dd57",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0c545552-0e14-43d2-8a65-fe2b30960cf3",
              "97023cc6-54d1-4f70-8716-dd162e1f2c65",
              "5e7de3bc-9691-4df7-a082-be7494b45833",
              "28640baf-b418-484e-b07c-83a8e6d6b397",
              "ff375c33-9e89-459d-b11d-5f5a0732dd57"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7708,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "53704024-0095-4858-8f2e-2d0f2174d5a9",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 1627,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey3}).should.be.fulfilled;\nlet votingNew = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await Voting.at(votingEternalStorage.address);\nawait votingNew.init(172800, 3).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[2], accounts[4]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(true);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3c43f8fd-3a0b-4969-9e76-3eaffe3863f5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3c43f8fd-3a0b-4969-9e76-3eaffe3863f5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1627,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1bdeec64-0c5a-4805-b092-353cac03cef1",
        "title": "Contract: VotingToChangeProxyAddress [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
        "file": "/test/voting_to_change_proxy_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 2794,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "500a2a04-82cc-42fb-891e-639fdd67927d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ba887d48-be47-4f41-8198-2415508197c0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1164,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForEmissionFunds = await VotingForEmissionFunds.new();\nconst votingForEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForEmissionFunds.address);\nvotingForEmissionFunds = await VotingForEmissionFunds.at(votingForEmissionFundsEternalStorage.address);\n\nvoting = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait voting.init(172800, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nlet rewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingEternalStorage.address,\n  votingForEmissionFunds.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock.address\n);",
            "err": {},
            "isRoot": false,
            "uuid": "06c357ca-59aa-4e5a-809a-3a6abbab1d01",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3f362e2d-9f5f-422e-be5f-2aeabe7530b2",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "4476136f-ef45-4805-94ca-84db42aa4452",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 174,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "866db627-1132-4ca7-868c-315c45b2d764",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 298,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "a8b66a81-4761-48d4-b92f-1610e981d58f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed address should not be 0x0",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot proposed address should not be 0x0",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  '0x0000000000000000000000000000000000000000',\n  { from: votingKey }\n).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f77759cc-c0ad-4827-b429-a4bfb1589b15",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can create multiple ballots",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot can create multiple ballots",
                "timedOut": false,
                "duration": 488,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const { logs } = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE + 1,\n  VOTING_END_DATE + 1,\n  2,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst ballotInfo = await voting.getBallotInfo.call(nextBallotId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+1), // startTime\n  new web3.BigNumber(VOTING_END_DATE+1), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(nextBallotId)).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "e73aa3da-001f-4a1b-b71e-7224c8b95ebb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10118,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\n// we have 1 validator, so 200 limit / 1 = 200\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "f2910db7-8f93-478f-b7d9-d87e3df11159",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a8b66a81-4761-48d4-b92f-1610e981d58f",
              "f77759cc-c0ad-4827-b429-a4bfb1589b15",
              "e73aa3da-001f-4a1b-b71e-7224c8b95ebb",
              "f2910db7-8f93-478f-b7d9-d87e3df11159"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10926,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "309f9c60-5248-489b-a3f4-f2af14e95674",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 370,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);",
                "err": {},
                "isRoot": false,
                "uuid": "4bb6d031-4ee7-471f-9a7f-87aab9b89565",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.accept, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "926b100d-0b96-4e44-afd9-a77a632ccdef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 196,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "a4edcd2a-a207-4686-a662-76f4058b7acd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 854,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, { from: accounts[3] }).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, { from: accounts[4] }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, { from: accounts[5] }).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "3cc31f3b-f7fc-47d9-8da5-fff2155f6398",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: accounts[0] }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4358681e-5ea1-43a6-b421-751eee718a14",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f34da936-e45e-47a4-8b7b-adb0dee84a37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a8d46763-86a0-4a2d-8f50-08b546e07615",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 281,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2c632562-7188-4dd8-acf4-c1770917e831",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "77df3ddc-9b86-4b43-ab50-5670be66507f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3b10b432-c8cc-4b06-bc09-5e4fa5fdc680",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "926b100d-0b96-4e44-afd9-a77a632ccdef",
              "a4edcd2a-a207-4686-a662-76f4058b7acd",
              "3cc31f3b-f7fc-47d9-8da5-fff2155f6398",
              "4358681e-5ea1-43a6-b421-751eee718a14",
              "f34da936-e45e-47a4-8b7b-adb0dee84a37",
              "a8d46763-86a0-4a2d-8f50-08b546e07615",
              "2c632562-7188-4dd8-acf4-c1770917e831",
              "77df3ddc-9b86-4b43-ab50-5670be66507f",
              "3b10b432-c8cc-4b06-bc09-5e4fa5fdc680"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2122,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d21ecca6-a6f6-4324-b4e3-5e2edb2b6f45",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 550,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[5];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[6]);\nawait addVotingKey(votingKey2, accounts[6]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "95ccb207-da57-4a5b-b274-f7dce2227b93",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 669,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 5;\nlet contractType = 1; //keysManager\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst { logs } = await voting.finalize(votingId, { from: votingKey });\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(contractType), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "c9a48fbc-5a12-48a6-9d60-4aa70a6b36c6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change KeysManager implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change KeysManager implementation",
                "timedOut": false,
                "duration": 898,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 1;\nlet keysManagerNew = await KeysManagerMock.new();\nlet newAddress = keysManagerNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "a140a382-53d7-4da1-a873-0d6ae3379c9c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeKeys implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change VotingToChangeKeys implementation",
                "timedOut": false,
                "duration": 1100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 2;\nlet votingToChangeKeysNew = await VotingForKeys.new();\nlet newAddress = votingToChangeKeysNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "08c6e2cc-df3b-4981-bab0-5741f539eab3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeMinThreshold implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change VotingToChangeMinThreshold implementation",
                "timedOut": false,
                "duration": 1134,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 3;\nlet votingToChangeMinThresholdNew = await VotingForMinThreshold.new();\nlet newAddress = votingToChangeMinThresholdNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "201f53db-925e-4140-8eaa-a949421268f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeProxy implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change VotingToChangeProxy implementation",
                "timedOut": false,
                "duration": 1219,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 4;\nlet votingToChangeProxyNew = await VotingToChangeProxyAddress.new();\nlet newAddress = votingToChangeProxyNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeProxy.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "a48949fa-0ba4-44c4-8808-838d271e9173",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change BallotsStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change BallotsStorage implementation",
                "timedOut": false,
                "duration": 1165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 5;\nlet ballotsStorageNew = await BallotsStorage.new();\nlet newAddress = ballotsStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "b90a9966-3550-49c7-86b6-5b2cd0989bd5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ValidatorMetadata implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change ValidatorMetadata implementation",
                "timedOut": false,
                "duration": 941,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 7;\nlet validatorMetadataNew = await ValidatorMetadata.new();\nlet newAddress = validatorMetadataNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "cec6a82d-88bc-4fc3-bf25-ae54813e8309",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ProxyStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change ProxyStorage implementation",
                "timedOut": false,
                "duration": 945,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const contractType = 8;\nconst proxyStorageNew = await ProxyStorageMock.new();\nconst newAddress = proxyStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageEternalStorage.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "2c52f1a7-df27-48cd-b0e9-342020f577e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change RewardByBlock implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change RewardByBlock implementation",
                "timedOut": false,
                "duration": 1044,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const contractType = 9;\nconst rewardByBlockNew = await RewardByBlock.new();\nconst newAddress = rewardByBlockNew.address;\nawait deployAndTest({contractType, newAddress})\nconst eternalProxyAddress = await proxyStorageMock.getRewardByBlock.call();\nconst eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "435b84e5-1fb7-4d93-b9de-cb3d0607a602",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1537,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newAddress1 = accounts[4];\nlet newAddress2 = accounts[5];\nlet contractType1 = 100;\nlet contractType2 = 101;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType1,\n  \"memo\",\n  newAddress1,\n  { from: votingKey }\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  contractType2,\n  \"memo\",\n  newAddress2,\n  { from: votingKey }\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\n\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal(await voting.getIsFinalized.call(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nlet ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress1, // proposedValue\n  new web3.BigNumber(contractType1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nballotInfo = await voting.getBallotInfo.call(votingIdForSecond, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+2), // startTime\n  new web3.BigNumber(VOTING_END_DATE+2), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress2, // proposedValue\n  new web3.BigNumber(contractType2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingIdForSecond)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingIdForSecond)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingIdForSecond)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "462c6dec-3e3d-44b6-9d82-e1139423816c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1658,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[7],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[8],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "fcd7935c-adfa-4a15-93e2-bd40fa370f9d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c9a48fbc-5a12-48a6-9d60-4aa70a6b36c6",
              "a140a382-53d7-4da1-a873-0d6ae3379c9c",
              "08c6e2cc-df3b-4981-bab0-5741f539eab3",
              "201f53db-925e-4140-8eaa-a949421268f4",
              "a48949fa-0ba4-44c4-8808-838d271e9173",
              "b90a9966-3550-49c7-86b6-5b2cd0989bd5",
              "cec6a82d-88bc-4fc3-bf25-ae54813e8309",
              "2c52f1a7-df27-48cd-b0e9-342020f577e3",
              "435b84e5-1fb7-4d93-b9de-cb3d0607a602",
              "462c6dec-3e3d-44b6-9d82-e1139423816c",
              "fcd7935c-adfa-4a15-93e2-bd40fa370f9d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12310,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3d148ef0-5768-47c2-80f3-e94aa61870c1",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 2053,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[7],\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\n\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  accounts[7], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0907018a-de69-41a5-b277-d9892a057490",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0907018a-de69-41a5-b277-d9892a057490"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2053,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f66be069-4750-4274-afd5-f23f5c83b3b2",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 142,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await VotingToChangeProxyAddress.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "66af9734-615d-4953-a9e2-975cd75d2020",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "801ecb58-58d7-4a8e-a1a9-dbf687c8bc42",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "cb8170e3-ecef-4597-9abd-9143ad49bb2c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "288dff40-a4d6-413b-b7c4-71a1623c174e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "4fa4dbcc-7657-414a-8b03-bc0ba6e9872e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "aa4829e8-b717-4536-9454-af3839ff0be3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 646,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n).should.be.fulfilled;\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingToChangeProxyAddressNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "a8b007d0-d760-49f1-8d2b-4671e49e3147",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "801ecb58-58d7-4a8e-a1a9-dbf687c8bc42",
              "cb8170e3-ecef-4597-9abd-9143ad49bb2c",
              "288dff40-a4d6-413b-b7c4-71a1623c174e",
              "4fa4dbcc-7657-414a-8b03-bc0ba6e9872e",
              "aa4829e8-b717-4536-9454-af3839ff0be3",
              "a8b007d0-d760-49f1-8d2b-4671e49e3147"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1148,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d6836d43-02ed-4192-851c-1bf405cb4991",
        "title": "Contract: VotingToChangeProxyAddress upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
        "file": "/test/voting_to_change_proxy_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 4105,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "3a8a3dc3-06d0-4a63-8858-7c47526d0354",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d03a01f2-8009-4048-b513-0c720b825aec",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1284,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForEmissionFunds = await VotingForEmissionFunds.new();\nconst votingForEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForEmissionFunds.address);\nvotingForEmissionFunds = await VotingForEmissionFunds.at(votingForEmissionFundsEternalStorage.address);\n\nvoting = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait voting.init(172800, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nvotingNew = await VotingToChangeProxyAddressNew.new();\nawait votingEternalStorage.setProxyStorage(accounts[7]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[7]}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nlet rewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingEternalStorage.address,\n  votingForEmissionFunds.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock.address\n);",
            "err": {},
            "isRoot": false,
            "uuid": "83bc6f2b-f95f-4a69-8da8-d433f280ed65",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "62bd3e69-41c6-42f7-9ab5-c1821f32dddc",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "368c6179-71d3-4f37-add2-42b64e0dd204",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 169,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "9390fbe0-df26-425b-ad58-78301f1b53eb",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "a3053d86-93a9-4d7a-8e51-34aa476df31e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed address should not be 0x0",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot proposed address should not be 0x0",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  '0x0000000000000000000000000000000000000000',\n  { from: votingKey }\n).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8add0dee-ed33-48c7-8fb0-176763394ac3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can create multiple ballots",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot can create multiple ballots",
                "timedOut": false,
                "duration": 452,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const { logs } = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE + 1,\n  VOTING_END_DATE + 1,\n  2,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst ballotInfo = await voting.getBallotInfo.call(nextBallotId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+1), // startTime\n  new web3.BigNumber(VOTING_END_DATE+1), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(nextBallotId)).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "c954101b-0f19-46d4-b529-4581c8704930",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10450,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\n// we have 1 validator, so 200 limit / 1 = 200\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "e9442a6d-315a-4728-80a4-d4f09046e2cd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a3053d86-93a9-4d7a-8e51-34aa476df31e",
              "8add0dee-ed33-48c7-8fb0-176763394ac3",
              "c954101b-0f19-46d4-b529-4581c8704930",
              "e9442a6d-315a-4728-80a4-d4f09046e2cd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11180,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4f065e97-6457-4825-b695-3206b4c4a853",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 395,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);",
                "err": {},
                "isRoot": false,
                "uuid": "fe11967a-2148-48c2-81dd-470697cde52e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 208,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.accept, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "16e26ba9-e878-4bb6-86cd-c9d30856a45d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 194,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "bfd96f82-3da3-49cc-9603-cdfef8dc9593",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 839,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, { from: accounts[3] }).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, { from: accounts[4] }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, { from: accounts[5] }).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "7d71c473-00de-4378-8d7c-153c8f68f4cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: accounts[0] }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3a5bd71e-6aad-44a6-8b03-13cd8fc76f22",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ebc37088-4a51-4855-b84c-883067f9ba90",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f9170de1-b3bd-47c3-9e89-15bdf39db1f5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "fcdbef30-34c7-4e94-b975-64c81460182e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "91cd5bfb-e001-4f45-8eec-3cc43931b19f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b54b5404-81bc-43cf-bf01-bf8464fbc725",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "16e26ba9-e878-4bb6-86cd-c9d30856a45d",
              "bfd96f82-3da3-49cc-9603-cdfef8dc9593",
              "7d71c473-00de-4378-8d7c-153c8f68f4cb",
              "3a5bd71e-6aad-44a6-8b03-13cd8fc76f22",
              "ebc37088-4a51-4855-b84c-883067f9ba90",
              "f9170de1-b3bd-47c3-9e89-15bdf39db1f5",
              "fcdbef30-34c7-4e94-b975-64c81460182e",
              "91cd5bfb-e001-4f45-8eec-3cc43931b19f",
              "b54b5404-81bc-43cf-bf01-bf8464fbc725"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2028,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ac0d1762-6959-47cb-8e70-42771cea9bcc",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 488,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[5];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[6]);\nawait addVotingKey(votingKey2, accounts[6]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "40d79518-c639-4861-a5cc-051fd7da0389",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 642,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 5;\nlet contractType = 1; //keysManager\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst { logs } = await voting.finalize(votingId, { from: votingKey });\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(contractType), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "f0e04b1a-fe8a-43a2-8c47-4e97cd98d019",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change KeysManager implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change KeysManager implementation",
                "timedOut": false,
                "duration": 979,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 1;\nlet keysManagerNew = await KeysManagerMock.new();\nlet newAddress = keysManagerNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "fac567d6-28e0-47d2-89a9-a22efd842bef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeKeys implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change VotingToChangeKeys implementation",
                "timedOut": false,
                "duration": 1080,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 2;\nlet votingToChangeKeysNew = await VotingForKeys.new();\nlet newAddress = votingToChangeKeysNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "c683e0ba-c45b-433c-9558-c74208ce4e85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeMinThreshold implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change VotingToChangeMinThreshold implementation",
                "timedOut": false,
                "duration": 1124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 3;\nlet votingToChangeMinThresholdNew = await VotingForMinThreshold.new();\nlet newAddress = votingToChangeMinThresholdNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "d00b2e0c-42e3-4f08-ac7a-1f106ea38ae9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeProxy implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change VotingToChangeProxy implementation",
                "timedOut": false,
                "duration": 1031,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 4;\nlet votingToChangeProxyNew = await VotingToChangeProxyAddress.new();\nlet newAddress = votingToChangeProxyNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeProxy.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "9c6e504f-8fb8-466c-851e-e04f24e88a4e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change BallotsStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change BallotsStorage implementation",
                "timedOut": false,
                "duration": 1152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 5;\nlet ballotsStorageNew = await BallotsStorage.new();\nlet newAddress = ballotsStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "20a74924-491b-457f-ab57-cb566b16783b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ValidatorMetadata implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change ValidatorMetadata implementation",
                "timedOut": false,
                "duration": 1064,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 7;\nlet validatorMetadataNew = await ValidatorMetadata.new();\nlet newAddress = validatorMetadataNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "d8f4dde5-ee48-4449-a4f0-c4eb5361ceb7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ProxyStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change ProxyStorage implementation",
                "timedOut": false,
                "duration": 1059,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const contractType = 8;\nconst proxyStorageNew = await ProxyStorageMock.new();\nconst newAddress = proxyStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageEternalStorage.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "79d9fbb9-b276-4ca5-95a4-c9c6515cd368",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change RewardByBlock implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change RewardByBlock implementation",
                "timedOut": false,
                "duration": 1071,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const contractType = 9;\nconst rewardByBlockNew = await RewardByBlock.new();\nconst newAddress = rewardByBlockNew.address;\nawait deployAndTest({contractType, newAddress})\nconst eternalProxyAddress = await proxyStorageMock.getRewardByBlock.call();\nconst eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "62ee3802-db52-4f62-9a4d-72fccf0d6b4b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1518,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newAddress1 = accounts[4];\nlet newAddress2 = accounts[5];\nlet contractType1 = 100;\nlet contractType2 = 101;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType1,\n  \"memo\",\n  newAddress1,\n  { from: votingKey }\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  contractType2,\n  \"memo\",\n  newAddress2,\n  { from: votingKey }\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\n\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal(await voting.getIsFinalized.call(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nlet ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress1, // proposedValue\n  new web3.BigNumber(contractType1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nballotInfo = await voting.getBallotInfo.call(votingIdForSecond, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+2), // startTime\n  new web3.BigNumber(VOTING_END_DATE+2), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress2, // proposedValue\n  new web3.BigNumber(contractType2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingIdForSecond)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingIdForSecond)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingIdForSecond)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "f633d053-1091-4195-9c12-ef54b8b759f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1726,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[7],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[8],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "4b1fd278-1283-4f8d-b043-531da533a637",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f0e04b1a-fe8a-43a2-8c47-4e97cd98d019",
              "fac567d6-28e0-47d2-89a9-a22efd842bef",
              "c683e0ba-c45b-433c-9558-c74208ce4e85",
              "d00b2e0c-42e3-4f08-ac7a-1f106ea38ae9",
              "9c6e504f-8fb8-466c-851e-e04f24e88a4e",
              "20a74924-491b-457f-ab57-cb566b16783b",
              "d8f4dde5-ee48-4449-a4f0-c4eb5361ceb7",
              "79d9fbb9-b276-4ca5-95a4-c9c6515cd368",
              "62ee3802-db52-4f62-9a4d-72fccf0d6b4b",
              "f633d053-1091-4195-9c12-ef54b8b759f4",
              "4b1fd278-1283-4f8d-b043-531da533a637"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12446,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0b617468-7a13-4ee5-b8a0-9d024a7c8027",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 2283,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[7],\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\n\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  accounts[7], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ced3d37b-d7f6-40d8-aee5-bbe9f3ab1172",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ced3d37b-d7f6-40d8-aee5-bbe9f3ab1172"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2283,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d046c88f-e22d-4b62-b1f4-ba898fdc0cc7",
        "title": "Contract: VotingToManageEmissionFunds [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
        "file": "/test/voting_to_manage_emission_funds_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3777,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "2fd9a0f2-1427-461d-b637-7525b13c53fd",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6f802800-7c1b-488a-83ed-dd196c49a30f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 2305,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[4];\nvotingKey4 = accounts[7];\nminingKey = accounts[1];\nminingKey2 = accounts[5];\nminingKey3 = accounts[6];\nminingKey4 = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\n\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForProxy = await VotingForProxy.new();\nconst votingForProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForProxy.address);\nvotingForProxy = await VotingForProxy.at(votingForProxyEternalStorage.address);\nawait votingForProxy.init(172800).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nvoting = await VotingToManageEmissionFunds.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorage.address, voting.address);\nvoting = await VotingToManageEmissionFunds.at(votingEternalStorage.address);\nemissionFunds = await EmissionFunds.new(voting.address);\nemissionReleaseTime = moment.utc().add(10, 'minutes').unix();\nemissionReleaseThreshold = moment.duration(3, 'months').asSeconds();\ndistributionThreshold = moment.duration(7, 'days').asSeconds();\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address,\n  {from: accounts[8]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  300,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.fulfilled;\nrewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\n\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingForProxyEternalStorage.address,\n  votingEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\nconst coinbaseInitBalance = await web3.eth.getBalance(coinbase);\nconst howMuchToSend = web3.toWei(10, 'ether');\nconst hash = await web3.eth.sendTransaction({\n  from: coinbase,\n  to: emissionFunds.address,\n  value: howMuchToSend\n});\nconst receipt = await web3.eth.getTransactionReceipt(hash);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(howMuchToSend);\nemissionFundsInitBalance = howMuchToSend;\n(await web3.eth.getBalance(coinbase)).should.be.bignumber.equal(coinbaseInitBalance.sub(howMuchToSend).sub(receipt.gasUsed));",
            "err": {},
            "isRoot": false,
            "uuid": "214dd86e-4e43-4b13-916a-5e7c61014885",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6d42f620-6101-4047-8ee1-da5d9ed69ded",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "5f5f0701-76d4-46f5-b55c-feed407a9a50",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should change state correctly",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #init should change state correctly",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.distributionThreshold.call()).should.be.bignumber.equal(distributionThreshold);\n(await voting.emissionFunds.call()).should.be.equal(emissionFunds.address);\n(await voting.emissionReleaseThreshold.call()).should.be.bignumber.equal(emissionReleaseThreshold);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.initDisabled.call()).should.be.equal(true);\n(await voting.proxyStorage.call()).should.be.equal(proxyStorage.address);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);",
                "err": {},
                "isRoot": false,
                "uuid": "43ee159e-d3bf-4d98-8d25-5a231d6b432f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called more than once",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #init cannot be called more than once",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2580b0e7-c02f-47c6-a6b2-623d4a5182d0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "43ee159e-d3bf-4d98-8d25-5a231d6b432f",
              "2580b0e7-c02f-47c6-a6b2-623d4a5182d0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 134,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a13c9ecb-9606-4bb5-bf57-cf0ec3641424",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 279,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "f6c86c87-ef86-4754-9dc1-118edf9a5651",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 899,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  await voting.getTime.call(), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(id)).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(6);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "746a7a2f-5b08-471f-9fe0-2faa75517300",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by valid voting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot may only be called by valid voting key",
                "timedOut": false,
                "duration": 142,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "af136ec5-eb70-4864-8998-ee1ef6c2943f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "endTime must be greater than startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot endTime must be greater than startTime",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(19, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9d9988e3-0c62-4668-8c4c-73112237bc5a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "startTime must be greater than current time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot startTime must be greater than current time",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(14, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6152a14b-059b-451e-b8e2-4384edabc262",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called before emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot cannot be called before emission release time",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(7, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1f6665fc-0d16-4137-8160-1c1082ca1c7b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ballot cannot last longer than distribution threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot ballot cannot last longer than distribution threshold",
                "timedOut": false,
                "duration": 119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(8, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "121ab596-aa10-4a1e-ad5a-7a1e7a801584",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "receiver address should not be 0x0",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot receiver address should not be 0x0",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, '0x0000000000000000000000000000000000000000', \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "7b9cc3b1-4cbc-416d-b5e0-3e4802e17e9d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create multiple ballots during the same distribution period",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot cannot create multiple ballots during the same distribution period",
                "timedOut": false,
                "duration": 477,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[6], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.voter.should.be.equal(votingKey);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 100;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "8512468c-39b7-408a-b81a-20b131cb8a3e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow creating new ballot after the next emission release threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot should allow creating new ballot after the next emission release threshold",
                "timedOut": false,
                "duration": 483,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(0)).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 - 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "9ef38ee7-a49c-47d7-adb2-c9bee160d5a4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "746a7a2f-5b08-471f-9fe0-2faa75517300",
              "af136ec5-eb70-4864-8998-ee1ef6c2943f",
              "9d9988e3-0c62-4668-8c4c-73112237bc5a",
              "6152a14b-059b-451e-b8e2-4384edabc262",
              "1f6665fc-0d16-4137-8160-1c1082ca1c7b",
              "121ab596-aa10-4a1e-ad5a-7a1e7a801584",
              "7b9cc3b1-4cbc-416d-b5e0-3e4802e17e9d",
              "8512468c-39b7-408a-b81a-20b131cb8a3e",
              "9ef38ee7-a49c-47d7-adb2-c9bee160d5a4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2308,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c347e717-2660-4968-9737-12f80cb0a015",
            "title": "#cancelNewBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot \"before each\" hook",
                "timedOut": false,
                "duration": 298,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "d648b39d-de6f-466c-8a5e-c9b87191cbe1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot happy path",
                "timedOut": false,
                "duration": 887,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nlet creationTime = await voting.getTime.call();\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nlet ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  creationTime, // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  true, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\nid = await voting.nextBallotId.call();\ncreationTime = moment.utc().add(22, 'minutes').unix();\nawait voting.setTime(creationTime);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(creationTime), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  true, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(1), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "38d83e3f-5895-43d5-b6dc-57ac247b9ab8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel nonexistent or finalized ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot cannot cancel nonexistent or finalized ballot",
                "timedOut": false,
                "duration": 309,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "305583fb-b458-43ad-9f46-43a14b6cd660",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by creator of a ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot may only be called by creator of a ballot",
                "timedOut": false,
                "duration": 251,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.votingKey.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "68b8bac3-350a-46d8-b679-d249d257901c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot may only be called within ballot canceling threshold",
                "timedOut": false,
                "duration": 335,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "938d970f-d050-44ae-9ddd-8ff3a7cafe99",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel already cancelled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot cannot cancel already cancelled ballot",
                "timedOut": false,
                "duration": 234,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a799045a-1203-46cc-bb94-c44e9cc379ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should restore emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot should restore emission release time",
                "timedOut": false,
                "duration": 678,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(emissionReleaseTime + emissionReleaseThreshold*5 + 10);\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "88e2800e-84e4-4b88-bbb6-6cac0f065eba",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "38d83e3f-5895-43d5-b6dc-57ac247b9ab8",
              "305583fb-b458-43ad-9f46-43a14b6cd660",
              "68b8bac3-350a-46d8-b679-d249d257901c",
              "938d970f-d050-44ae-9ddd-8ff3a7cafe99",
              "a799045a-1203-46cc-bb94-c44e9cc379ae",
              "88e2800e-84e4-4b88-bbb6-6cac0f065eba"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2694,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3d2803de-b1a0-42fb-bb5a-95905fa2a75a",
            "title": "#refreshEmissionReleaseTime",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not update until the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #refreshEmissionReleaseTime should not update until the next threshold",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(2, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);",
                "err": {},
                "isRoot": false,
                "uuid": "e3ba5b22-22be-43be-8c0d-410a95a231c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #refreshEmissionReleaseTime should update to the next threshold",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(4, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "bc82ebd9-889a-42bb-886d-b8e4dea16938",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the future threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #refreshEmissionReleaseTime should update to the future threshold",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(7, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "a8299257-9103-4632-8ebd-cf9fd2465739",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e3ba5b22-22be-43be-8c0d-410a95a231c2",
              "bc82ebd9-889a-42bb-886d-b8e4dea16938",
              "a8299257-9103-4632-8ebd-cf9fd2465739"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 316,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "cd7410ce-365b-478c-b95e-2ced79f850d1",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 501,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "4012ad85-1480-43bf-80e3-3dfc3012035f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 980,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsBalanceOld = await web3.eth.getBalance(emissionFunds.address);\nconst receiverBalanceOld = await web3.eth.getBalance(receiver);\nawait voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(0); // burnVotes\nballotInfo[9].should.be.bignumber.equal(1); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n(await voting.hasAlreadyVoted.call(id, votingKey)).should.be.equal(true);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.decision.should.be.bignumber.equal(choice.freeze);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKey);\nlogs[1].event.should.be.equal('BallotFinalized');\nlogs[1].args.id.should.be.bignumber.equal(0);\nlogs[1].args.voter.should.be.equal(votingKey);\nemissionFundsBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(emissionFunds.address));\nreceiverBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(receiver));",
                "err": {},
                "isRoot": false,
                "uuid": "87e913cb-fbeb-43e0-aded-ffed6b9b4427",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 1444,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+2);\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\n(await voting.getAmount.call(id)).should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\n(await voting.getAmount.call(id)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE+3);\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(3); // burnVotes\nballotInfo[9].should.be.bignumber.equal(0); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey2)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey3)).should.be.equal(true);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "66445a48-592c-41ed-8be7-290b0626188a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote by nonvoting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote by nonvoting key",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0433eb46-8db0-4e52-b6ba-8bad646920bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote before startTime",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9cc89ab3-92a2-4b27-9565-46fc06ac8208",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote after endTime",
                "timedOut": false,
                "duration": 260,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "72a2ebf4-b131-4727-ad03-2aa9bb4bcbeb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 221,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "405d61c5-c4c6-4d97-aacc-ea0dc626040a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 4, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b493f077-d24f-4412-be03-129e021a7156",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(99, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "72def6a2-9a59-44b7-bc38-72914a2e0268",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if already finalized",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote if already finalized",
                "timedOut": false,
                "duration": 1524,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait addValidator(votingKey3, miningKey3);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a169c386-6d8e-46ed-a628-0b8f117e9788",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with old miningKey",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with old miningKey",
                "timedOut": false,
                "duration": 2490,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nconst {logs} = await keysManager.swapMiningKey(miningKey3, miningKey);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingContractMock(coinbase);\nawait swapVotingKey(votingKey3, miningKey3);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey2}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nlet result = await keysManager.swapMiningKey(miningKey, miningKey3);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait swapVotingKey(votingKey, miningKey);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "aaec74b0-4570-42db-ae91-65cf58826ec4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if ballot is canceled",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote if ballot is canceled",
                "timedOut": false,
                "duration": 143,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(20, 'minutes').unix());\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9b2a7f54-17ae-4a73-81fe-3a5c02824ced",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "87e913cb-fbeb-43e0-aded-ffed6b9b4427",
              "66445a48-592c-41ed-8be7-290b0626188a",
              "0433eb46-8db0-4e52-b6ba-8bad646920bb",
              "9cc89ab3-92a2-4b27-9565-46fc06ac8208",
              "72a2ebf4-b131-4727-ad03-2aa9bb4bcbeb",
              "405d61c5-c4c6-4d97-aacc-ea0dc626040a",
              "b493f077-d24f-4412-be03-129e021a7156",
              "72def6a2-9a59-44b7-bc38-72914a2e0268",
              "a169c386-6d8e-46ed-a628-0b8f117e9788",
              "aaec74b0-4570-42db-ae91-65cf58826ec4",
              "9b2a7f54-17ae-4a73-81fe-3a5c02824ced"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7538,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "380a1a39-8e7a-433b-bf08-c384f75f192d",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 402,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "f34a3836-faf9-4f92-82c0-d2ddc56678b7",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize happy path",
                "timedOut": false,
                "duration": 614,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(id, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nlogs[0].event.should.be.equal('BallotFinalized');\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.voter.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "5a3e46fa-aa45-4d77-8412-04511458f1b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if it did not pass minimum voters count",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize freeze funds if it did not pass minimum voters count",
                "timedOut": false,
                "duration": 1058,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "946171f7-f6a3-4a7a-ac99-fe4b757bf368",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 3 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize freeze funds if there is no majority of 3 votes",
                "timedOut": false,
                "duration": 1280,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "760f9c27-cc1e-4bca-9870-ff6fcbe202a2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 4 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize freeze funds if there is no majority of 4 votes",
                "timedOut": false,
                "duration": 1765,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "8232102d-c299-4292-a609-0d48b37b2d90",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 2133,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "bf4abda6-733d-428d-8797-cc44009a5033",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 1739,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "3dbe3f60-01b6-43d1-8bc3-aa3df2f526fc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "burn funds if most votes are for burning",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize burn funds if most votes are for burning",
                "timedOut": false,
                "duration": 1853,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(receiverInitBalance);",
                "err": {},
                "isRoot": false,
                "uuid": "8d3d931a-34f1-4d6d-9876-fd3752e6a1d0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents finalize with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize prevents finalize with invalid id",
                "timedOut": false,
                "duration": 197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1ee4626f-7fd0-40dd-bfa3-8da89860b9be",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "do not let finalize if a ballot is active",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize do not let finalize if a ballot is active",
                "timedOut": false,
                "duration": 197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "19567626-77db-4ea0-880b-44f7f0c83f82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize immediately if the last validator gave his vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize finalize immediately if the last validator gave his vote",
                "timedOut": false,
                "duration": 1181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\n\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\n(await voting.noActiveBallotExists.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "502b93bb-6047-4827-81fe-00afff910df2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "does not finalize immediately until ballot canceling threshold is reached",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize does not finalize immediately until ballot canceling threshold is reached",
                "timedOut": false,
                "duration": 1194,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(20, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\n\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "c78e3875-8c23-4c39-bfb2-bcb04a760bcd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 277,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b3531a0e-2404-4ea3-8f15-375d253c6eda",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should refresh emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize should refresh emission release time",
                "timedOut": false,
                "duration": 374,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "cd33d83d-a70f-4aaa-9820-6a33b6c69190",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization if the voting key is a contract",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize deny finalization if the voting key is a contract",
                "timedOut": false,
                "duration": 742,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const voter = await VotingKey.new(voting.address);\nvotingKey2 = voter.address;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\n\nawait voter.callFinalize(id).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "47b62271-2fa2-4cce-b22d-8743aa0c022c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize deny finalization within ballot canceling threshold",
                "timedOut": false,
                "duration": 318,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(20, 'minutes').unix();\n\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "1ec98be5-2d96-4f6d-9105-33cf20a10dde",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization of canceled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize deny finalization of canceled ballot",
                "timedOut": false,
                "duration": 281,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "996acc06-1215-4f6d-8b3d-82b3455addec",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5a3e46fa-aa45-4d77-8412-04511458f1b6",
              "946171f7-f6a3-4a7a-ac99-fe4b757bf368",
              "760f9c27-cc1e-4bca-9870-ff6fcbe202a2",
              "8232102d-c299-4292-a609-0d48b37b2d90",
              "bf4abda6-733d-428d-8797-cc44009a5033",
              "3dbe3f60-01b6-43d1-8bc3-aa3df2f526fc",
              "8d3d931a-34f1-4d6d-9876-fd3752e6a1d0",
              "1ee4626f-7fd0-40dd-bfa3-8da89860b9be",
              "19567626-77db-4ea0-880b-44f7f0c83f82",
              "502b93bb-6047-4827-81fe-00afff910df2",
              "c78e3875-8c23-4c39-bfb2-bcb04a760bcd",
              "b3531a0e-2404-4ea3-8f15-375d253c6eda",
              "cd33d83d-a70f-4aaa-9820-6a33b6c69190",
              "47b62271-2fa2-4cce-b22d-8743aa0c022c",
              "1ec98be5-2d96-4f6d-9105-33cf20a10dde",
              "996acc06-1215-4f6d-8b3d-82b3455addec"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15203,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "1a0913e6-a2ad-4aef-b22a-21a0f0449135",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 133,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await VotingToManageEmissionFunds.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await VotingToManageEmissionFunds.at(votingEternalStorage.address);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "40997d3b-6e07-427c-a9d7-c49ee9189b1b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "0a7608c1-f860-457d-9320-2883a42ee7c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "05f0624a-b172-4e98-93c7-558a96674186",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "c8267e7b-b358-4fa5-ae39-7a234e2d4c31",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 219,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "9f299834-e7a0-4406-9e4b-9f3acf36a3a8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "6fcebc51-1a86-421d-8231-0bf26db53a94",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 858,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nconst emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nconst VOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nconst VOTING_END_DATE = moment.utc().add(7, 'days').unix();\nconst id = await voting.nextBallotId.call();\nconst receiver = accounts[9];\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait votingEternalStorage.setProxyStorage(proxyStorage.address);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingToManageEmissionFundsNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorage.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  await voting.getTime.call(), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  receiver // receiver\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n(await votingNew.noActiveBallotExists.call()).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "71830aa5-7da2-40a3-b808-d1aba43764dd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0a7608c1-f860-457d-9320-2883a42ee7c9",
              "05f0624a-b172-4e98-93c7-558a96674186",
              "c8267e7b-b358-4fa5-ae39-7a234e2d4c31",
              "9f299834-e7a0-4406-9e4b-9f3acf36a3a8",
              "6fcebc51-1a86-421d-8231-0bf26db53a94",
              "71830aa5-7da2-40a3-b808-d1aba43764dd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1554,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f469aecd-ad5d-4cd2-9404-96fe851d8df6",
        "title": "Contract: VotingToManageEmissionFunds upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
        "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 6962,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "ea21e341-b6e9-42ec-8a5c-f9cfabbb3bd0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a0441cfd-7c00-411b-b4cd-764ad37de50a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 2563,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[4];\nvotingKey4 = accounts[7];\nminingKey = accounts[1];\nminingKey2 = accounts[5];\nminingKey3 = accounts[6];\nminingKey4 = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\n\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForProxy = await VotingForProxy.new();\nconst votingForProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForProxy.address);\nvotingForProxy = await VotingForProxy.at(votingForProxyEternalStorage.address);\nawait votingForProxy.init(172800).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nvoting = await VotingToManageEmissionFunds.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorage.address, voting.address);\nvoting = await VotingToManageEmissionFunds.at(votingEternalStorage.address);\nemissionFunds = await EmissionFunds.new(voting.address);\nemissionReleaseTime = moment.utc().add(10, 'minutes').unix();\nemissionReleaseThreshold = moment.duration(3, 'months').asSeconds();\ndistributionThreshold = moment.duration(7, 'days').asSeconds();\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address,\n  {from: accounts[8]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  300,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.fulfilled;\nrewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\n\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingForProxyEternalStorage.address,\n  votingEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\nconst coinbaseInitBalance = await web3.eth.getBalance(coinbase);\nconst howMuchToSend = web3.toWei(10, 'ether');\nconst hash = await web3.eth.sendTransaction({\n  from: coinbase,\n  to: emissionFunds.address,\n  value: howMuchToSend\n});\nconst receipt = await web3.eth.getTransactionReceipt(hash);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(howMuchToSend);\nemissionFundsInitBalance = howMuchToSend;\n(await web3.eth.getBalance(coinbase)).should.be.bignumber.equal(coinbaseInitBalance.sub(howMuchToSend).sub(receipt.gasUsed));\nconst votingNew = await VotingToManageEmissionFundsNew.new();\nawait votingEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorage.address);\nvoting = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "34a414a2-99b4-4d4c-81f3-96d5f02591ae",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5f438af2-b187-4aea-9f85-a030fd099e97",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "cbf52151-94fb-49c0-8cf9-6124eac94766",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should change state correctly",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #init should change state correctly",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.distributionThreshold.call()).should.be.bignumber.equal(distributionThreshold);\n(await voting.emissionFunds.call()).should.be.equal(emissionFunds.address);\n(await voting.emissionReleaseThreshold.call()).should.be.bignumber.equal(emissionReleaseThreshold);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.initDisabled.call()).should.be.equal(true);\n(await voting.proxyStorage.call()).should.be.equal(proxyStorage.address);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);",
                "err": {},
                "isRoot": false,
                "uuid": "cf611be6-e824-4495-960b-717a794b03c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called more than once",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #init cannot be called more than once",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d2d8ac8b-9b9d-4a4f-8550-51c23a307f01",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cf611be6-e824-4495-960b-717a794b03c4",
              "d2d8ac8b-9b9d-4a4f-8550-51c23a307f01"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 124,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4fb884c1-55c9-42e3-b8e4-8319d77bada7",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 278,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "4e5db26f-341d-4f66-9be1-f0e24a6fd423",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 963,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  await voting.getTime.call(), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(id)).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(6);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "f8d76794-046b-464f-b7ad-52d4571afa60",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by valid voting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot may only be called by valid voting key",
                "timedOut": false,
                "duration": 154,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "a6df68be-98da-40e4-9c78-0d064c876301",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "endTime must be greater than startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot endTime must be greater than startTime",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(19, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0343b886-1614-4646-a35a-1eb570c1aaa2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "startTime must be greater than current time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot startTime must be greater than current time",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(14, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5cdd6e34-4a60-4693-ad51-2758c2a1dbd2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called before emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot cannot be called before emission release time",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(7, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a8a4c904-fa91-46b5-b16b-4d8c45684442",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ballot cannot last longer than distribution threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot ballot cannot last longer than distribution threshold",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(8, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3cbe710a-b59c-449e-9f83-2adeed0cfe26",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "receiver address should not be 0x0",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot receiver address should not be 0x0",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, '0x0000000000000000000000000000000000000000', \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "22f4d8ab-f655-4edd-be72-7a6a09b70813",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create multiple ballots during the same distribution period",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot cannot create multiple ballots during the same distribution period",
                "timedOut": false,
                "duration": 506,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[6], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.voter.should.be.equal(votingKey);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 100;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "11bcfc45-5fd9-40a8-a7e3-b8e7a377b484",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow creating new ballot after the next emission release threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot should allow creating new ballot after the next emission release threshold",
                "timedOut": false,
                "duration": 483,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(0)).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 - 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "e40d6115-5ab9-424a-b483-4f42ba4176c4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f8d76794-046b-464f-b7ad-52d4571afa60",
              "a6df68be-98da-40e4-9c78-0d064c876301",
              "0343b886-1614-4646-a35a-1eb570c1aaa2",
              "5cdd6e34-4a60-4693-ad51-2758c2a1dbd2",
              "a8a4c904-fa91-46b5-b16b-4d8c45684442",
              "3cbe710a-b59c-449e-9f83-2adeed0cfe26",
              "22f4d8ab-f655-4edd-be72-7a6a09b70813",
              "11bcfc45-5fd9-40a8-a7e3-b8e7a377b484",
              "e40d6115-5ab9-424a-b483-4f42ba4176c4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2373,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d77c7ee4-c25f-4c1a-a365-c6a55cf182f1",
            "title": "#cancelNewBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot \"before each\" hook",
                "timedOut": false,
                "duration": 288,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "f1b9f2c5-4906-48ee-a37f-d4e58bc45622",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot happy path",
                "timedOut": false,
                "duration": 918,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nlet creationTime = await voting.getTime.call();\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nlet ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  creationTime, // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  true, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\nid = await voting.nextBallotId.call();\ncreationTime = moment.utc().add(22, 'minutes').unix();\nawait voting.setTime(creationTime);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(creationTime), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  true, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(1), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "a8fead62-bbe3-402c-913c-01fe90b5cc38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel nonexistent or finalized ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot cannot cancel nonexistent or finalized ballot",
                "timedOut": false,
                "duration": 297,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "dd42b187-b8ac-4297-9579-90a66c5248b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by creator of a ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot may only be called by creator of a ballot",
                "timedOut": false,
                "duration": 250,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.votingKey.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "bc85bac4-36d7-461c-8a43-e92ebd245197",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot may only be called within ballot canceling threshold",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "40e4d357-7243-4428-83df-21382ed2a7c1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel already cancelled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot cannot cancel already cancelled ballot",
                "timedOut": false,
                "duration": 230,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ab2b40ba-e8de-4d1d-b6ae-a6b7d8bcda3e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should restore emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot should restore emission release time",
                "timedOut": false,
                "duration": 533,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(emissionReleaseTime + emissionReleaseThreshold*5 + 10);\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "dbcdce3e-06c2-4de3-beb9-61f8689d3510",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a8fead62-bbe3-402c-913c-01fe90b5cc38",
              "dd42b187-b8ac-4297-9579-90a66c5248b5",
              "bc85bac4-36d7-461c-8a43-e92ebd245197",
              "40e4d357-7243-4428-83df-21382ed2a7c1",
              "ab2b40ba-e8de-4d1d-b6ae-a6b7d8bcda3e",
              "dbcdce3e-06c2-4de3-beb9-61f8689d3510"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2493,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "593fdaf3-baf0-4dde-b196-3c187993f050",
            "title": "#refreshEmissionReleaseTime",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not update until the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #refreshEmissionReleaseTime should not update until the next threshold",
                "timedOut": false,
                "duration": 132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(2, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);",
                "err": {},
                "isRoot": false,
                "uuid": "1f627c27-ffcf-4b04-be88-647827763fb0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #refreshEmissionReleaseTime should update to the next threshold",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(4, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "02a93691-5ca4-4bb2-9c26-b89968d59dd6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the future threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #refreshEmissionReleaseTime should update to the future threshold",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(7, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "7297e8b4-6b7a-48fe-a7e9-4e1d87dcf208",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1f627c27-ffcf-4b04-be88-647827763fb0",
              "02a93691-5ca4-4bb2-9c26-b89968d59dd6",
              "7297e8b4-6b7a-48fe-a7e9-4e1d87dcf208"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 285,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6cc5e294-d16c-4dec-b9ef-a3366525ee6c",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 441,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "02fa79b7-3597-440d-9202-c6a5cff177db",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 857,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsBalanceOld = await web3.eth.getBalance(emissionFunds.address);\nconst receiverBalanceOld = await web3.eth.getBalance(receiver);\nawait voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(0); // burnVotes\nballotInfo[9].should.be.bignumber.equal(1); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n(await voting.hasAlreadyVoted.call(id, votingKey)).should.be.equal(true);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.decision.should.be.bignumber.equal(choice.freeze);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKey);\nlogs[1].event.should.be.equal('BallotFinalized');\nlogs[1].args.id.should.be.bignumber.equal(0);\nlogs[1].args.voter.should.be.equal(votingKey);\nemissionFundsBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(emissionFunds.address));\nreceiverBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(receiver));",
                "err": {},
                "isRoot": false,
                "uuid": "f7e582e5-3200-4966-b99f-b2b62912d9fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 1511,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+2);\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\n(await voting.getAmount.call(id)).should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\n(await voting.getAmount.call(id)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE+3);\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(3); // burnVotes\nballotInfo[9].should.be.bignumber.equal(0); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey2)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey3)).should.be.equal(true);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "c8d9607d-12e1-4644-a5f1-5494d6572c85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote by nonvoting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote by nonvoting key",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b434c7d0-20e3-488a-b677-f00274eba6aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote before startTime",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "da2c9d28-c798-40d7-898a-b4a7fdb6edc2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote after endTime",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "98ccee45-f412-4e3a-b89e-fb4f0a12b043",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 472,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d981a27e-3981-4565-8ba5-c30241f95fff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 4, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "82246b09-46c3-4e32-9279-1f21889844ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(99, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c266b488-88d4-4f24-8e21-fd86dc5b519d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if already finalized",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote if already finalized",
                "timedOut": false,
                "duration": 1563,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait addValidator(votingKey3, miningKey3);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d0dc2aa2-124a-4cd0-ae68-3273393a70ec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with old miningKey",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with old miningKey",
                "timedOut": false,
                "duration": 2479,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nconst {logs} = await keysManager.swapMiningKey(miningKey3, miningKey);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingContractMock(coinbase);\nawait swapVotingKey(votingKey3, miningKey3);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey2}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nlet result = await keysManager.swapMiningKey(miningKey, miningKey3);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait swapVotingKey(votingKey, miningKey);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "b45356fa-61ee-4160-9683-be76218a84bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if ballot is canceled",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote if ballot is canceled",
                "timedOut": false,
                "duration": 157,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(20, 'minutes').unix());\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b74fa5a4-b13c-463b-ba97-56ee027405f0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f7e582e5-3200-4966-b99f-b2b62912d9fe",
              "c8d9607d-12e1-4644-a5f1-5494d6572c85",
              "b434c7d0-20e3-488a-b677-f00274eba6aa",
              "da2c9d28-c798-40d7-898a-b4a7fdb6edc2",
              "98ccee45-f412-4e3a-b89e-fb4f0a12b043",
              "d981a27e-3981-4565-8ba5-c30241f95fff",
              "82246b09-46c3-4e32-9279-1f21889844ef",
              "c266b488-88d4-4f24-8e21-fd86dc5b519d",
              "d0dc2aa2-124a-4cd0-ae68-3273393a70ec",
              "b45356fa-61ee-4160-9683-be76218a84bb",
              "b74fa5a4-b13c-463b-ba97-56ee027405f0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7800,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "70a5a307-f1db-4aec-93b3-717e705077c9",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 332,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "7ae81742-2191-43b7-ac1b-b3cb497ddb0a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize happy path",
                "timedOut": false,
                "duration": 620,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(id, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nlogs[0].event.should.be.equal('BallotFinalized');\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.voter.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "300ec71a-a917-4915-be1b-9844963fe9a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if it did not pass minimum voters count",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize freeze funds if it did not pass minimum voters count",
                "timedOut": false,
                "duration": 1037,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "3ded6865-70a4-4550-ad84-2d497c25c1b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 3 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize freeze funds if there is no majority of 3 votes",
                "timedOut": false,
                "duration": 1329,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "ba273fc2-166f-4a29-8eec-6186e336f911",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 4 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize freeze funds if there is no majority of 4 votes",
                "timedOut": false,
                "duration": 1963,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "cccd0e71-4791-4508-94c7-c2043a188a18",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 2230,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "c7a15a00-85a3-4f48-a582-f83ccc0e4eb9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 1834,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "20fbd15f-d1f5-48cd-89d5-1db7dda9dfa1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "burn funds if most votes are for burning",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize burn funds if most votes are for burning",
                "timedOut": false,
                "duration": 1896,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(receiverInitBalance);",
                "err": {},
                "isRoot": false,
                "uuid": "a123ffa3-1cdb-44d6-b965-8824d1ed2f07",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents finalize with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize prevents finalize with invalid id",
                "timedOut": false,
                "duration": 217,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "633ad03f-d2ee-4a5c-b1fc-ecb8f041a060",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "do not let finalize if a ballot is active",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize do not let finalize if a ballot is active",
                "timedOut": false,
                "duration": 199,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "65034a7c-be08-479f-abf3-b5f1067dd575",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize immediately if the last validator gave his vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize finalize immediately if the last validator gave his vote",
                "timedOut": false,
                "duration": 1202,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\n\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\n(await voting.noActiveBallotExists.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "2c44ad0e-403f-45c2-8823-17c1b99978c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "does not finalize immediately until ballot canceling threshold is reached",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize does not finalize immediately until ballot canceling threshold is reached",
                "timedOut": false,
                "duration": 1300,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(20, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\n\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "8e234516-0e96-423b-a2e7-46cbbd32d4f5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 287,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b61aecfd-663e-4bd1-bbaf-b0923afa3911",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should refresh emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize should refresh emission release time",
                "timedOut": false,
                "duration": 251,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "fa585618-cc8d-4e1a-9cbb-239f73162c89",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization if the voting key is a contract",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize deny finalization if the voting key is a contract",
                "timedOut": false,
                "duration": 725,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const voter = await VotingKey.new(voting.address);\nvotingKey2 = voter.address;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\n\nawait voter.callFinalize(id).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "fb83ef10-59e5-4cb7-ae7b-335bbed529af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize deny finalization within ballot canceling threshold",
                "timedOut": false,
                "duration": 321,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(20, 'minutes').unix();\n\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "f2e638ad-9b29-40cc-b98d-1c9020ab3e76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization of canceled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize deny finalization of canceled ballot",
                "timedOut": false,
                "duration": 289,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b462f42e-8cdc-4b1f-9eb8-782d2bf9b6e3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "300ec71a-a917-4915-be1b-9844963fe9a5",
              "3ded6865-70a4-4550-ad84-2d497c25c1b7",
              "ba273fc2-166f-4a29-8eec-6186e336f911",
              "cccd0e71-4791-4508-94c7-c2043a188a18",
              "c7a15a00-85a3-4f48-a582-f83ccc0e4eb9",
              "20fbd15f-d1f5-48cd-89d5-1db7dda9dfa1",
              "a123ffa3-1cdb-44d6-b965-8824d1ed2f07",
              "633ad03f-d2ee-4a5c-b1fc-ecb8f041a060",
              "65034a7c-be08-479f-abf3-b5f1067dd575",
              "2c44ad0e-403f-45c2-8823-17c1b99978c4",
              "8e234516-0e96-423b-a2e7-46cbbd32d4f5",
              "b61aecfd-663e-4bd1-bbaf-b0923afa3911",
              "fa585618-cc8d-4e1a-9cbb-239f73162c89",
              "fb83ef10-59e5-4cb7-ae7b-335bbed529af",
              "f2e638ad-9b29-40cc-b98d-1c9020ab3e76",
              "b462f42e-8cdc-4b1f-9eb8-782d2bf9b6e3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15700,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}